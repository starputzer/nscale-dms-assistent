import { defineConfig } from "vite";
import vue from "@vitejs/plugin-vue";
import { fileURLToPath, URL } from "url";
import { resolve, join, dirname } from "path";
import fs from "fs";
import compression from "vite-plugin-compression";
import { visualizer } from "rollup-plugin-visualizer";
import viteImagemin from "vite-plugin-imagemin";

// Bestimme das Basisverzeichnis des Projekts
const projectRoot = resolve(__dirname);
const frontendDir = resolve(projectRoot, "frontend");
const distDir = resolve(projectRoot, "api/frontend");
const isProduction = process.env.NODE_ENV === "production";

// Logging für den Entwicklungsprozess
console.log("Vite-Konfiguration wird geladen");
console.log(`Projekt-Verzeichnis: ${projectRoot}`);
console.log(`Frontend-Verzeichnis: ${frontendDir}`);
console.log(`Dist-Verzeichnis: ${distDir}`);

// Wichtige Dateien auf Existenz prüfen
const mainJsPath = resolve(frontendDir, "main.js");
const jsMainJsPath = resolve(frontendDir, "js/main.js");
console.log(`main.js existiert: ${fs.existsSync(mainJsPath)}`);
console.log(`js/main.js existiert: ${fs.existsSync(jsMainJsPath)}`);

/**
 * CSS-Handling-Plugin für Vite
 * Behandelt CSS-Dateien korrekt, ohne sie als Module zu laden
 */
function cssHandlingPlugin() {
  return {
    name: "css-handling",
    transform(code, id) {
      // Wenn es sich um einen CSS-Import in einer JS-Datei handelt
      if (
        id.endsWith(".js") &&
        code.includes("import") &&
        code.includes(".css")
      ) {
        // Entferne CSS-Imports aus JS-Dateien
        const newCode = code.replace(
          /import ['"].*\.css['"];?/g,
          "// CSS-Import wurde entfernt",
        );
        return {
          code: newCode,
          map: null,
        };
      }
      return null;
    },
  };
}

/**
 * Plugin zur Behebung von NPM-Modulen Problemen
 * Stellt virtuelle Module für nicht-installierte NPM-Pakete bereit
 */
function npmModulesPlugin() {
  return {
    name: "npm-modules-fix",
    resolveId(id) {
      // Behandelt uuid und andere problematische Module
      if (id === "uuid") {
        // Virtuelles Modul für uuid
        return "\0virtual:uuid";
      }
      return null;
    },
    load(id) {
      // Stellt virtuellen Code für uuid-Modul bereit
      if (id === "\0virtual:uuid") {
        return `
          import { v4 } from '/src/vue-implementation/utils/uuidUtil';
          export { v4 };
          export default { v4 };
        `;
      }
      return null;
    },
  };
}

/**
 * Handler für Symlinks in der Anwendung
 * Löst Symlinks auf und verfolgt sie bis zum tatsächlichen Pfad
 */
function resolveSymlinks(path) {
  try {
    // Prüfe, ob der Pfad existiert
    if (!fs.existsSync(path)) {
      return path;
    }

    // Prüfe, ob es ein Symlink ist
    const stats = fs.lstatSync(path);
    if (!stats.isSymbolicLink()) {
      return path;
    }

    // Löse den Symlink auf
    const target = fs.readlinkSync(path);
    const resolvedPath = resolve(dirname(path), target);

    console.log(`Symlink aufgelöst: ${path} -> ${resolvedPath}`);

    // Rekursiv auflösen (falls der Symlink auf einen anderen Symlink zeigt)
    return resolveSymlinks(resolvedPath);
  } catch (err) {
    console.error(`Fehler beim Auflösen des Symlinks ${path}:`, err);
    return path;
  }
}

/**
 * Virtuelles Plugin zur Behebung der /static/ Pfade
 * Dieses Plugin erstellt virtuelle statische Dateien für CSS, JS und Bilder
 */
function staticAssetsPlugin() {
  return {
    name: "static-assets-fix",
    configureServer(server) {
      // Middleware für /static/, /frontend/ und direkte Pfade
      server.middlewares.use((req, res, next) => {
        // Verbesserte Pfadbehandlung - unterstützt verschiedene Pfadpräfixe
        let relativePath = req.url;
        let directPath = false;

        // Behandle /frontend/ Endpunkt direkt
        if (relativePath === "/frontend/" || relativePath === "/frontend") {
          const indexPath = resolve(frontendDir, "index.html");
          if (fs.existsSync(indexPath)) {
            res.writeHead(200, { "Content-Type": "text/html" });
            fs.createReadStream(indexPath).pipe(res);
            return;
          }
        }

        // Entferne bekannte Präfixe
        if (relativePath.startsWith("/static/")) {
          relativePath = relativePath.replace("/static/", "/");
        } else if (relativePath.startsWith("/frontend/")) {
          relativePath = relativePath.replace("/frontend/", "/");
        }

        // Entferne führenden Slash
        if (relativePath.startsWith("/")) {
          relativePath = relativePath.substring(1);
        }

        // Bestimme Dateityp und Pfade
        const ext = relativePath.split(".").pop().toLowerCase();
        const cssPath = resolve(
          frontendDir,
          "css",
          relativePath.replace("css/", ""),
        );
        const jsPath = resolve(
          frontendDir,
          "js",
          relativePath.replace("js/", ""),
        );
        const imagesPath = resolve(
          frontendDir,
          "images",
          relativePath.replace("images/", ""),
        );

        // Korrekter Content-Type basierend auf Dateiendung
        let contentType = "application/octet-stream";
        if (ext === "css") contentType = "text/css";
        else if (ext === "js") contentType = "application/javascript";
        else if (ext === "png") contentType = "image/png";
        else if (ext === "jpg" || ext === "jpeg") contentType = "image/jpeg";
        else if (ext === "svg") contentType = "image/svg+xml";
        else if (ext === "html") contentType = "text/html";

        // Lokalisiere die Datei in verschiedenen möglichen Verzeichnissen
        let filePath = null;

        // CSS-Dateien
        if (relativePath.startsWith("css/") || relativePath.endsWith(".css")) {
          const cssName = relativePath.replace("css/", "");
          filePath = resolve(frontendDir, "css", cssName);
          contentType = "text/css";
        }
        // JS-Dateien
        else if (
          relativePath.startsWith("js/") ||
          relativePath.endsWith(".js")
        ) {
          const jsName = relativePath.replace("js/", "");
          filePath = resolve(frontendDir, "js", jsName);
          contentType = "application/javascript";
        }
        // Bild-Dateien
        else if (
          relativePath.startsWith("images/") ||
          ["png", "jpg", "jpeg", "svg", "gif"].includes(ext)
        ) {
          const imgName = relativePath.replace("images/", "");
          filePath = resolve(frontendDir, "images", imgName);
          // MIME-Typ bereits oben festgelegt
        }
        // Versuche direkt im frontend-Verzeichnis
        else {
          filePath = resolve(frontendDir, relativePath);
        }

        // Löse Symlinks auf, bevor wir mit der Datei arbeiten
        if (filePath && fs.existsSync(filePath)) {
          try {
            filePath = resolveSymlinks(filePath);
          } catch (err) {
            console.error("Fehler beim Auflösen des Symlinks:", err);
          }
        }

        // Prüfe, ob die Datei existiert und keine Verzeichnis ist
        if (filePath && fs.existsSync(filePath)) {
          // Überprüfe, ob es sich um ein Verzeichnis handelt
          const stats = fs.statSync(filePath);
          if (stats.isDirectory()) {
            // Wenn es ein Verzeichnis ist, prüfe auf index.html oder ignoriere
            const indexPath = resolve(filePath, "index.html");
            if (fs.existsSync(indexPath)) {
              res.writeHead(200, {
                "Content-Type": "text/html",
                "Cache-Control":
                  "no-store, no-cache, must-revalidate, max-age=0",
              });
              fs.createReadStream(indexPath).pipe(res);
              return;
            }
            // Andernfalls gehe zum nächsten Middleware
            next();
            return;
          }

          // Es ist eine Datei, sende sie
          res.writeHead(200, {
            "Content-Type": contentType,
            "Cache-Control": "no-store, no-cache, must-revalidate, max-age=0",
          });

          try {
            // Überprüfe nochmals, ob der Pfad ein Verzeichnis ist (für den Fall einer Symlink-Auflösung)
            const finalStats = fs.statSync(filePath);
            if (finalStats.isDirectory()) {
              console.warn(`Verzeichnis statt Datei angefordert: ${filePath}`);
              next();
              return;
            }

            // Sichere Erstellung des ReadStreams
            const readStream = fs.createReadStream(filePath);

            // Fehlerbehandlung für den Stream
            readStream.on("error", (streamErr) => {
              console.error(`Stream-Fehler für ${filePath}:`, streamErr);
              if (!res.headersSent) {
                res.writeHead(500, { "Content-Type": "text/plain" });
                res.end(`Fehler beim Lesen der Datei: ${streamErr.message}`);
              }
            });

            // Pipe zum Response
            readStream.pipe(res);
          } catch (err) {
            console.error(`Fehler beim Lesen der Datei ${filePath}:`, err);
            if (!res.headersSent) {
              res.writeHead(500, { "Content-Type": "text/plain" });
              res.end(`Serverfehler: ${err.message}`);
            }
          }
          return;
        }

        // Wenn keine spezielle Behandlung erforderlich ist, weiter zum nächsten Middleware
        next();
      });
    },
  };
}

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [
    vue(),
    cssHandlingPlugin(), // Plugin für korrektes CSS-Handling
    staticAssetsPlugin(), // Plugin für statische Assets
    npmModulesPlugin(), // Plugin für NPM-Module Probleme
    // Plugins nur für Produktion
    isProduction && compression({ // Kompression für bessere Produktionsperformance
      algorithm: 'gzip',
      ext: '.gz',
      threshold: 10240, // Mindestgröße für Kompression (10KB)
      deleteOriginFile: false,
    }),
    isProduction && viteImagemin({ // Bild-Optimierung für Produktion
      gifsicle: {
        optimizationLevel: 7,
        interlaced: false,
      },
      optipng: {
        optimizationLevel: 7,
      },
      mozjpeg: {
        quality: 80,
      },
      pngquant: {
        quality: [0.8, 0.9],
        speed: 4,
      },
      svgo: {
        plugins: [
          {
            name: 'removeViewBox',
            active: false,
          },
          {
            name: 'cleanupIDs',
            active: false,
          },
        ],
      },
    }),
    process.env.ANALYZE && visualizer({
      filename: './stats.html',
      open: true,
      gzipSize: true,
      brotliSize: true,
    }),
  ].filter(Boolean), // Entferne alle falsy-Werte aus der Plugin-Liste

  // Konfiguration für die öffentlichen Verzeichnisse
  publicDir: "public",

  // Optimiere die Abhängigkeitsauflösung
  optimizeDeps: {
    include: ['vue', 'vue-router', 'pinia', '@vueuse/core'],
    exclude: [],
    esbuildOptions: {
      define: {
        global: "globalThis",
      },
      target: 'es2020',
      supported: { 
        'top-level-await': true 
      },
    },
  },

  // CSS-spezifische Konfiguration
  css: {
    // Deaktiviere CSS-Module für globale Styles
    modules: false,
    // Nur Sourcemaps im Entwicklungsmodus
    devSourcemap: !isProduction,
    // SCSS-Präprozessor-Unterstützung
    preprocessorOptions: {
      scss: {
        additionalData: `@import "./src/assets/styles/_variables.scss";`,
      },
    },
    // PostCSS für optimiertes CSS
    postcss: {
      plugins: [
        require('autoprefixer')({
          overrideBrowserslist: ["last 2 versions", "> 0.5%"],
        }),
        // CSS-Optimierung nur für Produktion
        isProduction && require('cssnano')({
          preset: ['default', {
            discardComments: { removeAll: true },
            normalizeWhitespace: false,
          }],
        }),
        isProduction && require('@fullhuman/postcss-purgecss')({
          content: [
            './src/**/*.vue',
            './src/**/*.js',
            './src/**/*.ts',
            './index.html',
          ],
          safelist: [
            /-(leave|enter|appear)(|-(to|from|active))$/,
            /^(?!(|.*?:)cursor-move).+-move$/,
            /^router-link(|-exact)-active$/,
            /data-v-.*/,
          ],
        }),
      ].filter(Boolean), // Entferne alle falsy-Werte
    },
  },

  // Verbesserte Alias-Konfiguration
  resolve: {
    alias: {
      "@": fileURLToPath(new URL("./src", import.meta.url)),
      "@frontend": frontendDir,
      "@assets": resolve(frontendDir, "assets"),
      "@components": resolve(frontendDir, "vue/components"),
      "@composables": resolve(frontendDir, "vue/composables"),
      // Statische Assets-Aliase
      "/static/css/": resolve(frontendDir, "css") + "/",
      "/static/js/": resolve(frontendDir, "js") + "/",
      "/static/images/": resolve(frontendDir, "images") + "/",
      // Vue-Module
      vue: resolve(projectRoot, "node_modules/vue/dist/vue.esm-bundler.js"),
      "@vue/runtime-dom": resolve(
        projectRoot,
        "node_modules/@vue/runtime-dom/dist/runtime-dom.esm-bundler.js",
      ),
      "@vue/shared": resolve(
        projectRoot,
        "node_modules/@vue/shared/dist/shared.esm-bundler.js",
      ),
      "@vue/reactivity": resolve(
        projectRoot,
        "node_modules/@vue/reactivity/dist/reactivity.esm-bundler.js",
      ),
    },
    extensions: [".js", ".ts", ".vue", ".json"],
  },

  // Server-Konfiguration für die Entwicklung
  server: {
    port: 3000,
    strictPort: true,
    cors: true,
    hmr: true, // Hot Module Replacement aktivieren
    // Konfiguriere Vite, um Ressourcen aus dem frontend-Verzeichnis zu servieren
    fs: {
      strict: false,
      allow: [projectRoot, frontendDir],
    },
    // Verbesserte Proxy-Konfiguration für API-Anfragen
    proxy: {
      "/api": {
        target: "http://localhost:8080", // API-Server auf Port 8080
        changeOrigin: true,
        secure: false,
        ws: true,
        rewrite: (path) => path,
        configure: (proxy, _options) => {
          proxy.on("error", (err, _req, _res) => {
            console.log("Proxy-Fehler:", err);
          });
          proxy.on("proxyReq", (proxyReq, req, _res) => {
            console.log("Proxy-Anfrage:", req.method, req.url);
          });
        },
      },
    },
  },

  // Build-Optionen
  build: {
    outDir: distDir,
    assetsDir: "assets",
    emptyOutDir: true,
    sourcemap: !isProduction, // Sourcemaps nur im Entwicklungsmodus
    
    // Optimierung für Produktion
    minify: isProduction ? 'terser' : false,
    terserOptions: isProduction ? {
      compress: {
        drop_console: true,
        drop_debugger: true,
        pure_funcs: ["console.log", "console.debug", "console.info"],
      }
    } : undefined,

    // Verbesserte Aufteilung der Chunks
    rollupOptions: {
      input: {
        // Prüfe, ob die Pfade existieren, bevor sie als Input definiert werden
        main: fs.existsSync(resolve(frontendDir, "main.js"))
          ? resolve(frontendDir, "main.js")
          : null,
        admin: fs.existsSync(resolve(frontendDir, "js/admin.js"))
          ? resolve(frontendDir, "js/admin.js")
          : null,
        docConverter: fs.existsSync(
          resolve(frontendDir, "vue/doc-converter-app.js"),
        )
          ? resolve(frontendDir, "vue/doc-converter-app.js")
          : null,
        dmsAssistant: fs.existsSync(
          resolve(frontendDir, "vue-dms-assistant.html"),
        )
          ? resolve(frontendDir, "vue-dms-assistant.html")
          : null,
        index: resolve(frontendDir, "index.html"),
      },
      // Entferne null-Werte aus dem input-Objekt
      get input() {
        const result = {};
        Object.entries(this._input || {}).forEach(([key, value]) => {
          if (value !== null) {
            result[key] = value;
          }
        });
        return result;
      },
      set input(value) {
        this._input = value;
      },
      _input: {},
      output: {
        entryFileNames: isProduction ? "js/[name].[hash].js" : "js/[name].js",
        chunkFileNames: isProduction 
          ? "js/chunks/[name]-[hash].js" 
          : "js/chunks/[name].js",
        assetFileNames: (assetInfo) => {
          const extType = assetInfo.name?.split(".").pop();
          if (extType && /png|jpe?g|svg|gif|tiff|bmp|ico/i.test(extType)) {
            return "images/[name].[hash][extname]";
          }
          if (extType && /css/i.test(extType)) {
            return "css/[name].[hash][extname]";
          }
          if (extType && /woff2?|ttf|eot/i.test(extType)) {
            return "fonts/[name].[hash][extname]";
          }
          return "assets/[name].[hash][extname]";
        },
        manualChunks: (id) => {
          // Vendor-Bibliotheken
          if (id.includes('node_modules')) {
            if (id.includes('vue')) return 'vendor-vue';
            if (id.includes('pinia')) return 'vendor-pinia';
            if (id.includes('router')) return 'vendor-router';
            if (id.includes('axios')) return 'vendor-axios';
            if (id.includes('chart')) return 'vendor-chart';
            if (id.includes('marked')) return 'vendor-marked';
            if (id.includes('vueuse')) return 'vendor-vueuse';
            return 'vendor';
          }

          // App-Komponenten
          if (id.includes('/components/')) {
            if (id.includes('/admin/')) return 'components-admin';
            if (id.includes('/chat/')) return 'components-chat';
            if (id.includes('/ui/')) return 'components-ui';
            if (id.includes('/shared/')) return 'components-shared';
            return 'components';
          }

          // Stores
          if (id.includes('/stores/')) {
            if (id.includes('/admin/')) return 'stores-admin';
            if (id.includes('/sessions')) return 'stores-sessions';
            return 'stores';
          }

          // Services
          if (id.includes('/services/')) {
            if (id.includes('/api/')) return 'services-api';
            return 'services';
          }

          // Bridge-System
          if (id.includes('/bridge/')) {
            return 'bridge';
          }
          
          return undefined; // Standardverhalten für nicht zugeordnete Module
        },
      },
    },

    // Verbesserte Caching-Strategie
    assetsInlineLimit: 10240, // 10kb
    cssCodeSplit: true,
    target: 'es2019',
    modulePreload: true,
  },
});