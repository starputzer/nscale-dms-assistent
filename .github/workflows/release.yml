name: Release

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - prerelease

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Install dependencies
        run: |
          npm ci
          npm install -g semantic-release @semantic-release/changelog @semantic-release/git

      - name: Bump version
        id: version
        run: |
          # Get current version
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"
          
          # Bump version based on input
          case "${{ github.event.inputs.release_type }}" in
            major)
              npm version major --no-git-tag-version
              ;;
            minor)
              npm version minor --no-git-tag-version
              ;;
            patch)
              npm version patch --no-git-tag-version
              ;;
            prerelease)
              npm version prerelease --no-git-tag-version --preid=beta
              ;;
          esac
          
          # Get new version
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "New version: $NEW_VERSION"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Update version in other files
        run: |
          VERSION=${{ steps.version.outputs.version }}
          
          # Update Python version
          sed -i "s/__version__ = .*/__version__ = '$VERSION'/" api/version.py || true
          
          # Update docker-compose
          sed -i "s/APP_VERSION=.*/APP_VERSION=$VERSION/" .env.example
          
          # Update README
          sed -i "s/Version:** .*/Version:** $VERSION | **Letzte Aktualisierung:** $(date +%d.%m.%Y)/" README.md

      - name: Generate changelog
        id: changelog
        run: |
          # Generate changelog for this version
          git log --pretty=format:"- %s (%h)" $(git describe --tags --abbrev=0)..HEAD > CHANGELOG_TEMP.md
          
          # Categorize changes
          echo "## Version ${{ steps.version.outputs.version }} - $(date +%Y-%m-%d)" > CHANGELOG_NEW.md
          echo "" >> CHANGELOG_NEW.md
          
          echo "### 🚀 Features" >> CHANGELOG_NEW.md
          grep -E "^- (feat|feature):" CHANGELOG_TEMP.md | sed 's/^- feat://; s/^- feature://' >> CHANGELOG_NEW.md || echo "- No new features" >> CHANGELOG_NEW.md
          echo "" >> CHANGELOG_NEW.md
          
          echo "### 🐛 Bug Fixes" >> CHANGELOG_NEW.md
          grep -E "^- (fix|bugfix):" CHANGELOG_TEMP.md | sed 's/^- fix://; s/^- bugfix://' >> CHANGELOG_NEW.md || echo "- No bug fixes" >> CHANGELOG_NEW.md
          echo "" >> CHANGELOG_NEW.md
          
          echo "### 📚 Documentation" >> CHANGELOG_NEW.md
          grep -E "^- (docs|doc):" CHANGELOG_TEMP.md | sed 's/^- docs://; s/^- doc://' >> CHANGELOG_NEW.md || echo "- No documentation updates" >> CHANGELOG_NEW.md
          echo "" >> CHANGELOG_NEW.md
          
          echo "### 🔧 Other Changes" >> CHANGELOG_NEW.md
          grep -vE "^- (feat|feature|fix|bugfix|docs|doc):" CHANGELOG_TEMP.md >> CHANGELOG_NEW.md || echo "- No other changes" >> CHANGELOG_NEW.md
          echo "" >> CHANGELOG_NEW.md
          
          # Prepend to CHANGELOG.md
          if [ -f CHANGELOG.md ]; then
            cat CHANGELOG_NEW.md CHANGELOG.md > CHANGELOG_TEMP.md
            mv CHANGELOG_TEMP.md CHANGELOG.md
          else
            mv CHANGELOG_NEW.md CHANGELOG.md
          fi
          
          rm -f CHANGELOG_TEMP.md CHANGELOG_NEW.md

      - name: Commit changes
        run: |
          git add package.json package-lock.json CHANGELOG.md README.md .env.example api/version.py || true
          git commit -m "chore: release v${{ steps.version.outputs.version }}" || true

      - name: Create tag
        run: |
          git tag -a "v${{ steps.version.outputs.version }}" -m "Release v${{ steps.version.outputs.version }}"

      - name: Push changes
        run: |
          git push origin main
          git push origin "v${{ steps.version.outputs.version }}"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "v${{ steps.version.outputs.version }}"
          name: "Release v${{ steps.version.outputs.version }}"
          body_path: CHANGELOG_NEW.md
          draft: false
          prerelease: ${{ github.event.inputs.release_type == 'prerelease' }}
          generate_release_notes: true

      - name: Trigger deployment
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'deploy.yml',
              ref: 'main',
              inputs: {
                environment: 'production'
              }
            })