name: Run Tests

on:
  push:
    branches: [master, main, develop]
  pull_request:
    branches: [master, main, develop]
  workflow_dispatch:
    inputs:
      test_category:
        description: 'Test category to run (all, unit, functional, ui, a11y, performance)'
        required: false
        default: 'all'

env:
  NODE_VERSION: 18.x
  CACHE_KEY_PREFIX: nscale-assist-v1

jobs:
  lint-and-typecheck:
    name: Lint and Typecheck
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run type checking
        run: npm run typecheck

  unit-tests:
    name: Unit Tests
    needs: lint-and-typecheck
    runs-on: ubuntu-latest
    if: >
      github.event_name == 'push' ||
      github.event_name == 'pull_request' ||
      github.event.inputs.test_category == 'all' ||
      github.event.inputs.test_category == 'unit'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test:unit

      - name: Upload unit test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: unit-test-results
          path: |
            coverage/
            test-results/unit/

  functional-tests:
    name: Functional Tests
    needs: lint-and-typecheck
    runs-on: ubuntu-latest
    if: >
      github.event_name == 'push' ||
      github.event_name == 'pull_request' ||
      github.event.inputs.test_category == 'all' ||
      github.event.inputs.test_category == 'functional'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run functional tests
        run: npm run test:functional
        
      - name: Upload functional test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: functional-test-results
          path: test-results/functional/

  ui-tests:
    name: UI Tests
    needs: lint-and-typecheck
    runs-on: ubuntu-latest
    if: >
      github.event_name == 'push' ||
      github.event_name == 'pull_request' ||
      github.event.inputs.test_category == 'all' ||
      github.event.inputs.test_category == 'ui'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run UI tests
        run: npm run test:ui
        
      - name: Upload UI test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: ui-test-results
          path: test-results/ui/

  accessibility-tests:
    name: Accessibility Tests
    needs: lint-and-typecheck
    runs-on: ubuntu-latest
    if: >
      github.event_name == 'push' ||
      github.event_name == 'pull_request' ||
      github.event.inputs.test_category == 'all' ||
      github.event.inputs.test_category == 'a11y'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run accessibility tests
        run: npm run test:a11y
        
      - name: Upload accessibility test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: a11y-test-results
          path: test-results/a11y/

  performance-tests:
    name: Performance Tests
    needs: [unit-tests, functional-tests, ui-tests]
    runs-on: ubuntu-latest
    if: >
      (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
      (github.event_name == 'push' && github.ref == 'refs/heads/master') ||
      github.event.inputs.test_category == 'performance'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run performance tests
        run: npm run test:performance
        
      - name: Upload performance test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: performance-test-results
          path: test-results/performance/

  e2e-tests:
    name: End-to-End Tests
    needs: [unit-tests, functional-tests]
    runs-on: ubuntu-latest
    if: >
      (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
      (github.event_name == 'push' && github.ref == 'refs/heads/master') ||
      github.event.inputs.test_category == 'all'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Start server in background
        run: |
          npm run build
          npm run start &
          sleep 10

      - name: Run E2E tests
        run: npm run test:e2e
        
      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-test-results
          path: |
            test-results/e2e/
            playwright-report/

  generate-report:
    name: Generate Test Report
    needs: [unit-tests, functional-tests, ui-tests, accessibility-tests, performance-tests, e2e-tests]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: all-artifacts

      - name: Generate combined report
        run: npm run generate-report

      - name: Upload combined report
        uses: actions/upload-artifact@v3
        with:
          name: combined-test-report
          path: test-report/

      - name: Post results to PR (if PR)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            try {
              const summary = fs.readFileSync('./test-report/summary.json', 'utf8');
              const data = JSON.parse(summary);
              
              let body = '## Test Results Summary\n\n';
              body += '| Category | Total | Passed | Failed | Skipped |\n';
              body += '|----------|-------|--------|--------|--------|\n';
              
              Object.entries(data.categories).forEach(([category, results]) => {
                body += `| ${category} | ${results.total} | ${results.passed} | ${results.failed} | ${results.skipped} |\n`;
              });
              
              body += '\n### Overall: ';
              body += data.stats.failed > 0 ? '❌ Some tests failed' : '✅ All tests passed';
              body += '\n\n';
              
              if (data.stats.failed > 0) {
                body += '### Failed Tests\n\n';
                data.failedTests.forEach(test => {
                  body += `- ${test.suite}: **${test.name}**\n`;
                  if (test.errorMessage) {
                    body += `  \`\`\`\n  ${test.errorMessage}\n  \`\`\`\n`;
                  }
                });
              }
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            } catch (error) {
              console.error('Error posting test results to PR:', error);
            }

  notify-failure:
    name: Notify on Failure
    needs: [unit-tests, functional-tests, ui-tests, accessibility-tests, performance-tests, e2e-tests]
    if: failure()
    runs-on: ubuntu-latest
    steps:
      - name: Send failure notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_COLOR: danger
          SLACK_MESSAGE: ':warning: Tests failed on ${{ github.repository }} in ${{ github.workflow }} workflow! Check the GitHub Actions tab for details.'
          SLACK_TITLE: Test Failure Notification
          SLACK_FOOTER: 'GitHub Actions'