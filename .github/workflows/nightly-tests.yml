name: Nightly Tests

on:
  schedule:
    # Run every night at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      regression_scope:
        description: 'Regression scope (full, quick)'
        required: false
        default: 'full'

env:
  NODE_VERSION: 18.x
  CACHE_KEY_PREFIX: nscale-assist-v1

jobs:
  prepare-matrix:
    name: Prepare Test Matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Set testing matrix
        id: set-matrix
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.regression_scope }}" == "quick" ]]; then
            # Quick regression - test only Chrome on Ubuntu
            echo "matrix={\"os\":[\"ubuntu-latest\"],\"browser\":[\"chromium\"]}" >> $GITHUB_OUTPUT
          else
            # Full nightly runs - test all OS and browser combinations
            echo "matrix={\"os\":[\"ubuntu-latest\",\"windows-latest\",\"macos-latest\"],\"browser\":[\"chromium\",\"firefox\",\"webkit\"]}" >> $GITHUB_OUTPUT
          fi

  regression-tests:
    name: Regression Tests
    needs: prepare-matrix
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.prepare-matrix.outputs.matrix) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps ${{ matrix.browser }}

      - name: Build application
        run: npm run build

      - name: Start server in background
        run: |
          npm run start &
          npx wait-on http://localhost:3000

      - name: Run E2E regression tests
        run: npm run test:regression -- --project=${{ matrix.browser }}

      - name: Upload test reports
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: regression-results-${{ matrix.os }}-${{ matrix.browser }}
          path: |
            test-results/regression/
            playwright-report/

  performance-benchmark:
    name: Performance Benchmark
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run performance benchmark tests
        run: npm run test:performance:benchmark

      - name: Upload benchmark results
        uses: actions/upload-artifact@v3
        with:
          name: performance-benchmark-results
          path: test-results/performance-benchmark/

      - name: Compare with previous benchmarks
        run: npm run test:performance:compare

      - name: Upload comparison report
        uses: actions/upload-artifact@v3
        with:
          name: performance-comparison-report
          path: test-results/performance-comparison/

  accessibility-compliance:
    name: Accessibility Compliance
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: Build application
        run: npm run build

      - name: Start server in background
        run: |
          npm run start &
          npx wait-on http://localhost:3000

      - name: Run full accessibility scan
        run: npm run test:a11y:full

      - name: Upload accessibility compliance report
        uses: actions/upload-artifact@v3
        with:
          name: accessibility-compliance-report
          path: test-results/accessibility/

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --production

      - name: Run security scan with SonarQube
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  generate-report:
    name: Generate Nightly Report
    needs: [regression-tests, performance-benchmark, accessibility-compliance, security-scan]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: all-artifacts

      - name: Generate comprehensive report
        run: npm run generate-nightly-report

      - name: Upload combined report
        uses: actions/upload-artifact@v3
        with:
          name: nightly-report
          path: nightly-report/

      - name: Archive test results
        run: |
          ARCHIVE_DATE=$(date +%Y-%m-%d)
          mkdir -p test-archives
          cp -r nightly-report test-archives/nightly-report-$ARCHIVE_DATE

      - name: Upload archived report to cloud storage
        uses: google-github-actions/upload-cloud-storage@v1
        with:
          path: test-archives
          destination: nscale-assist-test-archives/nightly
          parent: false
          gzip: true

  notify-failure:
    name: Notify on Nightly Failure
    needs: [regression-tests, performance-benchmark, accessibility-compliance, security-scan]
    if: failure()
    runs-on: ubuntu-latest
    steps:
      - name: Send failure notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_COLOR: danger
          SLACK_MESSAGE: ':red_circle: CRITICAL: Nightly tests failed on ${{ github.repository }}! Check the GitHub Actions tab for details.'
          SLACK_TITLE: Nightly Test Failure Alert
          SLACK_FOOTER: 'GitHub Actions | Nightly Workflow'

  notify-success:
    name: Notify on Nightly Success with Summary
    needs: [regression-tests, performance-benchmark, accessibility-compliance, security-scan]
    if: success()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download report artifact
        uses: actions/download-artifact@v3
        with:
          name: nightly-report
          path: nightly-report

      - name: Send success notification with summary
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_COLOR: good
          SLACK_MESSAGE: |
            :white_check_mark: Nightly tests completed successfully on ${{ github.repository }}!
            
            **Summary:**
            - All regression tests passed across ${{ fromJson(needs.prepare-matrix.outputs.matrix).os | size }} platforms and ${{ fromJson(needs.prepare-matrix.outputs.matrix).browser | size }} browsers
            - Performance benchmarks completed
            - Accessibility compliance checks passed
            - Security scans passed
            
            Full report available at: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          SLACK_TITLE: Nightly Test Success Summary
          SLACK_FOOTER: 'GitHub Actions | Nightly Workflow'