<template>
  <div class="admin-doc-converter">
    <div class="doc-converter-header">
      <h2>{{ $t("admin.docConverter.title") || "Dokumentenkonverter" }}</h2>
      <p class="description">{{ $t("admin.docConverter.description") || "Verwaltung von Dokumentkonvertierungen und Einstellungen" }}</p>
      <div class="admin-card-actions">
        <button
          class="btn btn-primary"
          @click="refreshData"
          :disabled="isLoading"
        >
          <i class="fas fa-sync-alt"></i>
          {{ $t("admin.common.refresh") || "Aktualisieren" }}
        </button>
      </div>
    </div>

    <!-- Statistics Overview -->
    <div class="stats-grid">
      <div class="stat-card">
        <i class="fas fa-file-alt stat-icon"></i>
        <div class="stat-content">
          <div class="stat-value">{{ statistics.totalConversions }}</div>
          <div class="stat-label">
            {{ $t("admin.docConverter.totalDocuments") || "Dokumente insgesamt" }}
          </div>
        </div>
      </div>

      <div class="stat-card">
        <i class="fas fa-check-circle stat-icon success"></i>
        <div class="stat-content">
          <div class="stat-value">{{ Math.floor(statistics.totalConversions * statistics.successRate / 100) }}</div>
          <div class="stat-label">
            {{ $t("admin.docConverter.successfulConversions") || "Erfolgreiche Konvertierungen" }}
          </div>
        </div>
      </div>

      <div class="stat-card">
        <i class="fas fa-exclamation-circle stat-icon error"></i>
        <div class="stat-content">
          <div class="stat-value">{{ Math.floor(statistics.totalConversions * (100 - statistics.successRate) / 100) }}</div>
          <div class="stat-label">
            {{ $t("admin.docConverter.failedConversions") || "Fehlgeschlagene Konvertierungen" }}
          </div>
        </div>
      </div>

      <div class="stat-card">
        <i class="fas fa-clock stat-icon"></i>
        <div class="stat-content">
          <div class="stat-value">{{ statistics.activeConversions }}</div>
          <div class="stat-label">
            {{ $t("admin.docConverter.activeConversions") || "Aktive Konvertierungen" }}
          </div>
        </div>
      </div>
    </div>

    <div v-if="isLoading" class="admin-loading">
      <div class="spinner"></div>
      <p>{{ $t("admin.common.loading") || "Wird geladen..." }}</p>
    </div>

    <div v-else-if="error" class="admin-error">
      <div class="error-icon">
        <i class="fas fa-exclamation-triangle"></i>
      </div>
      <div class="error-content">
        <h3>{{ $t("admin.common.error") || "Fehler" }}</h3>
        <p>{{ error }}</p>
        <button class="btn btn-secondary" @click="refreshData">
          {{ $t("admin.common.retry") || "Erneut versuchen" }}
        </button>
      </div>
    </div>

    <div v-else class="admin-content">
      <!-- Tabs for different converter views -->
      <div class="converter-tabs">
        <button
          v-for="tab in tabs"
          :key="tab.id"
          :class="['tab-button', { active: activeTab === tab.id }]"
          @click="activeTab = tab.id"
        >
          <i :class="tab.icon"></i>
          {{ tab.label }}
        </button>
      </div>

        <!-- Statistics -->
        <div v-if="activeTab === 'statistics'" class="converter-statistics">
          <div class="statistics-grid">
            <div class="statistic-card">
              <div class="statistic-value">
                {{ statistics.totalConversions }}
              </div>
              <div class="statistic-label">
                Gesamtkonvertierungen
              </div>
            </div>
            <div class="statistic-card">
              <div class="statistic-value">
                {{ statistics.conversionsPastWeek }}
              </div>
              <div class="statistic-label">
                Letzte 7 Tage
              </div>
            </div>
            <div class="statistic-card">
              <div class="statistic-value">{{ formattedSuccessRate }}</div>
              <div class="statistic-label">
                Erfolgsrate
              </div>
            </div>
            <div class="statistic-card">
              <div class="statistic-value">
                {{ statistics.activeConversions }}
              </div>
              <div class="statistic-label">
                Aktiv
              </div>
            </div>
          </div>

          <div class="chart-container">
            <h3>Konvertierungen nach Typ</h3>
            <div class="pie-chart">
              <!-- In a production environment, we would implement a real chart using Chart.js -->
              <div
                v-for="(count, format) in statistics.conversionsByFormat"
                :key="format"
                class="format-stat"
              >
                <div class="format-label">{{ format.toUpperCase() }}</div>
                <div class="format-count">{{ count }}</div>
              </div>
            </div>
          </div>

          <div class="chart-container">
            <h3>{{ $t("admin.docConverter.conversionTrend") }}</h3>
            <div class="line-chart">
              <!-- In a production environment, we would implement a real chart using Chart.js -->
              <div class="chart-placeholder">
                <div
                  v-for="(value, index) in statistics.conversionTrend"
                  :key="index"
                  :style="{
                    height: `${(value / Math.max(...statistics.conversionTrend)) * 100}%`,
                  }"
                  class="trend-bar"
                ></div>
              </div>
            </div>
          </div>
        </div>

        <!-- Document Upload Tab -->
        <div v-else-if="activeTab === 'upload'" class="document-upload">
          <div class="upload-section">
            <h3>{{ $t("admin.docConverter.uploadNewDocuments") }}</h3>
            <p class="upload-description">
              {{ $t("admin.docConverter.uploadDescription") }}
            </p>

            <div class="upload-container">
              <BaseFileUpload
                v-model="uploadFiles"
                :multiple="true"
                :accept="supportedFormats"
                :max-size="settings.maxFileSize * 1024 * 1024"
                :error="uploadError"
                :hint="
                  $t('admin.docConverter.supportedFormatsHint', {
                    formats: formattedSupportedFormats,
                  })
                "
                @error="handleUploadError"
                @file-added="handleFileAdded"
              />
            </div>

            <div class="upload-settings" v-if="uploadFiles.length > 0">
              <h4>{{ $t("admin.docConverter.conversionOptions") }}</h4>

              <div class="settings-grid">
                <div class="setting-item">
                  <label for="outputFormat">{{
                    $t("admin.docConverter.outputFormat")
                  }}</label>
                  <select
                    id="outputFormat"
                    v-model="uploadSettings.outputFormat"
                  >
                    <option
                      v-for="format in availableFormats"
                      :key="format"
                      :value="format"
                    >
                      {{ format.toUpperCase() }}
                    </option>
                  </select>
                </div>

                <div class="setting-item checkbox">
                  <input
                    type="checkbox"
                    id="preserveFormatting"
                    v-model="uploadSettings.preserveFormatting"
                  />
                  <label for="preserveFormatting">{{
                    $t("admin.docConverter.preserveFormatting")
                  }}</label>
                </div>

                <div class="setting-item checkbox">
                  <input
                    type="checkbox"
                    id="extractTables"
                    v-model="uploadSettings.extractTables"
                  />
                  <label for="extractTables">{{
                    $t("admin.docConverter.extractTables")
                  }}</label>
                </div>

                <div class="setting-item checkbox">
                  <input
                    type="checkbox"
                    id="extractMetadata"
                    v-model="uploadSettings.extractMetadata"
                  />
                  <label for="extractMetadata">{{
                    $t("admin.docConverter.extractMetadata")
                  }}</label>
                </div>

                <div class="setting-item checkbox">
                  <input
                    type="checkbox"
                    id="enableOCR"
                    v-model="uploadSettings.enableOCR"
                  />
                  <label for="enableOCR">{{
                    $t("admin.docConverter.enableOCR")
                  }}</label>
                </div>

                <div class="setting-item" v-if="uploadSettings.enableOCR">
                  <label for="ocrLanguage">{{
                    $t("admin.docConverter.ocrLanguage")
                  }}</label>
                  <select id="ocrLanguage" v-model="uploadSettings.ocrLanguage">
                    <option
                      v-for="lang in ocrLanguages"
                      :key="lang.code"
                      :value="lang.code"
                    >
                      {{ lang.name }}
                    </option>
                  </select>
                </div>
              </div>

              <div class="upload-actions">
                <button class="btn btn-secondary" @click="clearUpload">
                  {{ $t("admin.common.cancel") }}
                </button>
                <button
                  class="btn btn-primary"
                  :disabled="isUploading || uploadFiles.length === 0"
                  @click="startUpload"
                >
                  <span v-if="isUploading">
                    <i class="icon-spinner spin"></i>
                    {{ $t("admin.docConverter.uploading") }}
                  </span>
                  <span v-else>
                    {{ $t("admin.docConverter.startUpload") }}
                  </span>
                </button>
              </div>
            </div>

            <!-- Upload Progress -->
            <div class="upload-progress" v-if="isUploading">
              <h4>{{ $t("admin.docConverter.uploadProgress") }}</h4>

              <div
                v-for="(progress, index) in uploadProgress"
                :key="index"
                class="progress-item"
              >
                <div class="progress-info">
                  <span class="filename">{{ progress.filename }}</span>
                  <span class="percentage">{{ progress.percentage }}%</span>
                </div>
                <div class="progress-bar">
                  <div
                    class="progress-fill"
                    :style="{ width: `${progress.percentage}%` }"
                  ></div>
                </div>
              </div>

              <div class="upload-status" v-if="uploadStatus">
                <div :class="['status-message', `status-${uploadStatus.type}`]">
                  <i :class="uploadStatus.icon"></i>
                  {{ uploadStatus.message }}
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Recent conversions -->
        <div v-else-if="activeTab === 'recent'" class="recent-conversions">
          <div class="filter-bar">
            <div class="search-input">
              <input
                type="text"
                v-model="searchQuery"
                :placeholder="$t('admin.docConverter.searchDocuments')"
              />
            </div>
            <div class="status-filter">
              <select v-model="statusFilter">
                <option value="all">
                  {{ $t("admin.docConverter.allStatuses") }}
                </option>
                <option value="completed">
                  {{ $t("admin.docConverter.completed") }}
                </option>
                <option value="failed">
                  {{ $t("admin.docConverter.failed") }}
                </option>
                <option value="processing">
                  {{ $t("admin.docConverter.processing") }}
                </option>
              </select>
            </div>
          </div>

          <table class="conversions-table">
            <thead>
              <tr>
                <th>{{ $t("admin.docConverter.filename") }}</th>
                <th>{{ $t("admin.docConverter.format") }}</th>
                <th>{{ $t("admin.docConverter.size") }}</th>
                <th>{{ $t("admin.docConverter.convertedOn") }}</th>
                <th>{{ $t("admin.docConverter.status") }}</th>
                <th>{{ $t("admin.docConverter.actions") }}</th>
              </tr>
            </thead>
            <tbody>
              <tr v-if="filteredConversions.length === 0">
                <td colspan="6" class="no-data">
                  <div class="empty-state">
                    <i class="icon-document"></i>
                    <p>{{ $t("admin.docConverter.noConversions") }}</p>
                  </div>
                </td>
              </tr>
              <tr v-for="doc in filteredConversions" :key="doc.id">
                <td>{{ doc.filename }}</td>
                <td>{{ doc.format.toUpperCase() }}</td>
                <td>{{ formatFileSize(doc.size) }}</td>
                <td>{{ formatDate(doc.convertedAt) }}</td>
                <td>
                  <span :class="['status-badge', `status-${doc.status}`]">
                    {{ $t(`admin.docConverter.status_${doc.status}`) }}
                  </span>
                </td>
                <td class="actions">
                  <button
                    v-if="doc.status === 'completed'"
                    class="action-btn download-btn"
                    @click="downloadDocument(doc.id)"
                    title="Download"
                  >
                    <i class="icon-download"></i>
                  </button>
                  <button
                    v-if="doc.status === 'processing'"
                    class="action-btn cancel-btn"
                    @click="cancelConversion(doc.id)"
                    title="Cancel"
                  >
                    <i class="icon-cancel"></i>
                  </button>
                  <button
                    class="action-btn delete-btn"
                    @click="confirmDelete(doc)"
                    title="Delete"
                  >
                    <i class="icon-delete"></i>
                  </button>
                </td>
              </tr>
            </tbody>
          </table>

          <div class="pagination">
            <button
              :disabled="currentPage === 1"
              @click="currentPage--"
              class="pagination-btn"
            >
              <i class="icon-chevron-left"></i>
            </button>
            <span>{{
              $t("admin.common.page", {
                current: currentPage,
                total: totalPages,
              })
            }}</span>
            <button
              :disabled="currentPage === totalPages"
              @click="currentPage++"
              class="pagination-btn"
            >
              <i class="icon-chevron-right"></i>
            </button>
          </div>
        </div>

        <!-- Settings -->
        <div v-else-if="activeTab === 'settings'" class="converter-settings">
          <div class="settings-form">
            <div class="form-section">
              <h3>{{ $t("admin.docConverter.generalSettings") }}</h3>

              <div class="form-group">
                <label for="maxFileSize">{{
                  $t("admin.docConverter.maxFileSize")
                }}</label>
                <div class="input-with-unit">
                  <input
                    type="number"
                    id="maxFileSize"
                    v-model.number="settings.maxFileSize"
                  />
                  <span class="unit">MB</span>
                </div>
              </div>

              <div class="form-group">
                <label for="defaultFormat">{{
                  $t("admin.docConverter.defaultOutputFormat")
                }}</label>
                <select id="defaultFormat" v-model="settings.defaultFormat">
                  <option
                    v-for="format in availableFormats"
                    :key="format"
                    :value="format"
                  >
                    {{ format.toUpperCase() }}
                  </option>
                </select>
              </div>

              <div class="form-group checkbox">
                <input
                  type="checkbox"
                  id="enableThumbnails"
                  v-model="settings.enableThumbnails"
                />
                <label for="enableThumbnails">{{
                  $t("admin.docConverter.enableThumbnails")
                }}</label>
              </div>
            </div>

            <div class="form-section">
              <h3>{{ $t("admin.docConverter.ocrSettings") }}</h3>

              <div class="form-group checkbox">
                <input
                  type="checkbox"
                  id="enableOCR"
                  v-model="settings.enableOCR"
                />
                <label for="enableOCR">{{
                  $t("admin.docConverter.enableOCR")
                }}</label>
              </div>

              <div class="form-group" v-if="settings.enableOCR">
                <label for="ocrLanguage">{{
                  $t("admin.docConverter.ocrLanguage")
                }}</label>
                <select id="ocrLanguage" v-model="settings.ocrLanguage">
                  <option
                    v-for="lang in ocrLanguages"
                    :key="lang.code"
                    :value="lang.code"
                  >
                    {{ lang.name }}
                  </option>
                </select>
              </div>

              <div class="form-group checkbox" v-if="settings.enableOCR">
                <input
                  type="checkbox"
                  id="enhancedOCR"
                  v-model="settings.enhancedOCR"
                />
                <label for="enhancedOCR">{{
                  $t("admin.docConverter.enhancedOCR")
                }}</label>
              </div>
            </div>

            <div class="form-section">
              <h3>{{ $t("admin.docConverter.storageSettings") }}</h3>

              <div class="form-group">
                <label for="storageLimit">{{
                  $t("admin.docConverter.storageLimit")
                }}</label>
                <div class="input-with-unit">
                  <input
                    type="number"
                    id="storageLimit"
                    v-model.number="settings.storageLimit"
                  />
                  <span class="unit">GB</span>
                </div>
              </div>

              <div class="form-group">
                <label for="retentionPeriod">{{
                  $t("admin.docConverter.retentionPeriod")
                }}</label>
                <div class="input-with-unit">
                  <input
                    type="number"
                    id="retentionPeriod"
                    v-model.number="settings.retentionPeriod"
                  />
                  <span class="unit">{{ $t("admin.docConverter.days") }}</span>
                </div>
              </div>
            </div>

            <div class="form-actions">
              <button class="btn btn-primary" @click="saveSettings">
                {{ $t("admin.common.save") }}
              </button>
              <button class="btn btn-secondary" @click="resetSettings">
                {{ $t("admin.common.reset") }}
              </button>
            </div>
          </div>
        </div>

        <!-- Queue -->
        <div v-else-if="activeTab === 'queue'" class="conversion-queue">
          <div class="queue-summary">
            <div class="queue-stat">
              <div class="queue-stat-value">{{ queueStats.activeJobs }}</div>
              <div class="queue-stat-label">
                {{ $t("admin.docConverter.activeJobs") }}
              </div>
            </div>
            <div class="queue-stat">
              <div class="queue-stat-value">{{ queueStats.waitingJobs }}</div>
              <div class="queue-stat-label">
                {{ $t("admin.docConverter.waitingJobs") }}
              </div>
            </div>
            <div class="queue-stat">
              <div class="queue-stat-value">{{ formattedAverageTime }}</div>
              <div class="queue-stat-label">
                {{ $t("admin.docConverter.avgConversionTime") }}
              </div>
            </div>
          </div>

          <h3>{{ $t("admin.docConverter.currentQueue") }}</h3>
          <table class="queue-table">
            <thead>
              <tr>
                <th>{{ $t("admin.docConverter.position") }}</th>
                <th>{{ $t("admin.docConverter.filename") }}</th>
                <th>{{ $t("admin.docConverter.user") }}</th>
                <th>{{ $t("admin.docConverter.submittedAt") }}</th>
                <th>{{ $t("admin.docConverter.status") }}</th>
                <th>{{ $t("admin.docConverter.progress") }}</th>
                <th>{{ $t("admin.docConverter.actions") }}</th>
              </tr>
            </thead>
            <tbody>
              <tr v-if="queue.length === 0">
                <td colspan="7" class="no-data">
                  <div class="empty-state">
                    <i class="icon-queue"></i>
                    <p>{{ $t("admin.docConverter.queueEmpty") }}</p>
                  </div>
                </td>
              </tr>
              <tr v-for="(job, index) in queue" :key="job.id">
                <td>{{ index + 1 }}</td>
                <td>{{ job.filename }}</td>
                <td>{{ job.userId }}</td>
                <td>{{ formatDate(job.submittedAt) }}</td>
                <td>
                  <span :class="['status-badge', `status-${job.status}`]">
                    {{ $t(`admin.docConverter.status_${job.status}`) }}
                  </span>
                </td>
                <td>
                  <div class="progress-bar" v-if="job.status === 'processing'">
                    <div
                      class="progress-fill"
                      :style="{ width: `${job.progress}%` }"
                    ></div>
                    <span class="progress-text">{{ job.progress }}%</span>
                  </div>
                  <span v-else>-</span>
                </td>
                <td class="actions">
                  <button
                    class="action-btn priority-btn"
                    @click="prioritizeJob(job.id)"
                    title="Prioritize"
                    v-if="job.status === 'waiting'"
                  >
                    <i class="icon-priority-high"></i>
                  </button>
                  <button
                    class="action-btn cancel-btn"
                    @click="cancelJob(job.id)"
                    title="Cancel"
                  >
                    <i class="icon-cancel"></i>
                  </button>
                </td>
              </tr>
            </tbody>
          </table>

          <div class="queue-actions">
            <button
              class="btn btn-secondary"
              @click="pauseQueue"
              v-if="!queuePaused"
            >
              {{ $t("admin.docConverter.pauseQueue") }}
            </button>
            <button class="btn btn-primary" @click="resumeQueue" v-else>
              {{ $t("admin.docConverter.resumeQueue") }}
            </button>
            <button class="btn btn-danger" @click="confirmClearQueue">
              {{ $t("admin.docConverter.clearQueue") }}
            </button>
          </div>
        </div>
      </div>
    </div>

    <!-- Confirmation Dialog -->
    <div
      v-if="showConfirmDialog"
      class="confirm-dialog-backdrop"
      @click="cancelDialog"
    >
      <div class="confirm-dialog" @click.stop>
        <h3>{{ confirmDialogTitle }}</h3>
        <p>{{ confirmDialogMessage }}</p>
        <div class="dialog-actions">
          <button class="btn btn-secondary" @click="cancelDialog">
            {{ $t("admin.common.cancel") }}
          </button>
          <button class="btn btn-danger" @click="confirmAction">
            {{ $t("admin.common.confirm") }}
          </button>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup lang="ts">
import { ref, computed, onMounted, onUnmounted } from "vue";
import { useDocumentConverterStore } from "@/stores/documentConverter";
import { useI18n } from "vue-i18n";
import { useToast } from "@/composables/useToast";
import BaseFileUpload from "@/components/base/BaseFileUpload.vue";

const { t, locale } = useI18n({ useScope: 'global' });
const documentConverterStore = useDocumentConverterStore();
const toast = useToast();

// Logging to check i18n initialization
console.log(`[AdminDocConverter] i18n initialized with locale: ${locale.value}`);
console.log(`[AdminDocConverter] Testing key 'admin.docConverter.title': ${t('admin.docConverter.title')}`);
console.log(`[AdminDocConverter] Testing key 'admin.common.refresh': ${t('admin.common.refresh')}`);

// Data
const isLoading = ref(false);
const error = ref<string | null>(null);
const activeTab = ref("statistics");
const searchQuery = ref("");
const statusFilter = ref("all");
const currentPage = ref(1);
const itemsPerPage = 10;
const queuePaused = ref(false);

// Upload functionality
const uploadFiles = ref<File[]>([]);
const uploadError = ref<string>("");
const isUploading = ref(false);
const uploadProgress = ref<{ filename: string; percentage: number }[]>([]);
const uploadStatus = ref<{
  type: "info" | "success" | "error";
  message: string;
  icon: string;
} | null>(null);
const supportedFormats =
  ".pdf,.docx,.doc,.xlsx,.xls,.pptx,.ppt,.txt,.csv,.html,.xml,.json";
const formattedSupportedFormats = computed(() => {
  return supportedFormats
    .split(",")
    .map((f) => f.replace(".", "").toUpperCase())
    .join(", ");
});

const uploadSettings = ref({
  outputFormat: "pdf",
  preserveFormatting: true,
  extractTables: true,
  extractMetadata: true,
  enableOCR: false,
  ocrLanguage: "en",
});

// Confirmation dialog
const showConfirmDialog = ref(false);
const confirmDialogTitle = ref("");
const confirmDialogMessage = ref("");
const confirmAction = ref(() => {});
const documentToDelete = ref<any>(null);

// Tabs
const tabs = [
  {
    id: "statistics",
    label: "Statistiken",
    icon: "icon-chart",
  },
  {
    id: "upload",
    label: "Dokumente hochladen",
    icon: "icon-upload",
  },
  {
    id: "recent",
    label: "Letzte Konvertierungen",
    icon: "icon-history",
  },
  {
    id: "queue",
    label: "Konvertierungswarteschlange",
    icon: "icon-queue",
  },
  {
    id: "settings",
    label: "Einstellungen",
    icon: "icon-settings",
  },
];

// Data models - These would be populated from API calls in production
const statistics = ref({
  totalConversions: 0,
  conversionsPastWeek: 0,
  successRate: 0,
  activeConversions: 0,
  conversionsByFormat: {} as Record<string, number>,
  conversionTrend: [0, 0, 0, 0, 0, 0, 0], // Last 7 days
});

const recentConversions = ref<any[]>([]);
const queue = ref<any[]>([]);
const queueStats = ref({
  activeJobs: 0,
  waitingJobs: 0,
  averageTime: 0, // in seconds
});

const settings = ref({
  maxFileSize: 100,
  defaultFormat: "pdf",
  enableThumbnails: true,
  enableOCR: false,
  ocrLanguage: "en",
  enhancedOCR: false,
  storageLimit: 10,
  retentionPeriod: 30,
});

const availableFormats = ["pdf", "txt", "html", "docx"];
const ocrLanguages = [
  { code: "en", name: "English" },
  { code: "de", name: "German" },
  { code: "fr", name: "French" },
  { code: "es", name: "Spanish" },
  { code: "it", name: "Italian" },
];

// Original settings for reset
const originalSettings = { ...settings.value };

// Computed
const formattedSuccessRate = computed(() => {
  return `${statistics.value.successRate}%`;
});

const formattedAverageTime = computed(() => {
  const seconds = queueStats.value.averageTime;
  if (seconds < 60) {
    return `${seconds}s`;
  }
  return `${Math.floor(seconds / 60)}m ${seconds % 60}s`;
});

const filteredConversions = computed(() => {
  let result = [...recentConversions.value];

  // Apply search filter
  if (searchQuery.value) {
    const query = searchQuery.value.toLowerCase();
    result = result.filter((doc) => doc.filename.toLowerCase().includes(query));
  }

  // Apply status filter
  if (statusFilter.value !== "all") {
    result = result.filter((doc) => doc.status === statusFilter.value);
  }

  // Pagination
  const startIndex = (currentPage.value - 1) * itemsPerPage;
  return result.slice(startIndex, startIndex + itemsPerPage);
});

const totalPages = computed(() => {
  if (recentConversions.value.length === 0) return 1;
  return Math.ceil(recentConversions.value.length / itemsPerPage);
});

// Methods
const refreshData = async () => {
  isLoading.value = true;
  error.value = null;

  try {
    await loadStatistics();
    await loadRecentConversions();
    await loadQueue();
    await loadSettings();
  } catch (err: any) {
    error.value = err.message || t("admin.common.unknownError");
    console.error("Failed to load document converter data:", err);
  } finally {
    isLoading.value = false;
  }
};

const loadStatistics = async () => {
  try {
    // Mock API call, replace with actual API
    const response = await documentConverterStore.getDocumentStatistics();
    statistics.value = response;
  } catch (err: any) {
    console.error("Failed to load statistics:", err);
    throw new Error(t("admin.docConverter.failedToLoadStatistics"));
  }
};

const loadRecentConversions = async () => {
  try {
    // Mock API call, replace with actual API
    const response = await documentConverterStore.getRecentConversions();
    recentConversions.value = response;
  } catch (err: any) {
    console.error("Failed to load recent conversions:", err);
    throw new Error(t("admin.docConverter.failedToLoadConversions"));
  }
};

const loadQueue = async () => {
  try {
    // Mock API call, replace with actual API
    const response = await documentConverterStore.getConversionQueue();
    queue.value = response.queue;
    queueStats.value = response.stats;
    queuePaused.value = response.paused;
  } catch (err: any) {
    console.error("Failed to load queue:", err);
    throw new Error(t("admin.docConverter.failedToLoadQueue"));
  }
};

const loadSettings = async () => {
  try {
    // Mock API call, replace with actual API
    const response = await documentConverterStore.getConverterSettings();
    settings.value = response;
    originalSettings.value = { ...response };
  } catch (err: any) {
    console.error("Failed to load settings:", err);
    throw new Error(t("admin.docConverter.failedToLoadSettings"));
  }
};

const downloadDocument = async (id: string) => {
  try {
    await documentConverterStore.downloadDocument(id);
    // In a production environment, this would trigger a real file download
    // and show a success notification
    console.log(`Document ${id} downloading...`);
  } catch (err: any) {
    console.error("Failed to download document:", err);
    // In a production environment, we would show an error notification
    alert(`Failed to download document: ${err.message || "Unknown error"}`);
  }
};

const cancelConversion = async (id: string) => {
  try {
    await documentConverterStore.cancelConversion(id);
    await refreshData();

    // In a production environment, we would show a success notification
    console.log(`Conversion ${id} cancelled successfully`);
  } catch (err: any) {
    console.error("Failed to cancel conversion:", err);
    // In a production environment, we would show an error notification
    alert(`Failed to cancel conversion: ${err.message || "Unknown error"}`);
  }
};

const confirmDelete = (doc: any) => {
  documentToDelete.value = doc;
  confirmDialogTitle.value = t("admin.docConverter.confirmDelete");
  confirmDialogMessage.value = t("admin.docConverter.confirmDeleteMessage", {
    filename: doc.filename,
  });
  confirmAction.value = deleteDocument;
  showConfirmDialog.value = true;
};

const deleteDocument = async () => {
  if (!documentToDelete.value) return;

  try {
    await documentConverterStore.deleteDocument(documentToDelete.value.id);
    showConfirmDialog.value = false;
    await refreshData();

    // In a production environment, we would show a success notification
    console.log(
      `Document ${documentToDelete.value.filename} deleted successfully`,
    );
  } catch (err: any) {
    console.error("Failed to delete document:", err);
    // In a production environment, we would show an error notification
    alert(`Failed to delete document: ${err.message || "Unknown error"}`);
  }
};

const saveSettings = async () => {
  try {
    await documentConverterStore.updateConverterSettings(settings.value);
    originalSettings.value = { ...settings.value };

    // In a production environment, we would show a success notification
    // For now, we'll log to console
    console.log("Settings saved successfully");

    // Refresh data to show updated settings
    await loadSettings();
  } catch (err: any) {
    console.error("Failed to save settings:", err);
    // In a production environment, we would show an error notification
    alert(`Failed to save settings: ${err.message || "Unknown error"}`);
  }
};

const resetSettings = () => {
  settings.value = { ...originalSettings.value };
};

const prioritizeJob = async (id: string) => {
  try {
    await documentConverterStore.prioritizeJob(id);
    await loadQueue();

    // In a production environment, we would show a success notification
    console.log(`Job ${id} prioritized successfully`);
  } catch (err: any) {
    console.error("Failed to prioritize job:", err);
    // In a production environment, we would show an error notification
    alert(`Failed to prioritize job: ${err.message || "Unknown error"}`);
  }
};

const cancelJob = async (id: string) => {
  try {
    await documentConverterStore.cancelJob(id);
    await loadQueue();

    // In a production environment, we would show a success notification
    console.log(`Job ${id} cancelled successfully`);
  } catch (err: any) {
    console.error("Failed to cancel job:", err);
    // In a production environment, we would show an error notification
    alert(`Failed to cancel job: ${err.message || "Unknown error"}`);
  }
};

const pauseQueue = async () => {
  try {
    await documentConverterStore.pauseQueue();
    queuePaused.value = true;

    // In a production environment, we would show a success notification
    console.log("Queue paused successfully");
  } catch (err: any) {
    console.error("Failed to pause queue:", err);
    // In a production environment, we would show an error notification
    alert(`Failed to pause queue: ${err.message || "Unknown error"}`);
  }
};

const resumeQueue = async () => {
  try {
    await documentConverterStore.resumeQueue();
    queuePaused.value = false;

    // In a production environment, we would show a success notification
    console.log("Queue resumed successfully");
  } catch (err: any) {
    console.error("Failed to resume queue:", err);
    // In a production environment, we would show an error notification
    alert(`Failed to resume queue: ${err.message || "Unknown error"}`);
  }
};

const confirmClearQueue = () => {
  confirmDialogTitle.value = t("admin.docConverter.confirmClearQueue");
  confirmDialogMessage.value = t("admin.docConverter.confirmClearQueueMessage");
  confirmAction.value = clearQueue;
  showConfirmDialog.value = true;
};

const clearQueue = async () => {
  try {
    await documentConverterStore.clearQueue();
    showConfirmDialog.value = false;
    await loadQueue();

    // In a production environment, we would show a success notification
    console.log("Queue cleared successfully");
  } catch (err: any) {
    console.error("Failed to clear queue:", err);
    // In a production environment, we would show an error notification
    alert(`Failed to clear queue: ${err.message || "Unknown error"}`);
  }
};

const cancelDialog = () => {
  showConfirmDialog.value = false;
};

// Helper functions
// Utility function to format file sizes in human-readable format
const formatFileSize = (bytes: number): string => {
  if (bytes < 1024) return `${bytes} B`;
  if (bytes < 1024 * 1024) return `${(bytes / 1024).toFixed(1)} KB`;
  if (bytes < 1024 * 1024 * 1024)
    return `${(bytes / (1024 * 1024)).toFixed(1)} MB`;
  return `${(bytes / (1024 * 1024 * 1024)).toFixed(2)} GB`;
};

// Format dates in user-friendly format with locale support
const formatDate = (timestamp: number): string => {
  return new Date(timestamp).toLocaleString(undefined, {
    year: "numeric",
    month: "short",
    day: "numeric",
    hour: "2-digit",
    minute: "2-digit",
  });
};

// Lifecycle hooks
onMounted(() => {
  // Initialize all data when the component is mounted
  // In a production environment, this would make API calls to fetch real data
  const initializeData = async () => {
    try {
      await refreshData();
    } catch (err) {
      console.error("[AdminDocConverter] Error initializing data:", err);
      error.value = "Fehler beim Laden der Dokumentenkonverter-Daten";
    }
  };

  initializeData();
});

// Upload methods
const handleUploadError = (errorMessage: string) => {
  uploadError.value = errorMessage;
};

const handleFileAdded = (file: File) => {
  uploadError.value = "";

  // Initialize progress for this file
  uploadProgress.value.push({
    filename: file.name,
    percentage: 0,
  });
};

const clearUpload = () => {
  uploadFiles.value = [];
  uploadError.value = "";
  uploadProgress.value = [];
  uploadStatus.value = null;
};

// Handle the document upload process with progress tracking and real-time updates
const startUpload = async () => {
  if (uploadFiles.value.length === 0) return;

  isUploading.value = true;
  uploadError.value = "";
  uploadStatus.value = {
    type: "info",
    message: t("admin.docConverter.startingUpload"),
    icon: "icon-info",
  };

  // Reset progress for all files
  uploadProgress.value = uploadFiles.value.map((file) => ({
    filename: file.name,
    percentage: 0,
  }));

  try {
    // Process each file sequentially
    for (let i = 0; i < uploadFiles.value.length; i++) {
      const file = uploadFiles.value[i];

      // Update status
      uploadStatus.value = {
        type: "info",
        message: t("admin.docConverter.processingFile", {
          filename: file.name,
          current: i + 1,
          total: uploadFiles.value.length,
        }),
        icon: "icon-process",
      };

      // Simulate upload progress
      const progressInterval = setInterval(() => {
        if (
          uploadProgress.value[i] &&
          uploadProgress.value[i].percentage < 90
        ) {
          uploadProgress.value[i].percentage +=
            Math.floor(Math.random() * 10) + 1;

          // Cap at 90% until actual processing is done
          if (uploadProgress.value[i].percentage > 90) {
            uploadProgress.value[i].percentage = 90;
          }
        }
      }, 500);

      try {
        // Upload and convert the document
        const documentId = await documentConverterStore.uploadDocument(file);
        await documentConverterStore.convertDocument(documentId, {
          preserveFormatting: uploadSettings.value.preserveFormatting,
          extractMetadata: uploadSettings.value.extractMetadata,
          extractTables: uploadSettings.value.extractTables,
          ocrEnabled: uploadSettings.value.enableOCR,
          ocrLanguage: uploadSettings.value.ocrLanguage,
        });

        // Set progress to 100%
        clearInterval(progressInterval);
        if (uploadProgress.value[i]) {
          uploadProgress.value[i].percentage = 100;
        }
      } catch (err: any) {
        clearInterval(progressInterval);
        uploadStatus.value = {
          type: "error",
          message: t("admin.docConverter.errorProcessingFile", {
            filename: file.name,
            error: err.message,
          }),
          icon: "icon-error",
        };
        console.error("Error processing file:", err);
      }
    }

    // All files processed successfully
    if (!uploadStatus.value?.type || uploadStatus.value.type !== "error") {
      uploadStatus.value = {
        type: "success",
        message: t("admin.docConverter.allFilesProcessed"),
        icon: "icon-check",
      };
    }

    // Refresh data to show new documents
    await refreshData();

    // After a successful upload, switch to the recent tab after 2 seconds
    setTimeout(() => {
      if (isUploading.value) {
        activeTab.value = "recent";
        clearUpload();
        isUploading.value = false;
      }
    }, 2000);
  } catch (err: any) {
    uploadStatus.value = {
      type: "error",
      message: t("admin.docConverter.uploadFailed", { error: err.message }),
      icon: "icon-error",
    };
    console.error("Upload failed:", err);
  } finally {
    // Just in case we have an early exit
    isUploading.value = false;
  }
};

onUnmounted(() => {
  // Cleanup if needed
});
</script>

<style scoped lang="scss">
.admin-doc-converter {
  width: 100%;
  max-width: 1200px;
  margin: 0 auto;

  .doc-converter-header {
    margin-bottom: 1.5rem;
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    flex-wrap: wrap;

    h2 {
      margin: 0 0 0.5rem 0;
      font-size: 1.5rem;
      font-weight: 600;
      color: var(--text-primary, #333);
      flex: 1 0 100%;
    }

    .description {
      color: var(--text-secondary, #666);
      margin: 0 0 1rem 0;
      font-size: 0.95rem;
      flex: 1 0 100%;
    }

    .admin-card-actions {
      margin-left: auto;
    }
  }

  .stats-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 1.5rem;
    margin-bottom: 2rem;
  }

  .stat-card {
    background: var(--bg-secondary, #ffffff);
    border-radius: 8px;
    padding: 1.5rem;
    box-shadow: 0 2px 4px var(--shadow-color, rgba(0, 0, 0, 0.1));
    display: flex;
    align-items: center;
    gap: 1rem;

    .stat-icon {
      font-size: 2rem;
      color: var(--primary-color, #00a550);

      &.success {
        color: var(--color-success, #22c55e);
      }

      &.error {
        color: var(--color-danger, #ef4444);
      }
    }

    .stat-content {
      flex: 1;

      .stat-value {
        font-size: 1.8rem;
        font-weight: 600;
        color: var(--text-primary, #333);
      }

      .stat-label {
        color: var(--text-secondary, #666);
        font-size: 0.9rem;
      }
    }
  }

  .admin-loading,
  .admin-error {
    padding: 40px;
    text-align: center;
    background: var(--bg-secondary, #ffffff);
    border-radius: 8px;
    box-shadow: 0 2px 4px var(--shadow-color, rgba(0, 0, 0, 0.1));
    margin-bottom: 1.5rem;

    .spinner {
      width: 40px;
      height: 40px;
      border: 4px solid rgba(0, 0, 0, 0.1);
      border-radius: 50%;
      border-top-color: var(--primary-color, #00a550);
      animation: spin 1s linear infinite;
      margin: 0 auto 20px;
    }

    @keyframes spin {
      to {
        transform: rotate(360deg);
      }
    }
  }

  .admin-error {
    .error-icon {
      font-size: 40px;
      color: var(--error-color, #ef4444);
      margin-bottom: 15px;
    }

    .error-content {
      h3 {
        margin-top: 0;
        font-size: 18px;
      }
    }
  }

  .admin-content {
    background: var(--bg-secondary, #ffffff);
    border-radius: 8px;
    padding: 20px;
    box-shadow: 0 2px 4px var(--shadow-color, rgba(0, 0, 0, 0.1));
  }

  .converter-tabs {
    display: flex;
    margin-bottom: 20px;
    border-bottom: 1px solid var(--border-color);

    .tab-button {
      padding: 12px 20px;
      border: none;
      background: none;
      font-size: 14px;
      cursor: pointer;
      position: relative;

      &.active {
        color: var(--primary-color);
        font-weight: 600;

        &:after {
          content: "";
          position: absolute;
          bottom: -1px;
          left: 0;
          width: 100%;
          height: 2px;
          background-color: var(--primary-color);
        }
      }

      i {
        margin-right: 8px;
      }
    }
  }

  // Statistics styles
  .converter-statistics {
    .statistics-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
      gap: 20px;
      margin-bottom: 30px;

      .statistic-card {
        background: var(--card-bg-light);
        padding: 20px;
        border-radius: 6px;
        text-align: center;

        .statistic-value {
          font-size: 28px;
          font-weight: 700;
          margin-bottom: 8px;
        }

        .statistic-label {
          font-size: 14px;
          color: var(--text-secondary);
        }
      }
    }

    .chart-container {
      margin-bottom: 30px;

      h3 {
        font-size: 16px;
        margin-bottom: 15px;
      }

      .pie-chart {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;

        .format-stat {
          background: var(--card-bg-light);
          padding: 10px 15px;
          border-radius: 6px;
          display: flex;
          align-items: center;

          .format-label {
            font-weight: 600;
            margin-right: 10px;
          }

          .format-count {
            background: var(--primary-color);
            color: white;
            padding: 2px 8px;
            border-radius: 12px;
            font-size: 12px;
          }
        }
      }

      .line-chart {
        height: 200px;

        .chart-placeholder {
          display: flex;
          justify-content: space-between;
          align-items: flex-end;
          height: 100%;

          .trend-bar {
            width: 12%;
            background: var(--primary-color);
            border-radius: 3px 3px 0 0;
            min-height: 1px;
          }
        }
      }
    }
  }

  // Recent conversions styles
  .recent-conversions {
    .filter-bar {
      display: flex;
      margin-bottom: 15px;

      .search-input {
        flex: 1;
        margin-right: 15px;

        input {
          width: 100%;
          padding: 8px 12px;
          border: 1px solid var(--border-color);
          border-radius: 4px;
        }
      }

      .status-filter {
        width: 150px;

        select {
          width: 100%;
          padding: 8px 12px;
          border: 1px solid var(--border-color);
          border-radius: 4px;
        }
      }
    }

    .conversions-table {
      width: 100%;
      border-collapse: collapse;
      margin-bottom: 20px;

      th,
      td {
        padding: 12px 15px;
        text-align: left;
        border-bottom: 1px solid var(--border-color);
      }

      th {
        background-color: var(--table-header-bg);
        font-weight: 600;
      }

      .no-data {
        text-align: center;
        color: var(--text-secondary);
        padding: 30px 0;

        .empty-state {
          display: flex;
          flex-direction: column;
          align-items: center;
          justify-content: center;

          i {
            font-size: 30px;
            margin-bottom: 10px;
            opacity: 0.5;
          }

          p {
            margin: 0;
            font-size: 14px;
          }
        }
      }

      .status-badge {
        display: inline-block;
        padding: 4px 8px;
        border-radius: 4px;
        font-size: 12px;

        &.status-completed {
          background-color: var(--success-bg);
          color: var(--success-color);
        }

        &.status-failed {
          background-color: var(--error-bg);
          color: var(--error-color);
        }

        &.status-processing {
          background-color: var(--warning-bg);
          color: var(--warning-color);
        }
      }

      .actions {
        .action-btn {
          border: none;
          background: none;
          padding: 4px 8px;
          cursor: pointer;

          &.download-btn {
            color: var(--primary-color);
          }

          &.cancel-btn {
            color: var(--warning-color);
          }

          &.delete-btn {
            color: var(--error-color);
          }
        }
      }
    }

    .pagination {
      display: flex;
      justify-content: center;
      align-items: center;

      .pagination-btn {
        border: 1px solid var(--border-color);
        background: none;
        padding: 5px 10px;
        border-radius: 4px;
        cursor: pointer;

        &:disabled {
          opacity: 0.5;
          cursor: not-allowed;
        }
      }

      span {
        margin: 0 15px;
      }
    }
  }

  // Settings styles
  .converter-settings {
    .settings-form {
      max-width: 600px;
      margin: 0 auto;

      .form-section {
        margin-bottom: 30px;

        h3 {
          font-size: 16px;
          margin-bottom: 15px;
          padding-bottom: 8px;
          border-bottom: 1px solid var(--border-color);
        }
      }

      .form-group {
        margin-bottom: 15px;

        label {
          display: block;
          margin-bottom: 8px;
          font-weight: 500;
        }

        input[type="text"],
        input[type="number"],
        select {
          width: 100%;
          padding: 8px 12px;
          border: 1px solid var(--border-color);
          border-radius: 4px;
        }

        &.checkbox {
          display: flex;
          align-items: center;

          input[type="checkbox"] {
            margin-right: 10px;
          }

          label {
            margin-bottom: 0;
          }
        }

        .input-with-unit {
          display: flex;
          align-items: center;

          input {
            flex: 1;
            border-right: none;
            border-top-right-radius: 0;
            border-bottom-right-radius: 0;
          }

          .unit {
            padding: 8px 12px;
            background: var(--input-bg);
            border: 1px solid var(--border-color);
            border-left: none;
            border-top-right-radius: 4px;
            border-bottom-right-radius: 4px;
          }
        }
      }

      .form-actions {
        display: flex;
        justify-content: flex-end;
        gap: 10px;
        margin-top: 20px;
      }
    }
  }

  // Queue styles
  .conversion-queue {
    .queue-summary {
      display: flex;
      justify-content: space-around;
      margin-bottom: 30px;

      .queue-stat {
        text-align: center;

        .queue-stat-value {
          font-size: 28px;
          font-weight: 700;
          margin-bottom: 8px;
        }

        .queue-stat-label {
          font-size: 14px;
          color: var(--text-secondary);
        }
      }
    }

    h3 {
      margin-bottom: 15px;
    }

    .queue-table {
      width: 100%;
      border-collapse: collapse;
      margin-bottom: 20px;

      th,
      td {
        padding: 12px 15px;
        text-align: left;
        border-bottom: 1px solid var(--border-color);
      }

      th {
        background-color: var(--table-header-bg);
        font-weight: 600;
      }

      .no-data {
        text-align: center;
        color: var(--text-secondary);
        padding: 30px 0;

        .empty-state {
          display: flex;
          flex-direction: column;
          align-items: center;
          justify-content: center;

          i {
            font-size: 30px;
            margin-bottom: 10px;
            opacity: 0.5;
          }

          p {
            margin: 0;
            font-size: 14px;
          }
        }
      }

      .progress-bar {
        height: 8px;
        background-color: var(--progress-bg);
        border-radius: 4px;
        position: relative;

        .progress-fill {
          height: 100%;
          background-color: var(--primary-color);
          border-radius: 4px;
        }

        .progress-text {
          position: absolute;
          right: -30px;
          font-size: 12px;
        }
      }

      .actions {
        .action-btn {
          border: none;
          background: none;
          padding: 4px 8px;
          cursor: pointer;

          &.priority-btn {
            color: var(--primary-color);
          }

          &.cancel-btn {
            color: var(--warning-color);
          }
        }
      }
    }

    .queue-actions {
      display: flex;
      justify-content: flex-end;
      gap: 10px;
    }
  }

  // Buttons
  .btn {
    padding: 8px 16px;
    border-radius: 4px;
    border: none;
    font-size: 14px;
    cursor: pointer;

    &.btn-primary {
      background-color: var(--primary-color);
      color: white;
    }

    &.btn-secondary {
      background-color: var(--secondary-color);
      color: white;
    }

    &.btn-danger {
      background-color: var(--error-color);
      color: white;
    }

    &:disabled {
      opacity: 0.7;
      cursor: not-allowed;
    }
  }

  // Confirmation dialog
  .confirm-dialog-backdrop {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 1000;

    .confirm-dialog {
      background-color: var(--card-bg);
      border-radius: 8px;
      padding: 20px;
      width: 100%;
      max-width: 400px;

      h3 {
        margin-top: 0;
      }

      .dialog-actions {
        display: flex;
        justify-content: flex-end;
        gap: 10px;
        margin-top: 20px;
      }
    }
  }
}

// Responsive styles
@media (max-width: 768px) {
  .admin-doc-converter {
    .converter-tabs {
      flex-wrap: wrap;

      .tab-button {
        flex-grow: 1;
        text-align: center;
        padding: 10px;

        i {
          display: block;
          margin: 0 auto 5px;
        }
      }
    }

    .statistics-grid {
      grid-template-columns: 1fr 1fr !important;
    }

    .queue-summary {
      flex-direction: column;
      gap: 20px;
    }

    .conversions-table,
    .queue-table {
      th:nth-child(3),
      td:nth-child(3) {
        display: none;
      }
    }
  }
}

// Document upload styles
.document-upload {
  .upload-section {
    margin-bottom: 30px;

    h3 {
      font-size: 18px;
      margin-bottom: 15px;
    }

    .upload-description {
      margin-bottom: 20px;
      color: var(--text-secondary, #909399);
    }

    .upload-container {
      margin-bottom: 30px;
    }

    .upload-settings {
      background-color: var(--card-bg-light, #f9fafb);
      border-radius: 8px;
      padding: 20px;
      margin-bottom: 30px;

      h4 {
        font-size: 16px;
        margin-bottom: 20px;
      }

      .settings-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
        gap: 20px;
        margin-bottom: 25px;

        .setting-item {
          margin-bottom: 15px;

          label {
            display: block;
            margin-bottom: 8px;
            font-weight: 500;
          }

          select {
            width: 100%;
            padding: 8px 12px;
            border: 1px solid var(--border-color, #dcdfe6);
            border-radius: 4px;
          }

          &.checkbox {
            display: flex;
            align-items: center;

            input[type="checkbox"] {
              margin-right: 10px;
            }

            label {
              margin-bottom: 0;
            }
          }
        }
      }

      .upload-actions {
        display: flex;
        justify-content: flex-end;
        gap: 10px;
      }
    }

    .upload-progress {
      margin-top: 30px;

      h4 {
        font-size: 16px;
        margin-bottom: 15px;
      }

      .progress-item {
        margin-bottom: 15px;

        .progress-info {
          display: flex;
          justify-content: space-between;
          margin-bottom: 5px;

          .filename {
            font-weight: 500;
          }

          .percentage {
            color: var(--primary-color, #00a550);
            font-weight: 500;
          }
        }

        .progress-bar {
          height: 8px;
          background-color: var(--progress-bg, #e6e6e6);
          border-radius: 4px;
          overflow: hidden;

          .progress-fill {
            height: 100%;
            background-color: var(--primary-color, #00a550);
            border-radius: 4px;
            transition: width 0.3s ease;
          }
        }
      }

      .upload-status {
        margin-top: 20px;
        padding: 15px;
        border-radius: 6px;

        .status-message {
          display: flex;
          align-items: center;

          i {
            margin-right: 10px;
          }

          &.status-info {
            background-color: var(--info-bg, #ecf5ff);
            color: var(--info-color, #409eff);
          }

          &.status-success {
            background-color: var(--success-bg, #f0f9eb);
            color: var(--success-color, #67c23a);
          }

          &.status-error {
            background-color: var(--error-bg, #fef0f0);
            color: var(--error-color, #f56c6c);
          }
        }
      }
    }
  }
}

@keyframes spin {
  to {
    transform: rotate(360deg);
  }
}

.icon-spinner {
  display: inline-block;
  animation: spin 1s linear infinite;
  margin-right: 8px;
}

@media (max-width: 480px) {
  .admin-doc-converter {
    .statistics-grid {
      grid-template-columns: 1fr !important;
    }

    .conversions-table,
    .queue-table {
      th:nth-child(4),
      td:nth-child(4) {
        display: none;
      }
    }

    .document-upload {
      .settings-grid {
        grid-template-columns: 1fr !important;
      }

      .upload-actions {
        flex-direction: column;

        button {
          width: 100%;
        }
      }
    }
  }
}
</style>
