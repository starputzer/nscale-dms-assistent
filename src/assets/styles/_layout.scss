// _layout.scss
// Layout system for nscale-assist app
// Contains grid, flexbox, spacing and positioning utilities

@use 'variables' as *;

// Container
.container {
  width: 100%;
  margin-right: auto;
  margin-left: auto;
  padding-right: $spacing-4;
  padding-left: $spacing-4;
  
  @media (min-width: $breakpoint-sm) {
    max-width: $container-max-width-sm;
  }
  
  @media (min-width: $breakpoint-md) {
    max-width: $container-max-width-md;
  }
  
  @media (min-width: $breakpoint-lg) {
    max-width: $container-max-width-lg;
  }
  
  @media (min-width: $breakpoint-xl) {
    max-width: $container-max-width-xl;
  }
  
  @media (min-width: $breakpoint-2xl) {
    max-width: $container-max-width-2xl;
  }
  
  &-fluid {
    max-width: 100%;
  }
  
  &-sm {
    max-width: $container-max-width-sm;
  }
  
  &-md {
    max-width: $container-max-width-md;
  }
  
  &-lg {
    max-width: $container-max-width-lg;
  }
}

// Grid System
.row {
  display: flex;
  flex-wrap: wrap;
  margin-right: -($grid-gutter-width / 2);
  margin-left: -($grid-gutter-width / 2);
  
  &.no-gutters {
    margin-right: 0;
    margin-left: 0;
    
    > [class*="col-"] {
      padding-right: 0;
      padding-left: 0;
    }
  }
}

// Generate column classes
@mixin make-col($size, $columns: $grid-columns) {
  flex: 0 0 percentage($size / $columns);
  max-width: percentage($size / $columns);
}

@mixin make-col-offset($size, $columns: $grid-columns) {
  margin-left: percentage($size / $columns);
}

.col {
  position: relative;
  width: 100%;
  padding-right: ($grid-gutter-width / 2);
  padding-left: ($grid-gutter-width / 2);
  flex-basis: 0;
  flex-grow: 1;
  max-width: 100%;
}

@for $i from 1 through $grid-columns {
  .col-#{$i} {
    position: relative;
    width: 100%;
    padding-right: ($grid-gutter-width / 2);
    padding-left: ($grid-gutter-width / 2);
    @include make-col($i);
  }
}

@each $breakpoint in (sm, md, lg, xl, 2xl) {
  @media (min-width: map-get((
    sm: $breakpoint-sm,
    md: $breakpoint-md,
    lg: $breakpoint-lg,
    xl: $breakpoint-xl,
    2xl: $breakpoint-2xl
  ), $breakpoint)) {
    .col-#{$breakpoint} {
      flex-basis: 0;
      flex-grow: 1;
      max-width: 100%;
    }
    
    @for $i from 1 through $grid-columns {
      .col-#{$breakpoint}-#{$i} {
        @include make-col($i);
      }
      
      .offset-#{$breakpoint}-#{$i} {
        @include make-col-offset($i);
      }
    }
  }
}

// Flexbox utilities
.d-flex {
  display: flex;
}

.d-inline-flex {
  display: inline-flex;
}

.flex-row {
  flex-direction: row;
}

.flex-column {
  flex-direction: column;
}

.flex-row-reverse {
  flex-direction: row-reverse;
}

.flex-column-reverse {
  flex-direction: column-reverse;
}

.flex-wrap {
  flex-wrap: wrap;
}

.flex-nowrap {
  flex-wrap: nowrap;
}

.flex-wrap-reverse {
  flex-wrap: wrap-reverse;
}

.justify-content-start {
  justify-content: flex-start;
}

.justify-content-end {
  justify-content: flex-end;
}

.justify-content-center {
  justify-content: center;
}

.justify-content-between {
  justify-content: space-between;
}

.justify-content-around {
  justify-content: space-around;
}

.justify-content-evenly {
  justify-content: space-evenly;
}

.align-items-start {
  align-items: flex-start;
}

.align-items-end {
  align-items: flex-end;
}

.align-items-center {
  align-items: center;
}

.align-items-baseline {
  align-items: baseline;
}

.align-items-stretch {
  align-items: stretch;
}

.align-content-start {
  align-content: flex-start;
}

.align-content-end {
  align-content: flex-end;
}

.align-content-center {
  align-content: center;
}

.align-content-between {
  align-content: space-between;
}

.align-content-around {
  align-content: space-around;
}

.align-content-stretch {
  align-content: stretch;
}

.align-self-auto {
  align-self: auto;
}

.align-self-start {
  align-self: flex-start;
}

.align-self-end {
  align-self: flex-end;
}

.align-self-center {
  align-self: center;
}

.align-self-baseline {
  align-self: baseline;
}

.align-self-stretch {
  align-self: stretch;
}

.flex-fill {
  flex: 1 1 auto;
}

.flex-grow-0 {
  flex-grow: 0;
}

.flex-grow-1 {
  flex-grow: 1;
}

.flex-shrink-0 {
  flex-shrink: 0;
}

.flex-shrink-1 {
  flex-shrink: 1;
}

// CSS Grid utilities
.d-grid {
  display: grid;
}

.d-inline-grid {
  display: inline-grid;
}

// Generate grid template columns
@for $i from 1 through 12 {
  .grid-cols-#{$i} {
    grid-template-columns: repeat(#{$i}, minmax(0, 1fr));
  }
}

// Generate grid column span
@for $i from 1 through 12 {
  .col-span-#{$i} {
    grid-column: span #{$i} / span #{$i};
  }
}

// Generate grid row span
@for $i from 1 through 6 {
  .row-span-#{$i} {
    grid-row: span #{$i} / span #{$i};
  }
}

// Gap utilities
.gap-0 {
  gap: $spacing-0;
}

.gap-1 {
  gap: $spacing-1;
}

.gap-2 {
  gap: $spacing-2;
}

.gap-3 {
  gap: $spacing-3;
}

.gap-4 {
  gap: $spacing-4;
}

.gap-5 {
  gap: $spacing-5;
}

.gap-6 {
  gap: $spacing-6;
}

.gap-8 {
  gap: $spacing-8;
}

.gap-10 {
  gap: $spacing-10;
}

// Spacing utilities
// Margin
@each $size, $value in (
  '0': $spacing-0,
  '1': $spacing-1,
  '2': $spacing-2,
  '3': $spacing-3,
  '4': $spacing-4,
  '5': $spacing-5,
  '6': $spacing-6,
  '8': $spacing-8,
  '10': $spacing-10,
  '12': $spacing-12,
  '16': $spacing-16,
  '20': $spacing-20,
  '24': $spacing-24,
  '32': $spacing-32,
  'auto': auto
) {
  .m-#{$size} {
    margin: $value;
  }
  
  .mt-#{$size} {
    margin-top: $value;
  }
  
  .mr-#{$size} {
    margin-right: $value;
  }
  
  .mb-#{$size} {
    margin-bottom: $value;
  }
  
  .ml-#{$size} {
    margin-left: $value;
  }
  
  .mx-#{$size} {
    margin-left: $value;
    margin-right: $value;
  }
  
  .my-#{$size} {
    margin-top: $value;
    margin-bottom: $value;
  }
}

// Padding
@each $size, $value in (
  '0': $spacing-0,
  '1': $spacing-1,
  '2': $spacing-2,
  '3': $spacing-3,
  '4': $spacing-4,
  '5': $spacing-5,
  '6': $spacing-6,
  '8': $spacing-8,
  '10': $spacing-10,
  '12': $spacing-12,
  '16': $spacing-16,
  '20': $spacing-20,
  '24': $spacing-24,
  '32': $spacing-32
) {
  .p-#{$size} {
    padding: $value;
  }
  
  .pt-#{$size} {
    padding-top: $value;
  }
  
  .pr-#{$size} {
    padding-right: $value;
  }
  
  .pb-#{$size} {
    padding-bottom: $value;
  }
  
  .pl-#{$size} {
    padding-left: $value;
  }
  
  .px-#{$size} {
    padding-left: $value;
    padding-right: $value;
  }
  
  .py-#{$size} {
    padding-top: $value;
    padding-bottom: $value;
  }
}

// Width and height utilities
@each $size in (25, 33, 50, 66, 75, 100, auto) {
  .w-#{$size} {
    @if $size == 'auto' {
      width: auto;
    } @else {
      width: percentage($size / 100);
    }
  }
  
  .h-#{$size} {
    @if $size == 'auto' {
      height: auto;
    } @else {
      height: percentage($size / 100);
    }
  }
}

.w-screen {
  width: 100vw;
}

.h-screen {
  height: 100vh;
}

// Positions
.position-static {
  position: static;
}

.position-relative {
  position: relative;
}

.position-absolute {
  position: absolute;
}

.position-fixed {
  position: fixed;
}

.position-sticky {
  position: sticky;
}

.top-0 {
  top: 0;
}

.right-0 {
  right: 0;
}

.bottom-0 {
  bottom: 0;
}

.left-0 {
  left: 0;
}

.z-0 {
  z-index: 0;
}

.z-10 {
  z-index: 10;
}

.z-20 {
  z-index: 20;
}

.z-30 {
  z-index: 30;
}

.z-40 {
  z-index: 40;
}

.z-50 {
  z-index: 50;
}

.z-auto {
  z-index: auto;
}

// Display utilities
.d-none {
  display: none;
}

.d-inline {
  display: inline;
}

.d-inline-block {
  display: inline-block;
}

.d-block {
  display: block;
}

.d-table {
  display: table;
}

.d-table-row {
  display: table-row;
}

.d-table-cell {
  display: table-cell;
}

// Responsive display utilities
@each $breakpoint in (sm, md, lg, xl, 2xl) {
  @media (min-width: map-get((
    sm: $breakpoint-sm,
    md: $breakpoint-md,
    lg: $breakpoint-lg,
    xl: $breakpoint-xl,
    2xl: $breakpoint-2xl
  ), $breakpoint)) {
    .d-#{$breakpoint}-none {
      display: none;
    }
    
    .d-#{$breakpoint}-inline {
      display: inline;
    }
    
    .d-#{$breakpoint}-inline-block {
      display: inline-block;
    }
    
    .d-#{$breakpoint}-block {
      display: block;
    }
    
    .d-#{$breakpoint}-grid {
      display: grid;
    }
    
    .d-#{$breakpoint}-table {
      display: table;
    }
    
    .d-#{$breakpoint}-flex {
      display: flex;
    }
  }
}