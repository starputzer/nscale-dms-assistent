// _layout.scss
// Layout system for nscale-assist app
// Contains grid, flexbox, spacing and positioning utilities

@use 'sass:math';
@use 'sass:map';
@import './_variables';

// Container
.container {
  width: 100%;
  margin-right: auto;
  margin-left: auto;
  padding-right: $spacing-4;
  padding-left: $spacing-4;
  
  @media (min-width: $breakpoint-sm) {
    max-width: $container-max-width-sm;
  }
  
  @media (min-width: $breakpoint-md) {
    max-width: $container-max-width-md;
  }
  
  @media (min-width: $breakpoint-lg) {
    max-width: $container-max-width-lg;
  }
  
  @media (min-width: $breakpoint-xl) {
    max-width: $container-max-width-xl;
  }
  
  @media (min-width: $breakpoint-2xl) {
    max-width: $container-max-width-2xl;
  }
  
  &-fluid {
    max-width: 100%;
  }
  
  &-sm {
    max-width: $container-max-width-sm;
  }
  
  &-md {
    max-width: $container-max-width-md;
  }
  
  &-lg {
    max-width: $container-max-width-lg;
  }
}

// Grid System
.row {
  display: flex;
  flex-wrap: wrap;
  margin-right: math.div($grid-gutter-width, -2);
  margin-left: math.div($grid-gutter-width, -2);
  
  &.no-gutters {
    margin-right: 0;
    margin-left: 0;
    
    > [class*="col-"] {
      padding-right: 0;
      padding-left: 0;
    }
  }
}

// Generate column classes
@mixin make-col($size, $columns: $grid-columns) {
  flex: 0 0 math.percentage(math.div($size, $columns));
  max-width: math.percentage(math.div($size, $columns));
}

@mixin make-col-offset($size, $columns: $grid-columns) {
  margin-left: math.percentage(math.div($size, $columns));
}

.col {
  position: relative;
  width: 100%;
  padding-right: math.div($grid-gutter-width, 2);
  padding-left: math.div($grid-gutter-width, 2);
  flex-basis: 0;
  flex-grow: 1;
  max-width: 100%;
}

@for $i from 1 through $grid-columns {
  .col-#{$i} {
    position: relative;
    width: 100%;
    padding-right: math.div($grid-gutter-width, 2);
    padding-left: math.div($grid-gutter-width, 2);
    @include make-col($i);
  }
}

@each $breakpoint in (sm, md, lg, xl, 2xl) {
  @media (min-width: map.get((
    sm: $breakpoint-sm,
    md: $breakpoint-md,
    lg: $breakpoint-lg,
    xl: $breakpoint-xl,
    2xl: $breakpoint-2xl
  ), $breakpoint)) {
    .col-#{$breakpoint} {
      flex-basis: 0;
      flex-grow: 1;
      max-width: 100%;
    }
    
    @for $i from 1 through $grid-columns {
      .col-#{$breakpoint}-#{$i} {
        @include make-col($i);
      }
      
      .offset-#{$breakpoint}-#{$i} {
        @include make-col-offset($i);
      }
    }
  }
}

// Flexbox utilities
.d-flex {
  display: flex;
}

.d-inline-flex {
  display: inline-flex;
}

.flex-row {
  flex-direction: row;
}

.flex-column {
  flex-direction: column;
}

.flex-row-reverse {
  flex-direction: row-reverse;
}

.flex-column-reverse {
  flex-direction: column-reverse;
}

.flex-wrap {
  flex-wrap: wrap;
}

.flex-nowrap {
  flex-wrap: nowrap;
}

.justify-content-start {
  justify-content: flex-start;
}

.justify-content-end {
  justify-content: flex-end;
}

.justify-content-center {
  justify-content: center;
}

.justify-content-between {
  justify-content: space-between;
}

.justify-content-around {
  justify-content: space-around;
}

.justify-content-evenly {
  justify-content: space-evenly;
}

.align-items-start {
  align-items: flex-start;
}

.align-items-end {
  align-items: flex-end;
}

.align-items-center {
  align-items: center;
}

.align-items-baseline {
  align-items: baseline;
}

.align-items-stretch {
  align-items: stretch;
}

.align-self-auto {
  align-self: auto;
}

.align-self-start {
  align-self: flex-start;
}

.align-self-end {
  align-self: flex-end;
}

.align-self-center {
  align-self: center;
}

.align-self-baseline {
  align-self: baseline;
}

.align-self-stretch {
  align-self: stretch;
}

// Flexbox Order utilities
@for $i from 0 through 12 {
  .order-#{$i} {
    order: $i;
  }
}

// Flex grow and shrink utilities
.flex-grow-0 {
  flex-grow: 0;
}

.flex-grow-1 {
  flex-grow: 1;
}

.flex-shrink-0 {
  flex-shrink: 0;
}

.flex-shrink-1 {
  flex-shrink: 1;
}

// Gap utilities
@each $size, $value in (
  0: 0,
  1: $spacing-1,
  2: $spacing-2,
  3: $spacing-3,
  4: $spacing-4,
  5: $spacing-5,
  6: $spacing-6,
  8: $spacing-8,
  10: $spacing-10,
  12: $spacing-12,
  16: $spacing-16,
  20: $spacing-20,
  24: $spacing-24
) {
  .gap-#{$size} {
    gap: $value;
  }
  
  .gap-x-#{$size} {
    column-gap: $value;
  }
  
  .gap-y-#{$size} {
    row-gap: $value;
  }
}

// Spacing utilities (margin and padding)
@each $prop, $prefix in (margin: m, padding: p) {
  @each $size, $value in (
    0: 0,
    1: $spacing-1,
    2: $spacing-2,
    3: $spacing-3,
    4: $spacing-4,
    5: $spacing-5,
    6: $spacing-6,
    8: $spacing-8,
    10: $spacing-10,
    12: $spacing-12,
    16: $spacing-16,
    20: $spacing-20,
    24: $spacing-24,
    auto: auto
  ) {
    .#{$prefix}-#{$size} {
      #{$prop}: $value;
    }
    
    .#{$prefix}t-#{$size} {
      #{$prop}-top: $value;
    }
    
    .#{$prefix}r-#{$size} {
      #{$prop}-right: $value;
    }
    
    .#{$prefix}b-#{$size} {
      #{$prop}-bottom: $value;
    }
    
    .#{$prefix}l-#{$size} {
      #{$prop}-left: $value;
    }
    
    .#{$prefix}x-#{$size} {
      #{$prop}-left: $value;
      #{$prop}-right: $value;
    }
    
    .#{$prefix}y-#{$size} {
      #{$prop}-top: $value;
      #{$prop}-bottom: $value;
    }
  }
}

// Negative margin utilities
@each $size, $value in (
  1: $spacing-1,
  2: $spacing-2,
  3: $spacing-3,
  4: $spacing-4,
  5: $spacing-5,
  6: $spacing-6,
  8: $spacing-8,
  10: $spacing-10,
  12: $spacing-12,
  16: $spacing-16,
  20: $spacing-20,
  24: $spacing-24
) {
  .m-n#{$size} {
    margin: -$value;
  }
  
  .mt-n#{$size} {
    margin-top: -$value;
  }
  
  .mr-n#{$size} {
    margin-right: -$value;
  }
  
  .mb-n#{$size} {
    margin-bottom: -$value;
  }
  
  .ml-n#{$size} {
    margin-left: -$value;
  }
  
  .mx-n#{$size} {
    margin-left: -$value;
    margin-right: -$value;
  }
  
  .my-n#{$size} {
    margin-top: -$value;
    margin-bottom: -$value;
  }
}

// Position utilities
.position-static {
  position: static;
}

.position-relative {
  position: relative;
}

.position-absolute {
  position: absolute;
}

.position-fixed {
  position: fixed;
}

.position-sticky {
  position: sticky;
}

// Positioning utilities
.top-0 {
  top: 0;
}

.top-50 {
  top: 50%;
}

.top-100 {
  top: 100%;
}

.right-0 {
  right: 0;
}

.right-50 {
  right: 50%;
}

.right-100 {
  right: 100%;
}

.bottom-0 {
  bottom: 0;
}

.bottom-50 {
  bottom: 50%;
}

.bottom-100 {
  bottom: 100%;
}

.left-0 {
  left: 0;
}

.left-50 {
  left: 50%;
}

.left-100 {
  left: 100%;
}

.translate-middle {
  transform: translate(-50%, -50%);
}

.translate-middle-x {
  transform: translateX(-50%);
}

.translate-middle-y {
  transform: translateY(-50%);
}

// Width and Height utilities
@each $size, $value in (
  25: 25,
  50: 50,
  75: 75,
  100: 100
) {
  .w-#{$size} {
    width: #{$value}%;
  }
  
  .h-#{$size} {
    height: #{$value}%;
  }
}

.w-auto {
  width: auto;
}

.h-auto {
  height: auto;
}

.vw-100 {
  width: 100vw;
}

.vh-100 {
  height: 100vh;
}

// Min/Max width and height
.min-vw-100 {
  min-width: 100vw;
}

.min-vh-100 {
  min-height: 100vh;
}

.max-vw-100 {
  max-width: 100vw;
}

.max-vh-100 {
  max-height: 100vh;
}

// Borders
@each $side in (top, right, bottom, left) {
  .border-#{$side} {
    border-#{$side}: $border-width-thin solid var(--border-color);
  }
  
  .border-#{$side}-0 {
    border-#{$side}: 0;
  }
}

.border {
  border: $border-width-thin solid var(--border-color);
}

.border-0 {
  border: 0;
}

// Border radius
@each $size, $value in (
  0: 0,
  sm: $border-radius-sm,
  md: $border-radius-md,
  lg: $border-radius-lg,
  xl: $border-radius-xl,
  2xl: $border-radius-2xl,
  full: $border-radius-full
) {
  .rounded-#{$size} {
    border-radius: $value;
  }
}

.rounded {
  border-radius: $border-radius-md;
}

.rounded-top {
  border-top-left-radius: $border-radius-md;
  border-top-right-radius: $border-radius-md;
}

.rounded-right {
  border-top-right-radius: $border-radius-md;
  border-bottom-right-radius: $border-radius-md;
}

.rounded-bottom {
  border-bottom-right-radius: $border-radius-md;
  border-bottom-left-radius: $border-radius-md;
}

.rounded-left {
  border-top-left-radius: $border-radius-md;
  border-bottom-left-radius: $border-radius-md;
}

// Overflow utilities
.overflow-auto {
  overflow: auto;
}

.overflow-hidden {
  overflow: hidden;
}

.overflow-visible {
  overflow: visible;
}

.overflow-scroll {
  overflow: scroll;
}

.overflow-x-auto {
  overflow-x: auto;
}

.overflow-x-hidden {
  overflow-x: hidden;
}

.overflow-x-visible {
  overflow-x: visible;
}

.overflow-x-scroll {
  overflow-x: scroll;
}

.overflow-y-auto {
  overflow-y: auto;
}

.overflow-y-hidden {
  overflow-y: hidden;
}

.overflow-y-visible {
  overflow-y: visible;
}

.overflow-y-scroll {
  overflow-y: scroll;
}

// Display utilities
.d-none {
  display: none;
}

.d-inline {
  display: inline;
}

.d-inline-block {
  display: inline-block;
}

.d-block {
  display: block;
}

.d-grid {
  display: grid;
}

.d-table {
  display: table;
}

.d-table-row {
  display: table-row;
}

.d-table-cell {
  display: table-cell;
}

// Visibility utilities
.visible {
  visibility: visible;
}

.invisible {
  visibility: hidden;
}

// Z-index
@each $value in (0, 10, 20, 30, 40, 50, auto) {
  .z-#{$value} {
    z-index: $value;
  }
}

// Opacity utilities
@each $value in (0, 5, 10, 20, 25, 30, 40, 50, 60, 70, 75, 80, 90, 95, 100) {
  .opacity-#{$value} {
    opacity: math.div($value, 100);
  }
}

// Shadow utilities
.shadow-none {
  box-shadow: none;
}

.shadow-sm {
  box-shadow: var(--shadow-sm);
}

.shadow {
  box-shadow: var(--shadow-md);
}

.shadow-lg {
  box-shadow: var(--shadow-lg);
}

.shadow-xl {
  box-shadow: var(--shadow-xl);
}

// Responsive utilities
@each $breakpoint in (sm, md, lg, xl, 2xl) {
  @media (min-width: map.get((
    sm: $breakpoint-sm,
    md: $breakpoint-md,
    lg: $breakpoint-lg,
    xl: $breakpoint-xl,
    2xl: $breakpoint-2xl
  ), $breakpoint)) {
    .d-#{$breakpoint}-none {
      display: none;
    }
    
    .d-#{$breakpoint}-inline {
      display: inline;
    }
    
    .d-#{$breakpoint}-inline-block {
      display: inline-block;
    }
    
    .d-#{$breakpoint}-block {
      display: block;
    }
    
    .d-#{$breakpoint}-grid {
      display: grid;
    }
    
    .d-#{$breakpoint}-table {
      display: table;
    }
    
    .d-#{$breakpoint}-table-row {
      display: table-row;
    }
    
    .d-#{$breakpoint}-table-cell {
      display: table-cell;
    }
    
    .d-#{$breakpoint}-flex {
      display: flex;
    }
    
    .d-#{$breakpoint}-inline-flex {
      display: inline-flex;
    }
  }
}

// Print utilities
@media print {
  .d-print-none {
    display: none !important;
  }
  
  .d-print-inline {
    display: inline !important;
  }
  
  .d-print-inline-block {
    display: inline-block !important;
  }
  
  .d-print-block {
    display: block !important;
  }
  
  .d-print-grid {
    display: grid !important;
  }
  
  .d-print-table {
    display: table !important;
  }
  
  .d-print-table-row {
    display: table-row !important;
  }
  
  .d-print-table-cell {
    display: table-cell !important;
  }
  
  .d-print-flex {
    display: flex !important;
  }
  
  .d-print-inline-flex {
    display: inline-flex !important;
  }
}