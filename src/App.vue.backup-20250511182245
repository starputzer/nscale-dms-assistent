<template>
  <div class="app-container" :class="{ 'theme-dark': isDarkTheme }">
    <!-- Authentifizierungsseite -->
    <auth-view v-if="!isAuthenticated" />
    
    <!-- Hauptanwendung (wenn eingeloggt) -->
    <div v-else class="main-layout">
      <!-- Header mit Navigation -->
      <app-header 
        :user-role="userRole" 
        :active-view="activeView"
        @toggle-admin="toggleAdminView"
        @toggle-settings="toggleSettings"
        @logout="logout"
      />
      
      <!-- Message of the Day -->
      <app-motd 
        v-if="motdConfig.enabled && shouldShowMotd" 
        :config="motdConfig"
        @dismiss="dismissMotd"
      />
      
      <!-- Hauptinhalt -->
      <main class="main-content">
        <!-- Chat-Bereich -->
        <chat-view 
          v-if="activeView === 'chat'"
          :current-session="currentSession"
          :sessions="sessions"
          :messages="messages"
          :is-streaming="isStreaming"
          :is-loading="isLoading"
          @new-session="startNewSession"
          @load-session="loadSession"
          @delete-session="deleteSession"
          @send-message="sendMessage"
        />
        
        <!-- Admin-Panel -->
        <admin-view 
          v-else-if="activeView === 'admin'"
          :active-tab="adminTab"
          :users-list="usersList"
          :system-stats="systemStats"
          :feedback-stats="feedbackStats"
          :recent-feedback="recentFeedback"
          :motd-config="motdEditConfig"
          :ab-tests="abTests"
          @change-tab="setAdminTab"
          @update-motd="updateMotd"
          @toggle-user-role="toggleUserRole"
          @toggle-user-status="toggleUserStatus"
          @delete-user="deleteUser"
        />
      </main>
      
      <!-- Modals -->
      <feedback-dialog 
        v-if="showFeedbackDialog"
        :message="feedbackMessage"
        :type="feedbackType"
        v-model:comment="feedbackComment"
        @close="showFeedbackDialog = false"
        @submit="submitFeedbackWithComment"
        @select-type="submitFeedback"
      />
      
      <settings-dialog
        v-if="settingsVisible"
        v-model:font-size="fontSizeLevel"
        v-model:contrast-mode="contrastMode"
        v-model:color-mode="colorMode"
        v-model:language="language"
        v-model:streaming-enabled="streamingEnabled"
        :system-info="systemInfo"
        :user-role="userRole"
        @close="toggleSettings"
        @reset="resetSettings"
      />
      
      <!-- Toast-Container für Benachrichtigungen -->
      <toast-container />

      <!-- Source References Components -->
      <source-references-modal
        v-if="showSourceModal"
        :show-modal="showSourceModal"
        :title="sourceModalTitle"
        :sources="sourceModalSources"
        :message-id="sourceModalMessageId"
        :is-loading="sourceModalLoading"
        @close="closeSourceModal"
      />

      <source-references-popup
        v-if="showSourcePopup"
        :show="showSourcePopup"
        :position="sourcePopupPosition"
        :content="sourcePopupContent"
        @close="closeSourcePopup"
        @show-details="showSourceDetails"
      />

      <!-- Error-Boundary für Fehlerfälle -->
      <error-boundary v-slot="{ error, resetError }">
        <critical-error :error="error" @reset="resetError" />
      </error-boundary>
    </div>
  </div>
</template>

<script lang="ts">
import { defineComponent, ref, computed, onMounted, watch } from 'vue'
import { useAuthStore } from '@/stores/auth'
import { useSessionStore } from '@/stores/sessions'
import { useSettingsStore } from '@/stores/settings'
import { useUIStore } from '@/stores/ui'
import { useMotdStore } from '@/stores/admin/motd'
import { useFeedbackStore } from '@/stores/admin/feedback'
import { useABTestStore } from '@/stores/abTests'
import { useSourcesStore } from '@/stores/sources'
import { useSourceReferences } from '@/composables/useSourceReferences'

// Komponenten importieren
import AuthView from '@/views/AuthView.vue'
import AppHeader from '@/components/layout/Header.vue'
import AppMotd from '@/components/ui/Motd.vue'
import ChatView from '@/views/ChatView.vue'
import AdminView from '@/views/AdminView.vue'
import FeedbackDialog from '@/components/dialog/FeedbackDialog.vue'
import SettingsDialog from '@/components/dialog/SettingsDialog.vue'
import ToastContainer from '@/components/ui/ToastContainer.vue'
import ErrorBoundary from '@/components/shared/ErrorBoundary.vue'
import CriticalError from '@/components/shared/CriticalError.vue'
import SourceReferencesModal from '@/components/SourceReferencesModal.vue'
import SourceReferencesPopup from '@/components/SourceReferencesPopup.vue'

// Services importieren
import { ApiService } from '@/services/api/ApiService'
import { ChatService } from '@/services/api/ChatService'

export default defineComponent({
  name: 'App',
  
  components: {
    AuthView,
    AppHeader,
    AppMotd,
    ChatView,
    AdminView,
    FeedbackDialog,
    SettingsDialog,
    ToastContainer,
    ErrorBoundary,
    CriticalError,
    SourceReferencesModal,
    SourceReferencesPopup
  },
  
  setup() {
    // Stores
    const authStore = useAuthStore()
    const sessionStore = useSessionStore()
    const settingsStore = useSettingsStore()
    const uiStore = useUIStore()
    const motdStore = useMotdStore()
    const feedbackStore = useFeedbackStore()
    const abTestStore = useABTestStore()
    const sourcesStore = useSourcesStore()

    // Composables
    const {
      showSourcePopup: sourcePopupState,
      sourcePopupContent: sourcePopupContentValue,
      sourcePopupPosition: sourcePopupPositionValue,
      closeSourcePopup: closeSourcePopupFunc
    } = useSourceReferences()

    // Services
    const apiService = new ApiService()
    const chatService = new ChatService()
    
    // Reaktive State-Variablen
    const adminTab = ref('users')
    const showFeedbackDialog = ref(false)
    const feedbackMessage = ref(null)
    const feedbackType = ref('')
    const feedbackComment = ref('')
    const isStreaming = ref(false)
    const isLoading = ref(false)

    // Source references state
    const showSourceModal = ref(false)
    const sourceModalTitle = ref('Quellenreferenzen')
    const sourceModalSources = ref([])
    const sourceModalMessageId = ref(null)
    const sourceModalLoading = ref(false)

    // Source popup from composable wrapped in reactive refs
    const showSourcePopup = computed(() => sourcePopupState.value)
    const sourcePopupPosition = computed(() => sourcePopupPositionValue.value)
    const sourcePopupContent = computed(() => sourcePopupContentValue.value)
    
    // Computed Properties
    const isAuthenticated = computed(() => authStore.isAuthenticated)
    const userRole = computed(() => authStore.userRole)
    const activeView = computed(() => uiStore.activeView)
    const settingsVisible = computed(() => uiStore.settingsVisible)
    const sessions = computed(() => sessionStore.sessions)
    const currentSession = computed(() => sessionStore.currentSession)
    const messages = computed(() => sessionStore.messages)
    const isDarkTheme = computed(() => settingsStore.colorMode === 'dark' || 
      (settingsStore.colorMode === 'auto' && window.matchMedia('(prefers-color-scheme: dark)').matches))
    const motdConfig = computed(() => motdStore.config)
    const motdEditConfig = computed(() => motdStore.editConfig)
    const shouldShowMotd = computed(() => {
      if (!motdConfig.value.enabled) return false
      if (motdStore.dismissed) return false
      
      const isNewSession = messages.value.length === 0
      const showInChat = motdConfig.value.display?.showInChat && activeView.value === 'chat'
      const showOnStartup = motdConfig.value.display?.showOnStartup && isNewSession
      
      return showInChat || showOnStartup
    })
    
    // MOTD-Funktionen
    const dismissMotd = () => {
      motdStore.dismiss()
    }
    
    const updateMotd = (config) => {
      motdStore.saveConfig(config)
    }
    
    // Admin-Verwaltung
    const setAdminTab = (tab) => {
      adminTab.value = tab
    }
    
    const toggleAdminView = () => {
      uiStore.setActiveView(activeView.value === 'chat' ? 'admin' : 'chat')
    }
    
    // Session-Management
    const startNewSession = async () => {
      isLoading.value = true
      try {
        await sessionStore.createNewSession()
      } finally {
        isLoading.value = false
      }
    }
    
    const loadSession = async (sessionId) => {
      isLoading.value = true
      try {
        await sessionStore.loadSession(sessionId)
      } finally {
        isLoading.value = false
      }
    }
    
    const deleteSession = async (sessionId) => {
      isLoading.value = true
      try {
        await sessionStore.deleteSession(sessionId)
      } finally {
        isLoading.value = false
      }
    }
    
    // Chat-Funktionen
    const sendMessage = async (message) => {
      if (!message.trim()) return
      
      // Nachricht hinzufügen
      const messageObj = {
        id: `user-${Date.now()}`,
        text: message,
        is_user: true,
        timestamp: new Date().toISOString()
      }
      
      sessionStore.addMessage(messageObj)
      
      if (settingsStore.streamingEnabled) {
        sendMessageStream(message)
      } else {
        sendMessageNormal(message)
      }
    }
    
    const sendMessageNormal = async (message) => {
      isLoading.value = true
      try {
        const response = await chatService.sendMessage(message, currentSession.value?.id)
        sessionStore.addMessage({
          id: response.id,
          text: response.text,
          is_user: false,
          timestamp: new Date().toISOString()
        })
      } catch (error) {
        uiStore.showToast({
          type: 'error',
          message: 'Fehler beim Senden der Nachricht'
        })
      } finally {
        isLoading.value = false
      }
    }
    
    const sendMessageStream = async (message) => {
      isStreaming.value = true
      let streamedText = ''
      
      try {
        const eventSource = await chatService.streamMessage(
          message, 
          currentSession.value?.id,
          (chunk) => {
            streamedText += chunk
            sessionStore.updateStreamedMessage(streamedText)
          }
        )
        
        eventSource.addEventListener('close', () => {
          isStreaming.value = false
          // Streamed message is already in the store
        })
        
        eventSource.addEventListener('error', () => {
          isStreaming.value = false
          uiStore.showToast({
            type: 'error',
            message: 'Fehler beim Streaming der Antwort'
          })
        })
      } catch (error) {
        isStreaming.value = false
        uiStore.showToast({
          type: 'error',
          message: 'Fehler beim Starten des Streamings'
        })
      }
    }
    
    // Feedback-Funktionen
    const submitFeedback = (type) => {
      feedbackType.value = type
    }
    
    const submitFeedbackWithComment = async () => {
      try {
        await feedbackStore.submitFeedback({
          messageId: feedbackMessage.value?.id,
          type: feedbackType.value,
          comment: feedbackComment.value,
          sessionId: currentSession.value?.id
        })
        
        showFeedbackDialog.value = false
        feedbackType.value = ''
        feedbackComment.value = ''
        
        uiStore.showToast({
          type: 'success',
          message: 'Vielen Dank für Ihr Feedback!'
        })
      } catch (error) {
        uiStore.showToast({
          type: 'error',
          message: 'Fehler beim Senden des Feedbacks'
        })
      }
    }
    
    // Einstellungen
    const toggleSettings = () => {
      uiStore.toggleSettings()
    }
    
    const resetSettings = () => {
      settingsStore.resetToDefaults()
    }
    
    // Auth-Funktionen
    const logout = () => {
      authStore.logout()
      sessionStore.clearSessions()
    }

    // Source References Funktionen
    const showSourceDetails = async (sourceId) => {
      sourceModalLoading.value = true
      showSourceModal.value = true

      try {
        const sources = await sourcesStore.loadSourceReferences(sourceId)
        sourceModalSources.value = sources || []
        sourceModalTitle.value = `Quellenreferenz: ${sourceId}`
        sourceModalMessageId.value = sourceId
      } catch (error) {
        console.error('Fehler beim Laden der Quellendetails:', error)
        uiStore.showToast({
          type: 'error',
          message: 'Fehler beim Laden der Quellendetails'
        })
      } finally {
        sourceModalLoading.value = false
      }
    }

    const closeSourceModal = () => {
      showSourceModal.value = false
      sourceModalSources.value = []
      sourceModalMessageId.value = null
    }

    const closeSourcePopup = () => {
      closeSourcePopupFunc()
    }

    // User-Verwaltung
    const toggleUserRole = async (user) => {
      // Implementation für User-Rolle ändern
    }

    const toggleUserStatus = async (user) => {
      // Implementation für User-Status ändern
    }

    const deleteUser = async (userId) => {
      // Implementation für User löschen
    }
    
    // Initialisierung
    onMounted(async () => {
      // Source-Reference-Adapter initialisieren für Legacy-Bridge
      import('@/utils/sourceReferenceAdapter').then(module => {
        module.initializeSourceReferenceAdapter();
      }).catch(error => {
        console.error('Fehler beim Laden des Source Reference Adapters:', error);
      });

      // Überprüfe Authentication-Status
      if (authStore.token) {
        try {
          await authStore.validateToken()
          await sessionStore.loadSessions()
          await abTestStore.loadTests()
          
          // Lade die letzte aktive Session oder erstelle eine neue
          if (sessions.value.length > 0) {
            await loadSession(sessions.value[0].id)
          } else {
            await startNewSession()
          }
        } catch (error) {
          console.error('Fehler bei der Initialisierung:', error)
          authStore.logout()
        }
      }
      
      // Theme setzen basierend auf Einstellungen
      document.documentElement.classList.toggle('theme-dark', isDarkTheme.value)
      
      // Entferne Ladeanimation
      const appLoader = document.getElementById('app-loading')
      if (appLoader) {
        appLoader.classList.add('app-loader-fade')
        setTimeout(() => {
          appLoader.style.display = 'none'
        }, 500)
      }
    })
    
    // Watch für Theme-Änderungen
    watch(isDarkTheme, (newValue) => {
      document.documentElement.classList.toggle('theme-dark', newValue)
    })
    
    return {
      // State
      isAuthenticated,
      userRole,
      activeView,
      adminTab,
      sessions,
      currentSession,
      messages,
      isStreaming,
      isLoading,
      showFeedbackDialog,
      feedbackMessage,
      feedbackType,
      feedbackComment,
      settingsVisible,
      isDarkTheme,
      motdConfig,
      motdEditConfig,
      shouldShowMotd,

      // Source references state
      showSourceModal,
      sourceModalTitle,
      sourceModalSources,
      sourceModalMessageId,
      sourceModalLoading,
      showSourcePopup,
      sourcePopupPosition,
      sourcePopupContent,

      // Admin-Panel
      usersList: computed(() => []), // Hier würde der tatsächliche Store verwendet
      systemStats: computed(() => []), // Hier würde der tatsächliche Store verwendet
      feedbackStats: computed(() => ({
        positive: 0,
        negative: 0,
        total: 0
      })), // Hier würde der tatsächliche Store verwendet
      recentFeedback: computed(() => []), // Hier würde der tatsächliche Store verwendet
      abTests: computed(() => abTestStore.tests),
      
      // Einstellungen
      fontSizeLevel: computed({
        get: () => settingsStore.fontSizeLevel,
        set: (value) => settingsStore.setFontSizeLevel(value)
      }),
      contrastMode: computed({
        get: () => settingsStore.contrastMode,
        set: (value) => settingsStore.setContrastMode(value)
      }),
      colorMode: computed({
        get: () => settingsStore.colorMode,
        set: (value) => settingsStore.setColorMode(value)
      }),
      language: computed({
        get: () => settingsStore.language,
        set: (value) => settingsStore.setLanguage(value)
      }),
      streamingEnabled: computed({
        get: () => settingsStore.streamingEnabled,
        set: (value) => settingsStore.setStreamingEnabled(value)
      }),
      systemInfo: computed(() => ({
        version: '1.0.0',
        build: '20250511',
        model: 'nScale Assistant',
        endpoint: '/api'
      })),
      
      // Methoden
      toggleAdminView,
      setAdminTab,
      startNewSession,
      loadSession,
      deleteSession,
      sendMessage,
      submitFeedback,
      submitFeedbackWithComment,
      toggleSettings,
      resetSettings,
      logout,
      dismissMotd,
      updateMotd,
      toggleUserRole,
      toggleUserStatus,
      deleteUser,
      showSourceDetails,
      closeSourceModal,
      closeSourcePopup
    }
  }
})
</script>

<style lang="scss">
// Basis-Styles
:root {
  /* Primary color palette */
  --nscale-green: #00a550;
  --nscale-green-dark: #008d45;
  --nscale-green-darker: #00773b;
  --nscale-green-light: #e8f7ef;
  --nscale-green-lighter: #f2fbf7;
  
  /* Secondary colors */
  --nscale-dark-gray: #333333;
  --nscale-mid-gray: #666666;
  --nscale-light-gray: #cccccc;
  --nscale-lightest-gray: #f5f5f5;

  /* State colors */
  --nscale-success: #00a550;
  --nscale-warning: #ffc107;
  --nscale-error: #dc3545;
  --nscale-info: #17a2b8;
  
  /* UI component colors */
  --nscale-border-color: #e2e8f0;
  --nscale-shadow-color: rgba(0, 0, 0, 0.1);
  --nscale-focus-ring: rgba(0, 165, 80, 0.25);
  
  /* Background colors */
  --bg-primary: #ffffff;
  --bg-secondary: #f8f9fa;
  --bg-tertiary: #f1f5f9;
  
  /* Text colors */
  --text-primary: #333333;
  --text-secondary: #666666;
  --text-muted: #888888;
  
  /* Spacing */
  --spacing-xs: 0.25rem;
  --spacing-sm: 0.5rem;
  --spacing-md: 1rem;
  --spacing-lg: 1.5rem;
  --spacing-xl: 2rem;
  
  /* Border radius */
  --radius-sm: 4px;
  --radius-md: 8px;
  --radius-lg: 12px;
  --radius-xl: 16px;
  
  /* Animation duration */
  --duration-fast: 150ms;
  --duration-normal: 300ms;
  --duration-slow: 500ms;
}

// Dark theme variables
.theme-dark {
  --nscale-green-light: rgba(0, 165, 80, 0.2);
  --nscale-green-lighter: rgba(0, 165, 80, 0.1);
  
  --bg-primary: #1a1a1a;
  --bg-secondary: #2a2a2a;
  --bg-tertiary: #333333;
  
  --text-primary: #f1f5f9;
  --text-secondary: #cbd5e1;
  --text-muted: #94a3b8;
  
  --nscale-border-color: #444444;
  --nscale-shadow-color: rgba(0, 0, 0, 0.3);
}

// Basis-Stile
body {
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
  margin: 0;
  padding: 0;
  background-color: var(--bg-primary);
  color: var(--text-primary);
  font-size: 16px;
  line-height: 1.5;
}

.app-container {
  min-height: 100vh;
  display: flex;
  flex-direction: column;
}

.main-layout {
  display: flex;
  flex-direction: column;
  min-height: 100vh;
}

.main-content {
  flex: 1;
  display: flex;
  overflow: hidden;
}

// Lade-Animation
.app-loader {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: var(--bg-primary);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 9999;
  transition: opacity var(--duration-normal) ease-out;
  
  &.app-loader-fade {
    opacity: 0;
  }
}

.app-loader-content {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: var(--spacing-md);
}

.app-loader-logo {
  width: 80px;
  height: auto;
}

.app-loader-spinner {
  width: 40px;
  height: 40px;
  border: 4px solid var(--nscale-green-light);
  border-top-color: var(--nscale-green);
  border-radius: 50%;
  animation: spin 1s linear infinite;
}

@keyframes spin {
  to { transform: rotate(360deg); }
}

// Critical error styling
.critical-error {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: rgba(0, 0, 0, 0.7);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 10000;
}

.critical-error-content {
  background-color: var(--bg-primary);
  border-radius: var(--radius-md);
  padding: var(--spacing-xl);
  max-width: 500px;
  width: 90%;
  text-align: center;
  box-shadow: 0 10px 25px rgba(0, 0, 0, 0.3);
}

.critical-error h2 {
  color: var(--nscale-error);
  margin-top: 0;
}

.critical-error button {
  background-color: var(--nscale-green);
  color: white;
  border: none;
  padding: var(--spacing-md) var(--spacing-xl);
  border-radius: var(--radius-sm);
  font-weight: 500;
  cursor: pointer;
  margin-top: var(--spacing-md);
  transition: background-color var(--duration-fast) ease;
  
  &:hover {
    background-color: var(--nscale-green-dark);
  }
}
</style>