{"version":3,"file":"adminUsers.js","sources":["../../../src/standalone/admin-users.js"],"sourcesContent":["/**\n * admin-users.js\n * Standalone Vue-Modul für Benutzerverwaltung im Admin-Bereich\n */\n\nimport { createApp } from 'vue';\nimport { createPinia } from 'pinia';\nimport UsersView from '../views/admin/UsersView.vue';\nimport { useUserStore } from '../stores/userStore';\n\n// Warte auf DOM-Bereitschaft\ndocument.addEventListener('DOMContentLoaded', () => {\n  initAdminUsers();\n});\n\n/**\n * Initialisiert die Benutzerverwaltungsansicht\n */\nfunction initAdminUsers() {\n  console.log('Initialisiere Vue.js Benutzerverwaltung...');\n\n  // Mount-Point für die Benutzerverwaltung finden\n  const usersAppContainer = document.getElementById('users-admin-app');\n  if (!usersAppContainer) {\n    console.error('Mount-Point #users-admin-app wurde nicht gefunden');\n    return;\n  }\n\n  // Erstelle Vue-App\n  createVueApp(usersAppContainer);\n}\n\n/**\n * Findet den Mount-Point für die Vue-Komponente\n */\nfunction findMountPoint() {\n  // Zunächst nach dem Tab-spezifischen Container suchen\n  let container = document.querySelector('[data-tab=\"users\"]');\n  \n  // Fallback auf andere mögliche Selektoren\n  if (!container) {\n    container = document.querySelector('.admin-content-users');\n  }\n  \n  if (!container) {\n    // Suche jeden Container, der aktiv ist und \"Benutzer\" enthält\n    const tabs = document.querySelectorAll('.admin-content-tab');\n    for (const tab of tabs) {\n      if (tab.style.display !== 'none' && \n          (tab.textContent.includes('Benutzer') || \n           tab.textContent.includes('User') || \n           tab.getAttribute('data-tab') === 'users')) {\n        container = tab;\n        break;\n      }\n    }\n  }\n\n  return container;\n}\n\n/**\n * Erstellt und konfiguriert die Vue-App\n */\nfunction createVueApp(container) {\n  // Erstelle Pinia-Store und Vue-App\n  const pinia = createPinia();\n  const app = createApp(UsersView);\n\n  // Plugins einbinden\n  app.use(pinia);\n\n  // App mounten\n  app.mount(container);\n\n  // Store initialisieren und Daten laden\n  const userStore = useUserStore();\n  userStore.fetchUsers();\n\n  console.log('Vue.js Benutzerverwaltung erfolgreich initialisiert');\n}\n\n// Globales Objekt für externe Zugriffe\nwindow.adminUsersApp = {\n  refresh: () => {\n    const userStore = useUserStore();\n    if (userStore) {\n      userStore.fetchUsers();\n    }\n  }\n};"],"names":["initAdminUsers","usersAppContainer","createVueApp","container","pinia","createPinia","app","createApp","UsersView","useUserStore","userStore"],"mappings":"uLAWA,SAAS,iBAAiB,mBAAoB,IAAM,CAClDA,GACF,CAAC,EAKD,SAASA,GAAiB,CACxB,QAAQ,IAAI,4CAA4C,EAGxD,MAAMC,EAAoB,SAAS,eAAe,iBAAiB,EACnE,GAAI,CAACA,EAAmB,CACtB,QAAQ,MAAM,mDAAmD,EACjE,MACD,CAGDC,EAAaD,CAAiB,CAChC,CAkCA,SAASC,EAAaC,EAAW,CAE/B,MAAMC,EAAQC,IACRC,EAAMC,EAAUC,CAAS,EAG/BF,EAAI,IAAIF,CAAK,EAGbE,EAAI,MAAMH,CAAS,EAGDM,IACR,WAAU,EAEpB,QAAQ,IAAI,qDAAqD,CACnE,CAGA,OAAO,cAAgB,CACrB,QAAS,IAAM,CACb,MAAMC,EAAYD,IACdC,GACFA,EAAU,WAAU,CAEvB,CACH"}