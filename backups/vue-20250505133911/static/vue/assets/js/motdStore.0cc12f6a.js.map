{"version":3,"file":"motdStore.0cc12f6a.js","sources":["../../../src/stores/motdStore.js"],"sourcesContent":["// stores/motdStore.js\nimport { defineStore } from 'pinia';\nimport axios from 'axios';\nimport { useAuthStore } from './authStore';\n\n/**\n * Store zur Verwaltung der Message of the Day (MOTD)\n * Enth√§lt Funktionen zum Laden, Speichern und Anzeigen der MOTD\n */\nexport const useMotdStore = defineStore('motd', {\n  state: () => ({\n    // MOTD-Inhalt\n    motd: null,\n    \n    // MOTD ausgeblendet?\n    dismissed: localStorage.getItem('motdDismissed') === 'true' || false,\n    \n    // Standardwerte f√ºr MOTD, falls keine vom Server geladen werden kann\n    defaultMotd: {\n      enabled: true,\n      format: 'markdown',\n      content: 'üõ†Ô∏è **BETA-VERSION: Lokaler KI-Assistent f√ºr nscale**\\n\\nDieser Assistent beantwortet Fragen zur Nutzung der nscale DMS-Software auf Basis interner Informationen.\\n\\nüîí **Wichtige Hinweise:**\\n- Alle Datenverarbeitungen erfolgen **ausschlie√ülich lokal im Landesnetz Berlin**.\\n- Es besteht **keine Verbindung zum Internet** ‚Äì Ihre Eingaben verlassen niemals das System.\\n- **Niemand au√üer Ihnen** hat Zugriff auf Ihre Eingaben oder Fragen.\\n- Die Antworten werden von einer KI generiert ‚Äì **Fehlinformationen sind m√∂glich**.\\n- Bitte geben Sie **keine sensiblen oder personenbezogenen Daten** ein.\\n\\nüß† Der Assistent befindet sich in der Erprobung und wird stetig weiterentwickelt.',\n      style: {\n        backgroundColor: '#fff3cd',\n        borderColor: '#ffeeba',\n        textColor: '#856404',\n        iconClass: \"info-circle\"\n      },\n      display: {\n        position: \"top\",\n        dismissible: true,\n        showOnStartup: false,\n        showInChat: true\n      }\n    },\n    \n    // Admin-Bearbeitungsansicht\n    adminEdit: {\n      enabled: true,\n      format: 'markdown',\n      content: '',\n      style: {\n        backgroundColor: '#fff3cd',\n        borderColor: '#ffeeba',\n        textColor: '#856404',\n        iconClass: \"info-circle\"\n      },\n      display: {\n        position: \"top\",\n        dismissible: true,\n        showOnStartup: false,\n        showInChat: true\n      }\n    },\n    \n    // Vordefinierte Farbschemata\n    colorThemes: {\n      warning: {\n        backgroundColor: '#fff3cd',\n        borderColor: '#ffeeba',\n        textColor: '#856404'\n      },\n      info: {\n        backgroundColor: '#e1ecf8',\n        borderColor: '#bee5eb',\n        textColor: '#0c5460'\n      },\n      success: {\n        backgroundColor: '#e0f5ea',\n        borderColor: '#c3e6cb',\n        textColor: '#155724'\n      },\n      danger: {\n        backgroundColor: '#f8d7da',\n        borderColor: '#f5c6cb',\n        textColor: '#721c24'\n      },\n      neutral: {\n        backgroundColor: '#f8f9fa',\n        borderColor: '#dee2e6',\n        textColor: '#495057'\n      }\n    },\n    \n    // UI-Zustand\n    selectedColorTheme: 'warning',\n    \n    // Laden-Status\n    loading: false,\n    \n    // Fehler-Status\n    error: null\n  }),\n  \n  getters: {\n    /**\n     * Pr√ºft, ob die MOTD angezeigt werden soll\n     */\n    shouldShowMotd: (state) => {\n      return state.motd && \n             state.motd.enabled && \n             !state.dismissed;\n    },\n    \n    /**\n     * Gibt den MOTD-Inhalt f√ºr die Anzeige zur√ºck\n     */\n    motdContent: (state) => {\n      return state.motd?.content || '';\n    },\n    \n    /**\n     * Gibt zur√ºck, ob der Admin Bearbeitungsmodus aktiv ist\n     */\n    isAdminEditMode: (state, getters, rootState, rootGetters) => {\n      const authStore = useAuthStore();\n      return authStore.isAdmin;\n    }\n  },\n  \n  actions: {\n    /**\n     * L√§dt die MOTD vom Server\n     */\n    async loadMotd() {\n      this.loading = true;\n      this.error = null;\n      \n      try {\n        const response = await axios.get('/api/motd');\n        this.motd = response.data;\n        \n        // Bestimme das Farbschema basierend auf der aktuellen MOTD\n        if (this.motd && this.motd.style) {\n          let matchFound = false;\n          for (const [theme, colors] of Object.entries(this.colorThemes)) {\n            if (colors.backgroundColor === this.motd.style.backgroundColor) {\n              this.selectedColorTheme = theme;\n              matchFound = true;\n              break;\n            }\n          }\n          if (!matchFound) {\n            this.selectedColorTheme = 'custom';\n          }\n        }\n        \n        console.log(\"MOTD geladen:\", this.motd);\n      } catch (error) {\n        console.error('Fehler beim Laden der MOTD:', error);\n        this.error = error.response?.data?.detail || 'MOTD konnte nicht geladen werden';\n        \n        // Bei Fehler die Standardwerte verwenden\n        this.motd = { ...this.defaultMotd };\n      } finally {\n        this.loading = false;\n      }\n    },\n    \n    /**\n     * Blendet die MOTD aus\n     */\n    setDismissed(value = true) {\n      this.dismissed = value;\n      localStorage.setItem('motdDismissed', value.toString());\n    },\n    \n    /**\n     * Setzt die MOTD zur√ºck (macht sie wieder sichtbar)\n     */\n    resetDismissed() {\n      this.dismissed = false;\n      localStorage.removeItem('motdDismissed');\n    },\n    \n    /**\n     * L√§dt die MOTD f√ºr die Admin-Bearbeitung\n     */\n    async loadMotdForEditing() {\n      const authStore = useAuthStore();\n      if (!authStore.isAdmin) return;\n      \n      this.loading = true;\n      \n      try {\n        const response = await axios.get('/api/motd');\n        // Tiefe Kopie erstellen\n        this.adminEdit = JSON.parse(JSON.stringify(response.data));\n        \n        // Bestimme das Farbschema\n        let matchFound = false;\n        for (const [theme, colors] of Object.entries(this.colorThemes)) {\n          if (colors.backgroundColor === this.adminEdit.style.backgroundColor) {\n            this.selectedColorTheme = theme;\n            matchFound = true;\n            break;\n          }\n        }\n        if (!matchFound) {\n          this.selectedColorTheme = 'custom';\n        }\n      } catch (error) {\n        console.error('Fehler beim Laden der MOTD f√ºr die Bearbeitung:', error);\n        // Bei Fehler die Standardwerte verwenden\n        this.adminEdit = { ...this.defaultMotd };\n      } finally {\n        this.loading = false;\n      }\n    },\n    \n    /**\n     * Speichert die bearbeitete MOTD\n     */\n    async saveMotd() {\n      const authStore = useAuthStore();\n      if (!authStore.isAdmin) return;\n      \n      this.loading = true;\n      this.error = null;\n      \n      try {\n        // Validierung\n        if (!this.adminEdit.content.trim()) {\n          throw new Error('Der MOTD-Inhalt darf nicht leer sein.');\n        }\n        \n        // Zum Server speichern\n        await axios.post('/api/admin/update-motd', this.adminEdit);\n        \n        // Lokale MOTD aktualisieren\n        this.motd = JSON.parse(JSON.stringify(this.adminEdit));\n        \n        // MOTD sichtbar machen f√ºr alle Benutzer\n        this.resetDismissed();\n        \n        return true;\n      } catch (error) {\n        console.error('Fehler beim Speichern der MOTD:', error);\n        this.error = error.message || 'MOTD konnte nicht gespeichert werden';\n        throw error;\n      } finally {\n        this.loading = false;\n      }\n    },\n    \n    /**\n     * Setzt die MOTD auf die Standardwerte zur√ºck\n     */\n    resetMotdToDefaults() {\n      this.adminEdit = { ...this.defaultMotd };\n      this.selectedColorTheme = 'warning';\n    },\n    \n    /**\n     * L√§dt die MOTD neu vom Server\n     */\n    async reloadMotd() {\n      const authStore = useAuthStore();\n      if (!authStore.isAdmin) return;\n      \n      this.loading = true;\n      \n      try {\n        await axios.post('/api/admin/reload-motd');\n        \n        // MOTD neu laden\n        await this.loadMotd();\n        \n        // MOTD f√ºr alle Benutzer sichtbar machen\n        this.resetDismissed();\n        \n        return true;\n      } catch (error) {\n        console.error('Fehler beim Neuladen der MOTD:', error);\n        this.error = error.response?.data?.detail || 'MOTD konnte nicht neu geladen werden';\n        throw error;\n      } finally {\n        this.loading = false;\n      }\n    },\n    \n    /**\n     * Wendet ein vordefiniertes Farbschema auf die MOTD an\n     * @param {string} themeName - Name des Farbschemas\n     */\n    applyColorTheme(themeName) {\n      if (themeName !== 'custom' && this.colorThemes[themeName]) {\n        const theme = this.colorThemes[themeName];\n        this.adminEdit.style.backgroundColor = theme.backgroundColor;\n        this.adminEdit.style.borderColor = theme.borderColor;\n        this.adminEdit.style.textColor = theme.textColor;\n      }\n      \n      this.selectedColorTheme = themeName;\n    }\n  }\n});"],"names":["useMotdStore","defineStore","state","_a","getters","rootState","rootGetters","useAuthStore","response","axios","matchFound","theme","colors","error","_b","value","themeName"],"mappings":"+GASY,MAACA,EAAeC,EAAY,OAAQ,CAC9C,MAAO,KAAO,CAEZ,KAAM,KAGN,UAAW,aAAa,QAAQ,eAAe,IAAM,QAAU,GAG/D,YAAa,CACX,QAAS,GACT,OAAQ,WACR,QAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mFACT,MAAO,CACL,gBAAiB,UACjB,YAAa,UACb,UAAW,UACX,UAAW,aACZ,EACD,QAAS,CACP,SAAU,MACV,YAAa,GACb,cAAe,GACf,WAAY,EACb,CACF,EAGD,UAAW,CACT,QAAS,GACT,OAAQ,WACR,QAAS,GACT,MAAO,CACL,gBAAiB,UACjB,YAAa,UACb,UAAW,UACX,UAAW,aACZ,EACD,QAAS,CACP,SAAU,MACV,YAAa,GACb,cAAe,GACf,WAAY,EACb,CACF,EAGD,YAAa,CACX,QAAS,CACP,gBAAiB,UACjB,YAAa,UACb,UAAW,SACZ,EACD,KAAM,CACJ,gBAAiB,UACjB,YAAa,UACb,UAAW,SACZ,EACD,QAAS,CACP,gBAAiB,UACjB,YAAa,UACb,UAAW,SACZ,EACD,OAAQ,CACN,gBAAiB,UACjB,YAAa,UACb,UAAW,SACZ,EACD,QAAS,CACP,gBAAiB,UACjB,YAAa,UACb,UAAW,SACZ,CACF,EAGD,mBAAoB,UAGpB,QAAS,GAGT,MAAO,IACX,GAEE,QAAS,CAIP,eAAiBC,GACRA,EAAM,MACNA,EAAM,KAAK,SACX,CAACA,EAAM,UAMhB,YAAcA,GAAU,OACtB,QAAOC,EAAAD,EAAM,OAAN,YAAAC,EAAY,UAAW,EAC/B,EAKD,gBAAiB,CAACD,EAAOE,EAASC,EAAWC,IACzBC,IACD,OAEpB,EAED,QAAS,CAIP,MAAM,UAAW,SACf,KAAK,QAAU,GACf,KAAK,MAAQ,KAEb,GAAI,CACF,MAAMC,EAAW,MAAMC,EAAM,IAAI,WAAW,EAI5C,GAHA,KAAK,KAAOD,EAAS,KAGjB,KAAK,MAAQ,KAAK,KAAK,MAAO,CAChC,IAAIE,EAAa,GACjB,SAAW,CAACC,EAAOC,CAAM,IAAK,OAAO,QAAQ,KAAK,WAAW,EAC3D,GAAIA,EAAO,kBAAoB,KAAK,KAAK,MAAM,gBAAiB,CAC9D,KAAK,mBAAqBD,EAC1BD,EAAa,GACb,KACD,CAEEA,IACH,KAAK,mBAAqB,SAE7B,CAED,QAAQ,IAAI,gBAAiB,KAAK,IAAI,CACvC,OAAQG,EAAO,CACd,QAAQ,MAAM,8BAA+BA,CAAK,EAClD,KAAK,QAAQC,GAAAX,EAAAU,EAAM,WAAN,YAAAV,EAAgB,OAAhB,YAAAW,EAAsB,SAAU,mCAG7C,KAAK,KAAO,CAAE,GAAG,KAAK,WAAW,CACzC,QAAgB,CACR,KAAK,QAAU,EAChB,CACF,EAKD,aAAaC,EAAQ,GAAM,CACzB,KAAK,UAAYA,EACjB,aAAa,QAAQ,gBAAiBA,EAAM,SAAU,CAAA,CACvD,EAKD,gBAAiB,CACf,KAAK,UAAY,GACjB,aAAa,WAAW,eAAe,CACxC,EAKD,MAAM,oBAAqB,CAEzB,GADkBR,IACH,QAEf,MAAK,QAAU,GAEf,GAAI,CACF,MAAMC,EAAW,MAAMC,EAAM,IAAI,WAAW,EAE5C,KAAK,UAAY,KAAK,MAAM,KAAK,UAAUD,EAAS,IAAI,CAAC,EAGzD,IAAIE,EAAa,GACjB,SAAW,CAACC,EAAOC,CAAM,IAAK,OAAO,QAAQ,KAAK,WAAW,EAC3D,GAAIA,EAAO,kBAAoB,KAAK,UAAU,MAAM,gBAAiB,CACnE,KAAK,mBAAqBD,EAC1BD,EAAa,GACb,KACD,CAEEA,IACH,KAAK,mBAAqB,SAE7B,OAAQG,EAAO,CACd,QAAQ,MAAM,kDAAmDA,CAAK,EAEtE,KAAK,UAAY,CAAE,GAAG,KAAK,WAAW,CAC9C,QAAgB,CACR,KAAK,QAAU,EAChB,EACF,EAKD,MAAM,UAAW,CAEf,GADkBN,IACH,QAEf,MAAK,QAAU,GACf,KAAK,MAAQ,KAEb,GAAI,CAEF,GAAI,CAAC,KAAK,UAAU,QAAQ,KAAI,EAC9B,MAAM,IAAI,MAAM,uCAAuC,EAIzD,aAAME,EAAM,KAAK,yBAA0B,KAAK,SAAS,EAGzD,KAAK,KAAO,KAAK,MAAM,KAAK,UAAU,KAAK,SAAS,CAAC,EAGrD,KAAK,eAAc,EAEZ,EACR,OAAQI,EAAO,CACd,cAAQ,MAAM,kCAAmCA,CAAK,EACtD,KAAK,MAAQA,EAAM,SAAW,uCACxBA,CACd,QAAgB,CACR,KAAK,QAAU,EAChB,EACF,EAKD,qBAAsB,CACpB,KAAK,UAAY,CAAE,GAAG,KAAK,WAAW,EACtC,KAAK,mBAAqB,SAC3B,EAKD,MAAM,YAAa,SAEjB,GADkBN,IACH,QAEf,MAAK,QAAU,GAEf,GAAI,CACF,aAAME,EAAM,KAAK,wBAAwB,EAGzC,MAAM,KAAK,WAGX,KAAK,eAAc,EAEZ,EACR,OAAQI,EAAO,CACd,cAAQ,MAAM,iCAAkCA,CAAK,EACrD,KAAK,QAAQC,GAAAX,EAAAU,EAAM,WAAN,YAAAV,EAAgB,OAAhB,YAAAW,EAAsB,SAAU,uCACvCD,CACd,QAAgB,CACR,KAAK,QAAU,EAChB,EACF,EAMD,gBAAgBG,EAAW,CACzB,GAAIA,IAAc,UAAY,KAAK,YAAYA,CAAS,EAAG,CACzD,MAAML,EAAQ,KAAK,YAAYK,CAAS,EACxC,KAAK,UAAU,MAAM,gBAAkBL,EAAM,gBAC7C,KAAK,UAAU,MAAM,YAAcA,EAAM,YACzC,KAAK,UAAU,MAAM,UAAYA,EAAM,SACxC,CAED,KAAK,mBAAqBK,CAC3B,CACF,CACH,CAAC"}