{"version":3,"file":"ChatView.93e27638.js","sources":["../../../src/stores/sessionStore.js","../../../src/stores/chatStore.js","../../../src/components/chat/SessionList.vue","../../../src/components/chat/MessageActions.vue","../../../src/components/chat/MessageList.vue","../../../src/components/chat/ChatInput.vue","../../../src/components/chat/SourceDialog.vue","../../../src/views/ChatView.vue"],"sourcesContent":["/**\n * Session Store für Vue.js-Implementierung\n * Verwaltet alle Chat-Sessions und deren Zustände\n */\nimport { defineStore } from 'pinia';\nimport axios from 'axios';\n\nexport const useSessionStore = defineStore('session', {\n  state: () => ({\n    sessions: [],\n    currentSessionId: null,\n    loading: false,\n    error: null,\n    pollInterval: null,\n  }),\n\n  getters: {\n    /**\n     * Gibt die aktuelle Session zurück\n     */\n    currentSession: (state) => {\n      if (!state.currentSessionId) return null;\n      return state.sessions.find(s => s.id === state.currentSessionId) || null;\n    },\n\n    /**\n     * Sortiert Sessions nach letztem Update und filtert nach Titel\n     */\n    sortedSessions: (state) => {\n      return [...state.sessions].sort((a, b) => {\n        // Nach Datum sortieren, neuste zuerst\n        return new Date(b.updated_at || b.created_at) - new Date(a.updated_at || a.created_at);\n      });\n    }\n  },\n\n  actions: {\n    /**\n     * Lädt alle Sessions des aktuellen Benutzers\n     */\n    async fetchSessions() {\n      this.loading = true;\n      this.error = null;\n\n      try {\n        const response = await axios.get('/api/sessions');\n        this.sessions = response.data.sessions || [];\n        \n        // Wenn es Sessions gibt und keine aktuelle ausgewählt ist\n        if (this.sessions.length > 0 && !this.currentSessionId) {\n          this.setCurrentSession(this.sessions[0].id);\n        }\n      } catch (error) {\n        console.error('Fehler beim Laden der Sessions:', error);\n        \n        // Bei 404 (fehlender Endpunkt) leere Session-Liste verwenden\n        if (error.response?.status === 404) {\n          this.sessions = [];\n          console.log('Sessions API-Endpunkt nicht gefunden, verwende leere Liste');\n        } else {\n          this.error = error.response?.data?.detail || 'Fehler beim Laden der Sessions';\n        }\n      } finally {\n        this.loading = false;\n      }\n    },\n\n    /**\n     * Erstellt eine neue Session\n     * @param {string} title - Titel der neuen Session\n     */\n    async createSession(title = 'Neue Unterhaltung') {\n      this.loading = true;\n      this.error = null;\n\n      try {\n        const response = await axios.post('/api/session', { title });\n        const newSession = {\n          id: response.data.session_id,\n          title: response.data.title,\n          created_at: new Date().toISOString(),\n          messages: []\n        };\n        \n        this.sessions.unshift(newSession);\n        this.setCurrentSession(newSession.id);\n        return newSession.id;\n      } catch (error) {\n        console.error('Fehler beim Erstellen einer neuen Session:', error);\n        this.error = error.response?.data?.detail || 'Fehler beim Erstellen einer neuen Session';\n        return null;\n      } finally {\n        this.loading = false;\n      }\n    },\n\n    /**\n     * Setzt die aktuelle Session\n     * @param {number} sessionId - ID der zu aktivierenden Session\n     */\n    async setCurrentSession(sessionId) {\n      if (sessionId === this.currentSessionId) return;\n\n      this.currentSessionId = sessionId;\n      \n      // Wenn die Session existiert aber keine Nachrichten hat, lade diese\n      const session = this.sessions.find(s => s.id === sessionId);\n      if (session && (!session.messages || session.messages.length === 0)) {\n        await this.fetchSessionHistory(sessionId);\n      }\n    },\n\n    /**\n     * Löscht eine Session\n     * @param {number} sessionId - ID der zu löschenden Session\n     */\n    async deleteSession(sessionId) {\n      this.loading = true;\n      this.error = null;\n\n      try {\n        await axios.delete(`/api/session/${sessionId}`);\n        \n        // Session aus der Liste entfernen\n        this.sessions = this.sessions.filter(s => s.id !== sessionId);\n        \n        // Wenn die aktuelle Session gelöscht wurde, setze eine andere aktiv\n        if (this.currentSessionId === sessionId) {\n          this.currentSessionId = this.sessions[0]?.id || null;\n        }\n        \n        return true;\n      } catch (error) {\n        console.error('Fehler beim Löschen der Session:', error);\n        this.error = error.response?.data?.detail || 'Fehler beim Löschen der Session';\n        return false;\n      } finally {\n        this.loading = false;\n      }\n    },\n\n    /**\n     * Benennt eine Session um\n     * @param {number} sessionId - ID der Session\n     * @param {string} newTitle - Neuer Titel\n     */\n    async renameSession(sessionId, newTitle) {\n      this.loading = true;\n      this.error = null;\n\n      try {\n        await axios.put(`/api/session/rename`, {\n          session_id: sessionId,\n          title: newTitle\n        });\n        \n        // Session in der Liste aktualisieren\n        const session = this.sessions.find(s => s.id === sessionId);\n        if (session) {\n          session.title = newTitle;\n        }\n        \n        return true;\n      } catch (error) {\n        console.error('Fehler beim Umbenennen der Session:', error);\n        this.error = error.response?.data?.detail || 'Fehler beim Umbenennen der Session';\n        return false;\n      } finally {\n        this.loading = false;\n      }\n    },\n\n    /**\n     * Lädt den Verlauf einer Session\n     * @param {number} sessionId - ID der Session\n     */\n    async fetchSessionHistory(sessionId) {\n      this.loading = true;\n      this.error = null;\n\n      try {\n        const response = await axios.get(`/api/session/${sessionId}`);\n        \n        // Finde die Session in unserer Liste\n        const sessionIndex = this.sessions.findIndex(s => s.id === sessionId);\n        if (sessionIndex !== -1) {\n          // Aktualisiere die Session mit den geladenen Daten\n          this.sessions[sessionIndex] = {\n            ...this.sessions[sessionIndex],\n            title: response.data.title,\n            messages: response.data.messages || []\n          };\n        }\n        \n        return response.data.messages || [];\n      } catch (error) {\n        console.error('Fehler beim Laden des Session-Verlaufs:', error);\n        this.error = error.response?.data?.detail || 'Fehler beim Laden des Session-Verlaufs';\n        return [];\n      } finally {\n        this.loading = false;\n      }\n    },\n\n    /**\n     * Aktualisiert den Titel einer Session basierend auf der ersten Nachricht\n     * @param {number} sessionId - ID der Session\n     */\n    async updateSessionTitle(sessionId) {\n      try {\n        const response = await axios.post(`/api/session/${sessionId}/update-title`);\n        \n        // Session in der Liste aktualisieren\n        const session = this.sessions.find(s => s.id === sessionId);\n        if (session && response.data.new_title) {\n          session.title = response.data.new_title;\n        }\n        \n        return true;\n      } catch (error) {\n        console.error('Fehler beim Aktualisieren des Session-Titels:', error);\n        return false;\n      }\n    },\n\n    /**\n     * Bereinigt den Store (z.B. beim Logout)\n     */\n    clearStore() {\n      this.sessions = [];\n      this.currentSessionId = null;\n      this.loading = false;\n      this.error = null;\n      \n      if (this.pollInterval) {\n        clearInterval(this.pollInterval);\n        this.pollInterval = null;\n      }\n    },\n\n    /**\n     * Startet ein Polling für neue Sessions (nützlich für parallele Tabs)\n     * @param {number} intervalMs - Polling-Intervall in Millisekunden\n     */\n    startSessionPolling(intervalMs = 30000) {\n      // Beende vorhandenes Polling\n      if (this.pollInterval) {\n        clearInterval(this.pollInterval);\n      }\n      \n      // Starte neues Polling\n      this.pollInterval = setInterval(() => {\n        this.fetchSessions();\n      }, intervalMs);\n    },\n\n    /**\n     * Stoppt das Session-Polling\n     */\n    stopSessionPolling() {\n      if (this.pollInterval) {\n        clearInterval(this.pollInterval);\n        this.pollInterval = null;\n      }\n    }\n  }\n});","/**\n * Chat Store für Vue.js-Implementierung\n * Verwaltet den Chat-Status, Nachrichten und die Kommunikation mit dem Backend\n */\nimport { defineStore } from 'pinia';\nimport axios from 'axios';\nimport { useSessionStore } from './sessionStore';\n\nexport const useChatStore = defineStore('chat', {\n  state: () => ({\n    // Aktueller Chat-Zustand\n    loading: false,\n    sending: false,\n    streaming: false,\n    streamController: null,\n    currentQuestion: '',\n    currentAnswer: '',\n    pendingQuestion: '',\n    error: null,\n    \n    // Feedback-System\n    currentFeedback: {\n      messageId: null,\n      isPositive: null,\n      comment: ''\n    },\n    \n    // Chat-Einstellungen\n    useSimpleLanguage: false,\n    useStreaming: true,\n    \n    // UI-Zustand\n    showExplanation: false,\n    currentExplanation: null,\n    showFeedbackDialog: false,\n    showSourcesDialog: false,\n    selectedSource: null,\n    \n    // Falls die Session noch nicht geladen wurde\n    pendingMessages: [],\n  }),\n\n  getters: {\n    /**\n     * Prüft, ob gerade eine Anfrage läuft und Benutzereingaben deaktiviert werden sollten\n     */\n    isProcessing: (state) => {\n      return state.sending || state.streaming || state.loading;\n    },\n    \n    /**\n     * Gibt die verfügbaren Quellen der aktuellen Antwort zurück\n     */\n    currentSources: (state) => {\n      const sessionStore = useSessionStore();\n      const currentSession = sessionStore.currentSession;\n      \n      if (!currentSession) return [];\n      \n      // Suche die letzte Antwort des Assistenten\n      const lastMessage = [...currentSession.messages]\n        .reverse()\n        .find(m => !m.is_user);\n        \n      if (!lastMessage || !lastMessage.sources) return [];\n      \n      return lastMessage.sources;\n    },\n    \n    /**\n     * Prüft, ob es aktive Chats gibt\n     */\n    hasActiveChats: () => {\n      const sessionStore = useSessionStore();\n      return sessionStore.sessions.length > 0;\n    }\n  },\n\n  actions: {\n    /**\n     * Setzt eine Frage und bereitet den Chat vor\n     * @param {string} question - Die zu stellende Frage\n     */\n    setQuestion(question) {\n      this.pendingQuestion = question;\n      this.currentFeedback = {\n        messageId: null,\n        isPositive: null,\n        comment: ''\n      };\n    },\n    \n    /**\n     * Sendet eine Frage an das Backend\n     * @param {string} question - Die zu stellende Frage (optional, falls bereits gesetzt)\n     */\n    async sendQuestion(question = null) {\n      // Benutze entweder die übergebene Frage oder die ausstehende Frage\n      const finalQuestion = question || this.pendingQuestion;\n      if (!finalQuestion.trim()) return;\n      \n      // Setze Zustand\n      this.sending = true;\n      this.error = null;\n      this.currentQuestion = finalQuestion;\n      this.pendingQuestion = '';\n      \n      const sessionStore = useSessionStore();\n      let sessionId = sessionStore.currentSessionId;\n      \n      // Wenn keine Session existiert, erstelle eine neue\n      if (!sessionId) {\n        sessionId = await sessionStore.createSession();\n        if (!sessionId) {\n          this.error = 'Fehler beim Erstellen einer neuen Session';\n          this.sending = false;\n          return;\n        }\n      }\n      \n      // Füge die Frage lokal zur Session hinzu (für sofortige Anzeige)\n      const tempUserMessage = {\n        id: Date.now(), // Temporäre ID\n        session_id: sessionId,\n        message: finalQuestion,\n        is_user: true,\n        created_at: new Date().toISOString()\n      };\n      \n      const currentSession = sessionStore.sessions.find(s => s.id === sessionId);\n      if (currentSession) {\n        // Direkt zum Store hinzufügen, falls Session existiert\n        if (!currentSession.messages) {\n          currentSession.messages = [];\n        }\n        currentSession.messages.push(tempUserMessage);\n      } else {\n        // Für später zwischenspeichern\n        this.pendingMessages.push(tempUserMessage);\n      }\n      \n      try {\n        if (this.useStreaming) {\n          // Streaming-Anfrage starten\n          await this.startStreaming(finalQuestion, sessionId);\n        } else {\n          // Normale Anfrage senden\n          const response = await axios.post('/api/question', {\n            question: finalQuestion,\n            session_id: sessionId\n          }, {\n            headers: {\n              'X-Use-Simple-Language': this.useSimpleLanguage ? 'true' : 'false'\n            }\n          });\n          \n          // Antwort verarbeiten\n          const { answer, message_id, sources } = response.data;\n          \n          // Assistenten-Antwort zur Session hinzufügen\n          const assistantMessage = {\n            id: message_id,\n            session_id: sessionId,\n            message: answer,\n            is_user: false,\n            created_at: new Date().toISOString(),\n            sources: sources || []\n          };\n          \n          if (currentSession) {\n            currentSession.messages.push(assistantMessage);\n          } else {\n            this.pendingMessages.push(assistantMessage);\n          }\n          \n          // Aktualisiere den Session-Titel nach der ersten Nachricht\n          if (currentSession?.messages.length <= 2) {\n            await sessionStore.updateSessionTitle(sessionId);\n          }\n        }\n      } catch (error) {\n        console.error('Fehler beim Senden der Frage:', error);\n        this.error = error.response?.data?.detail || 'Fehler beim Senden der Frage';\n        \n        // Fehlerantwort zur Session hinzufügen\n        const errorMessage = {\n          id: -Date.now(), // Negative temporäre ID für Fehler\n          session_id: sessionId,\n          message: `Fehler: ${this.error}`,\n          is_user: false,\n          is_error: true,\n          created_at: new Date().toISOString()\n        };\n        \n        if (currentSession) {\n          currentSession.messages.push(errorMessage);\n        } else {\n          this.pendingMessages.push(errorMessage);\n        }\n      } finally {\n        this.sending = false;\n      }\n    },\n    \n    /**\n     * Startet einen Streaming-Antwort-Prozess\n     * @param {string} question - Die zu stellende Frage\n     * @param {number} sessionId - Die Session-ID\n     */\n    async startStreaming(question, sessionId) {\n      // Setze Streaming-Zustand\n      this.streaming = true;\n      this.currentAnswer = '';\n      \n      try {\n        // URL-Parameter für Streaming-Anfrage vorbereiten\n        const params = new URLSearchParams({\n          question,\n          session_id: sessionId,\n          simple_language: this.useSimpleLanguage ? 'true' : 'false'\n        });\n        \n        // Erzeuge AbortController für die Anfrage\n        this.streamController = new AbortController();\n        const { signal } = this.streamController;\n        \n        // Hole den JWT-Token\n        const token = localStorage.getItem('auth_token');\n        \n        // EventSource für Server-Sent Events erstellen\n        const eventSource = new EventSource(`/api/question/stream?${params}`);\n        let fullAnswer = '';\n        let messageId = null;\n        let sources = [];\n        \n        // Event-Listener für Nachrichten einrichten\n        eventSource.onmessage = (event) => {\n          try {\n            if (!event.data || event.data === '[DONE]') {\n              // Streaming beendet\n              return;\n            }\n            \n            const data = JSON.parse(event.data);\n            \n            if (data.error) {\n              // Fehler vom Server\n              this.error = data.error;\n              eventSource.close();\n              this.streaming = false;\n              return;\n            }\n            \n            if (data.token) {\n              // Token für neue Nachricht\n              fullAnswer += data.token;\n              this.currentAnswer = fullAnswer;\n            }\n            \n            if (data.message_id) {\n              // Message-ID für die Antwort\n              messageId = data.message_id;\n            }\n            \n            if (data.sources) {\n              // Quellen für die Antwort\n              sources = data.sources;\n            }\n          } catch (error) {\n            console.error('Fehler beim Verarbeiten der Streaming-Antwort:', error);\n          }\n        };\n        \n        // Ereignis bei Streaming-Ende\n        eventSource.addEventListener('done', () => {\n          eventSource.close();\n          this.streaming = false;\n          \n          // Assistenten-Antwort zur Session hinzufügen, wenn fertig\n          if (fullAnswer) {\n            const sessionStore = useSessionStore();\n            const currentSession = sessionStore.sessions.find(s => s.id === sessionId);\n            \n            const assistantMessage = {\n              id: messageId || Date.now(),\n              session_id: sessionId,\n              message: fullAnswer,\n              is_user: false,\n              created_at: new Date().toISOString(),\n              sources: sources || []\n            };\n            \n            if (currentSession) {\n              if (!currentSession.messages) {\n                currentSession.messages = [];\n              }\n              currentSession.messages.push(assistantMessage);\n            } else {\n              this.pendingMessages.push(assistantMessage);\n            }\n            \n            // Aktualisiere den Session-Titel nach der ersten Nachricht\n            if (currentSession?.messages.length <= 2) {\n              sessionStore.updateSessionTitle(sessionId);\n            }\n          }\n        });\n        \n        // Ereignis bei Fehlern im Streaming\n        eventSource.onerror = (error) => {\n          console.error('EventSource-Fehler:', error);\n          eventSource.close();\n          this.streaming = false;\n          this.error = 'Verbindungsfehler beim Streaming der Antwort';\n        };\n        \n        // Auf Signal warten, um das Streaming abzubrechen\n        if (signal) {\n          signal.addEventListener('abort', () => {\n            eventSource.close();\n            this.streaming = false;\n          });\n        }\n      } catch (error) {\n        console.error('Fehler beim Streaming-Start:', error);\n        this.error = 'Fehler beim Starten des Antwort-Streams';\n        this.streaming = false;\n      }\n    },\n    \n    /**\n     * Bricht den aktuellen Streaming-Prozess ab\n     */\n    cancelStreaming() {\n      if (!this.streaming || !this.streamController) return;\n      \n      try {\n        this.streamController.abort();\n        this.streamController = null;\n      } catch (error) {\n        console.error('Fehler beim Abbrechen des Streamings:', error);\n      }\n    },\n    \n    /**\n     * Lädt eine Erklärung für eine bestimmte Nachricht\n     * @param {number} messageId - Die ID der zu erklärenden Nachricht\n     */\n    async loadExplanation(messageId) {\n      this.loading = true;\n      this.error = null;\n      \n      try {\n        const response = await axios.get(`/api/explain/${messageId}`);\n        this.currentExplanation = response.data;\n        this.showExplanation = true;\n      } catch (error) {\n        console.error('Fehler beim Laden der Erklärung:', error);\n        this.error = error.response?.data?.detail || 'Fehler beim Laden der Erklärung';\n      } finally {\n        this.loading = false;\n      }\n    },\n    \n    /**\n     * Zeigt die Quellen-Dialog an und setzt die ausgewählte Quelle\n     * @param {Object} source - Die ausgewählte Quelle\n     */\n    showSourceDetails(source) {\n      this.selectedSource = source;\n      this.showSourcesDialog = true;\n    },\n    \n    /**\n     * Sendet Feedback zu einer Assistentenantwort\n     * @param {number} messageId - Die ID der Nachricht\n     * @param {number} sessionId - Die ID der Session\n     * @param {boolean} isPositive - Positives (true) oder negatives (false) Feedback\n     * @param {string} comment - Optionaler Kommentar zum Feedback\n     */\n    async sendFeedback(messageId, sessionId, isPositive, comment = '') {\n      this.loading = true;\n      this.error = null;\n      \n      try {\n        await axios.post('/api/feedback', {\n          message_id: messageId,\n          session_id: sessionId,\n          is_positive: isPositive,\n          comment: comment\n        });\n        \n        // Feedback-Status aktualisieren\n        this.currentFeedback = {\n          messageId,\n          isPositive,\n          comment\n        };\n        \n        // Dialog schließen\n        this.showFeedbackDialog = false;\n        \n        return true;\n      } catch (error) {\n        console.error('Fehler beim Senden des Feedbacks:', error);\n        this.error = error.response?.data?.detail || 'Fehler beim Senden des Feedbacks';\n        return false;\n      } finally {\n        this.loading = false;\n      }\n    },\n    \n    /**\n     * Bereitet das Feedback-Formular für eine bestimmte Nachricht vor\n     * @param {number} messageId - Die ID der Nachricht\n     * @param {number} sessionId - Die ID der Session\n     */\n    prepareFeedback(messageId, sessionId) {\n      this.currentFeedback = {\n        messageId,\n        sessionId,\n        isPositive: null,\n        comment: ''\n      };\n      this.showFeedbackDialog = true;\n    },\n    \n    /**\n     * Ändert die Einstellung für einfache Sprache\n     * @param {boolean} value - Einfache Sprache aktivieren (true) oder deaktivieren (false)\n     */\n    setSimpleLanguage(value) {\n      this.useSimpleLanguage = !!value;\n      localStorage.setItem('use_simple_language', value ? 'true' : 'false');\n    },\n    \n    /**\n     * Ändert die Einstellung für Streaming\n     * @param {boolean} value - Streaming aktivieren (true) oder deaktivieren (false)\n     */\n    setStreaming(value) {\n      this.useStreaming = !!value;\n      localStorage.setItem('use_streaming', value ? 'true' : 'false');\n    },\n    \n    /**\n     * Lädt die Einstellungen aus dem lokalen Speicher\n     */\n    loadSettings() {\n      const simpleLanguage = localStorage.getItem('use_simple_language');\n      const streaming = localStorage.getItem('use_streaming');\n      \n      if (simpleLanguage !== null) {\n        this.useSimpleLanguage = simpleLanguage === 'true';\n      }\n      \n      if (streaming !== null) {\n        this.useStreaming = streaming === 'true';\n      }\n    },\n    \n    /**\n     * Bereinigt den Store (z.B. beim Logout)\n     */\n    clearStore() {\n      this.loading = false;\n      this.sending = false;\n      this.streaming = false;\n      this.currentQuestion = '';\n      this.currentAnswer = '';\n      this.pendingQuestion = '';\n      this.error = null;\n      this.currentFeedback = { messageId: null, isPositive: null, comment: '' };\n      this.showExplanation = false;\n      this.currentExplanation = null;\n      this.showFeedbackDialog = false;\n      this.showSourcesDialog = false;\n      this.selectedSource = null;\n      this.pendingMessages = [];\n      \n      if (this.streamController) {\n        try {\n          this.streamController.abort();\n        } catch (e) {\n          console.error('Fehler beim Abbrechen des Streamings:', e);\n        }\n        this.streamController = null;\n      }\n    }\n  }\n});","<template>\n  <div class=\"session-list\">\n    <h2 class=\"title\">Unterhaltungen</h2>\n    \n    <!-- New session button -->\n    <button @click=\"createNewSession\" class=\"new-session-btn\">\n      <i class=\"fas fa-plus\"></i>\n      Neue Unterhaltung\n    </button>\n    \n    <!-- Sessions loading state -->\n    <div v-if=\"loading\" class=\"loading-state\">\n      <div class=\"loader\"></div>\n      <p>Lade Unterhaltungen...</p>\n    </div>\n    \n    <!-- Empty sessions state -->\n    <div v-else-if=\"sessions.length === 0\" class=\"empty-state\">\n      <p>Keine Unterhaltungen vorhanden</p>\n      <p class=\"empty-note\">Starten Sie eine neue Unterhaltung mit dem Assistenten</p>\n    </div>\n    \n    <!-- Session list -->\n    <ul v-else class=\"sessions\">\n      <li \n        v-for=\"session in sortedSessions\" \n        :key=\"session.id\"\n        @click=\"selectSession(session.id)\"\n        :class=\"['session-item', { active: currentSessionId === session.id }]\"\n      >\n        <div class=\"session-title-container\">\n          <i class=\"fas fa-comment session-icon\"></i>\n          <span class=\"session-title\">{{ session.title }}</span>\n        </div>\n        \n        <button \n          @click.stop=\"confirmDeleteSession(session.id)\" \n          class=\"delete-button\"\n          title=\"Unterhaltung löschen\"\n        >\n          <i class=\"fas fa-trash-alt\"></i>\n        </button>\n      </li>\n    </ul>\n    \n    <!-- Delete confirmation modal -->\n    <div v-if=\"showDeleteModal\" class=\"delete-modal\">\n      <div class=\"modal-content\">\n        <h3>Unterhaltung löschen?</h3>\n        <p>Möchten Sie diese Unterhaltung wirklich löschen? Diese Aktion kann nicht rückgängig gemacht werden.</p>\n        \n        <div class=\"modal-actions\">\n          <button @click=\"deleteSession\" class=\"delete-confirm-btn\">\n            Löschen\n          </button>\n          <button @click=\"showDeleteModal = false\" class=\"cancel-btn\">\n            Abbrechen\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { ref, computed, onMounted, watch } from 'vue';\nimport { useSessionStore } from '@/stores/sessionStore';\n\n// Props\nconst props = defineProps({\n  currentSessionId: {\n    type: Number,\n    default: null\n  }\n});\n\n// Emits\nconst emit = defineEmits(['session-selected', 'session-created', 'session-deleted']);\n\n// Store\nconst sessionStore = useSessionStore();\n\n// State\nconst showDeleteModal = ref(false);\nconst sessionToDelete = ref(null);\n\n// Computed\nconst sessions = computed(() => sessionStore.sessions);\nconst sortedSessions = computed(() => sessionStore.sortedSessions);\nconst loading = computed(() => sessionStore.loading);\n\n// Methods\nconst selectSession = (sessionId) => {\n  if (sessionId === props.currentSessionId) return;\n  \n  sessionStore.setCurrentSession(sessionId);\n  emit('session-selected', sessionId);\n};\n\nconst createNewSession = async () => {\n  const sessionId = await sessionStore.createSession();\n  if (sessionId) {\n    emit('session-created', sessionId);\n  }\n};\n\nconst confirmDeleteSession = (sessionId) => {\n  sessionToDelete.value = sessionId;\n  showDeleteModal.value = true;\n};\n\nconst deleteSession = async () => {\n  if (!sessionToDelete.value) return;\n  \n  const success = await sessionStore.deleteSession(sessionToDelete.value);\n  if (success) {\n    emit('session-deleted', sessionToDelete.value);\n  }\n  \n  showDeleteModal.value = false;\n  sessionToDelete.value = null;\n};\n\n// Lifecycle\nonMounted(async () => {\n  // Load sessions on component mount\n  await sessionStore.fetchSessions();\n  \n  // Start polling for new sessions (useful for multi-tab)\n  sessionStore.startSessionPolling();\n});\n\n// Clean up on component unmount\nwatch(\n  () => sessionStore.sessions,\n  (newSessions) => {\n    // If current session is deleted, emit an event\n    if (props.currentSessionId && !newSessions.find(s => s.id === props.currentSessionId)) {\n      emit('session-deleted', props.currentSessionId);\n    }\n  }\n);\n</script>\n\n<style scoped>\n.session-list {\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  padding: 1rem;\n}\n\n.title {\n  font-size: 1.25rem;\n  font-weight: 500;\n  color: #1e293b;\n  margin-bottom: 1.5rem;\n}\n\n.new-session-btn {\n  background-color: #3b82f6;\n  color: white;\n  border: none;\n  padding: 0.5rem;\n  border-radius: 0.375rem;\n  margin-bottom: 1rem;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 0.5rem;\n  font-weight: 500;\n  transition: background-color 0.2s;\n}\n\n.new-session-btn:hover {\n  background-color: #2563eb;\n}\n\n.sessions {\n  list-style-type: none;\n  padding: 0;\n  margin: 0;\n  overflow-y: auto;\n  flex: 1;\n}\n\n.session-item {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 0.75rem;\n  border-radius: 0.375rem;\n  margin-bottom: 0.5rem;\n  cursor: pointer;\n  transition: all 0.2s;\n  background-color: #f8fafc;\n}\n\n.session-item:hover {\n  background-color: #f1f5f9;\n}\n\n.session-item.active {\n  background-color: #eff6ff;\n  border-left: 3px solid #3b82f6;\n}\n\n.session-title-container {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  width: calc(100% - 40px);\n  overflow: hidden;\n}\n\n.session-icon {\n  color: #64748b;\n  font-size: 0.875rem;\n}\n\n.session-title {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  font-size: 0.95rem;\n  color: #334155;\n}\n\n.delete-button {\n  opacity: 0;\n  color: #94a3b8;\n  background: transparent;\n  border: none;\n  cursor: pointer;\n  padding: 0.25rem;\n  border-radius: 0.25rem;\n  transition: all 0.2s;\n}\n\n.session-item:hover .delete-button {\n  opacity: 1;\n}\n\n.delete-button:hover {\n  color: #ef4444;\n  background-color: #fee2e2;\n}\n\n.loading-state, .empty-state {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  padding: 2rem;\n  color: #94a3b8;\n  text-align: center;\n}\n\n.loader {\n  border: 3px solid #f3f3f3;\n  border-top: 3px solid #3498db;\n  border-radius: 50%;\n  width: 24px;\n  height: 24px;\n  animation: spin 1s linear infinite;\n  margin-bottom: 1rem;\n}\n\n@keyframes spin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}\n\n.empty-note {\n  font-size: 0.875rem;\n  margin-top: 0.5rem;\n}\n\n/* Modal styles */\n.delete-modal {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: rgba(0, 0, 0, 0.5);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  z-index: 1000;\n}\n\n.modal-content {\n  background-color: white;\n  padding: 1.5rem;\n  border-radius: 0.5rem;\n  width: 90%;\n  max-width: 400px;\n  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);\n}\n\n.modal-content h3 {\n  margin-top: 0;\n  color: #1e293b;\n}\n\n.modal-actions {\n  display: flex;\n  justify-content: flex-end;\n  gap: 0.5rem;\n  margin-top: 1.5rem;\n}\n\n.delete-confirm-btn {\n  background-color: #ef4444;\n  color: white;\n  border: none;\n  padding: 0.5rem 1rem;\n  border-radius: 0.375rem;\n  cursor: pointer;\n}\n\n.delete-confirm-btn:hover {\n  background-color: #dc2626;\n}\n\n.cancel-btn {\n  background-color: #f1f5f9;\n  color: #334155;\n  border: none;\n  padding: 0.5rem 1rem;\n  border-radius: 0.375rem;\n  cursor: pointer;\n}\n\n.cancel-btn:hover {\n  background-color: #e2e8f0;\n}\n</style>","<template>\n  <div class=\"message-actions\">\n    <!-- Feedback buttons -->\n    <div class=\"feedback-buttons\">\n      <span v-if=\"message.feedback_comment\" class=\"feedback-comment\">\n        {{ message.feedback_comment }}\n      </span>\n      \n      <button \n        @click=\"submitFeedback(true)\" \n        :class=\"['feedback-button', { 'selected': message.feedback_positive === true }]\"\n        title=\"Hilfreich\"\n      >\n        <i class=\"fas fa-thumbs-up\"></i>\n      </button>\n      \n      <button \n        @click=\"submitFeedback(false)\" \n        :class=\"['feedback-button', { 'selected negative': message.feedback_positive === false }]\"\n        title=\"Nicht hilfreich\"\n      >\n        <i class=\"fas fa-thumbs-down\"></i>\n      </button>\n      \n      <button \n        v-if=\"message.feedback_positive === false\" \n        @click=\"showFeedbackDialog\"\n        class=\"feedback-button\"\n        title=\"Kommentar hinzufügen\"\n      >\n        <i class=\"fas fa-comment\"></i>\n      </button>\n    </div>\n    \n    <!-- Source reference buttons -->\n    <div v-if=\"hasSourceReferences(message.message)\" class=\"source-buttons mt-2\">\n      <button class=\"source-btn\" @click=\"$emit('show-explanation', message)\">\n        <i class=\"fas fa-info-circle\"></i>\n        Antwort erklären\n      </button>\n      \n      <button class=\"source-btn\" @click=\"$emit('show-sources', message)\">\n        <i class=\"fas fa-bookmark\"></i>\n        Quellen anzeigen\n      </button>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { ref } from 'vue';\nimport { useChatStore } from '@/stores/chatStore';\n\n// Props\nconst props = defineProps({\n  message: {\n    type: Object,\n    required: true\n  },\n  sessionId: {\n    type: Number,\n    required: true\n  }\n});\n\n// Emits\nconst emit = defineEmits(['show-sources', 'show-explanation']);\n\n// Store\nconst chatStore = useChatStore();\n\n// Methods\nconst submitFeedback = async (isPositive) => {\n  if (!props.message.id) return;\n  \n  await chatStore.sendFeedback(\n    props.message.id, \n    props.sessionId, \n    isPositive\n  );\n};\n\nconst showFeedbackDialog = () => {\n  chatStore.prepareFeedback(props.message.id, props.sessionId);\n  chatStore.showFeedbackDialog = true;\n};\n\n// Check if a message has source references\nconst hasSourceReferences = (text) => {\n  if (!text) return false;\n  return /\\[\\d+\\]/.test(text);\n};\n</script>\n\n<style scoped>\n.message-actions {\n  margin-top: 0.75rem;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n}\n\n.feedback-buttons {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n}\n\n.feedback-button {\n  background: transparent;\n  border: none;\n  color: #64748b;\n  padding: 0.25rem 0.5rem;\n  border-radius: 0.25rem;\n  cursor: pointer;\n  transition: all 0.2s;\n}\n\n.feedback-button:hover {\n  background-color: #f1f5f9;\n  color: #334155;\n}\n\n.feedback-button.selected {\n  color: #10b981;\n  background-color: #ecfdf5;\n}\n\n.feedback-button.selected.negative {\n  color: #ef4444;\n  background-color: #fef2f2;\n}\n\n.feedback-comment {\n  font-size: 0.8rem;\n  color: #64748b;\n  font-style: italic;\n  margin-right: 0.5rem;\n}\n\n.source-buttons {\n  display: flex;\n  gap: 0.5rem;\n}\n\n.source-btn {\n  font-size: 0.8rem;\n  background-color: #f1f5f9;\n  color: #475569;\n  border: none;\n  padding: 0.25rem 0.5rem;\n  border-radius: 0.25rem;\n  cursor: pointer;\n  transition: all 0.2s;\n  display: flex;\n  align-items: center;\n  gap: 0.25rem;\n}\n\n.source-btn:hover {\n  background-color: #e2e8f0;\n  color: #334155;\n}\n</style>","<template>\n  <div class=\"message-list legacy-message-list\">\n    <!-- Loading indicator -->\n    <div v-if=\"loading\" class=\"flex justify-center p-4 legacy-loading\">\n      <div class=\"loader legacy-loader\"></div>\n    </div>\n\n    <!-- Empty state -->\n    <div v-else-if=\"messages.length === 0\" class=\"empty-state\">\n      <div class=\"flex flex-col items-center justify-center text-gray-400 p-8\">\n        <i class=\"fas fa-comment-dots text-5xl text-gray-300 mb-4\"></i>\n        <h3 class=\"text-lg font-medium mb-2\">Keine Nachrichten</h3>\n        <p class=\"text-sm text-gray-500 mb-4\">Stellen Sie eine Frage, um mit dem Assistenten zu beginnen.</p>\n      </div>\n    </div>\n\n    <!-- Message list -->\n    <div v-else class=\"messages-container\">\n      <div v-for=\"(message, index) in messages\" :key=\"message.id || index\" class=\"mb-6\">\n        <!-- System message -->\n        <div v-if=\"message.is_system\" class=\"system-message\">\n          <div v-html=\"formatMessage(message.message)\" class=\"prose\"></div>\n        </div>\n        \n        <!-- User or assistant message -->\n        <div \n          v-else \n          :class=\"['message-wrapper', message.is_user ? 'user-message' : 'assistant-message']\"\n        >\n          <!-- Message content container -->\n          <div :class=\"message.is_user ? 'message-user' : 'message-assistant'\">\n            <!-- Message content -->\n            <div \n              v-if=\"message.is_user\" \n              v-html=\"formatMessage(message.message)\" \n              class=\"prose\"\n            ></div>\n            <div \n              v-else \n              v-html=\"formatMessageWithSources(message.message)\" \n              class=\"prose\"\n            ></div>\n            \n            <!-- Interactive elements (feedback, sources) for assistant messages -->\n            <MessageActions \n              v-if=\"!message.is_user && !isStreaming\" \n              :message=\"message\"\n              :session-id=\"sessionId\"\n              @show-sources=\"$emit('show-sources', message)\"\n              @show-explanation=\"$emit('show-explanation', message)\"\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { computed } from 'vue';\nimport { marked } from 'marked';\nimport { useChatStore } from '@/stores/chatStore';\nimport MessageActions from './MessageActions.vue';\n\n// Props\nconst props = defineProps({\n  messages: {\n    type: Array,\n    default: () => []\n  },\n  sessionId: {\n    type: Number,\n    default: null\n  },\n  loading: {\n    type: Boolean,\n    default: false\n  },\n  isStreaming: {\n    type: Boolean,\n    default: false\n  }\n});\n\n// Emits\nconst emit = defineEmits(['show-sources', 'show-explanation']);\n\n// Store\nconst chatStore = useChatStore();\n\n// Methods\nconst formatMessage = (text) => {\n  if (!text) return '';\n  \n  // Sanitize and format markdown using marked.js\n  return marked.parse(text, {\n    gfm: true,             // GitHub Flavored Markdown\n    breaks: true,          // Convert line breaks to <br>\n    sanitize: true,        // Sanitize HTML\n    smartypants: true,     // Typographic punctuation\n    highlight: function(code, lang) {\n      // Here you could integrate a syntax highlighter\n      return code;\n    }\n  });\n};\n\n// Format message with source references highlighted\nconst formatMessageWithSources = (text) => {\n  if (!text) return '';\n  \n  // Format markdown first\n  let formattedText = formatMessage(text);\n  \n  // Replace source references with highlighted spans\n  // Example: [1] -> <span class=\"source-reference\" data-source-id=\"1\">[1]</span>\n  formattedText = formattedText.replace(\n    /\\[(\\d+)\\]/g, \n    '<span class=\"source-reference\" data-source-id=\"$1\">[$1]</span>'\n  );\n  \n  return formattedText;\n};\n\n// Check if a message has source references\nconst hasSourceReferences = (text) => {\n  if (!text) return false;\n  return /\\[\\d+\\]/.test(text);\n};\n</script>\n\n<style scoped>\n.message-list {\n  display: flex;\n  flex-direction: column;\n  overflow-y: auto;\n  height: 100%;\n  padding: 1rem;\n}\n\n.message-wrapper {\n  display: flex;\n  margin-bottom: 1rem;\n}\n\n.message-user {\n  background-color: #e9f5ff;\n  border-radius: 0.5rem;\n  padding: 1rem;\n  max-width: 85%;\n  margin-left: auto;\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);\n}\n\n.message-assistant {\n  background-color: #f9f9f9;\n  border-radius: 0.5rem;\n  padding: 1rem;\n  max-width: 85%;\n  margin-right: auto;\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);\n}\n\n.system-message {\n  background-color: #fffde7;\n  border-left: 4px solid #ffd600;\n  padding: 0.75rem;\n  margin: 1rem 0;\n  font-style: italic;\n  color: #5d4037;\n}\n\n.loader {\n  border: 3px solid #f3f3f3;\n  border-top: 3px solid #3498db;\n  border-radius: 50%;\n  width: 24px;\n  height: 24px;\n  animation: spin 1s linear infinite;\n}\n\n@keyframes spin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}\n\n/* Source reference styling */\n:deep(.source-reference) {\n  background-color: #e3f2fd;\n  color: #1976d2;\n  padding: 0.1rem 0.3rem;\n  border-radius: 0.25rem;\n  font-weight: 500;\n  cursor: pointer;\n  transition: background-color 0.2s;\n}\n\n:deep(.source-reference:hover) {\n  background-color: #bbdefb;\n}\n\n/* Prose styling for markdown */\n:deep(.prose) {\n  font-size: 0.95rem;\n}\n\n:deep(.prose pre) {\n  background-color: #2d3748;\n  color: #e2e8f0;\n  padding: 1rem;\n  border-radius: 0.375rem;\n  overflow-x: auto;\n}\n\n:deep(.prose code) {\n  background-color: #edf2f7;\n  color: #2d3748;\n  padding: 0.2rem 0.4rem;\n  border-radius: 0.25rem;\n  font-family: monospace;\n}\n\n:deep(.prose pre code) {\n  background-color: transparent;\n  color: inherit;\n  padding: 0;\n}\n</style>","<template>\n  <div class=\"chat-input\">\n    <form @submit.prevent=\"sendQuestion\" class=\"chat-form\">\n      <input\n        v-model=\"questionText\"\n        class=\"input-field\"\n        type=\"text\"\n        placeholder=\"Stellen Sie Ihre Frage zur nscale DMS-Software...\"\n        :disabled=\"disabled || isLoading\"\n        ref=\"inputRef\"\n      />\n      \n      <button\n        type=\"submit\"\n        class=\"send-button\"\n        :disabled=\"disabled || isLoading || !questionText\"\n      >\n        <span v-if=\"isLoading\">\n          <i class=\"fas fa-spinner fa-spin mr-2\"></i>\n          Wird gesendet...\n        </span>\n        <span v-else>\n          <i class=\"fas fa-paper-plane mr-2\"></i>\n          Senden\n        </span>\n      </button>\n    </form>\n    \n    <!-- Simple language toggle -->\n    <div class=\"settings-row\">\n      <div class=\"toggle-option\">\n        <input\n          type=\"checkbox\"\n          id=\"simple-language\"\n          v-model=\"useSimpleLanguage\"\n          @change=\"updateSimpleLanguageSetting\"\n        />\n        <label for=\"simple-language\">Einfache Sprache verwenden</label>\n      </div>\n      \n      <!-- Streaming toggle -->\n      <div class=\"toggle-option\">\n        <input\n          type=\"checkbox\"\n          id=\"streaming\"\n          v-model=\"useStreaming\"\n          @change=\"updateStreamingSetting\"\n        />\n        <label for=\"streaming\">Live-Streaming der Antwort</label>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { ref, computed, watch, onMounted } from 'vue';\nimport { useChatStore } from '@/stores/chatStore';\n\n// Props\nconst props = defineProps({\n  disabled: {\n    type: Boolean,\n    default: false\n  },\n  isLoading: {\n    type: Boolean,\n    default: false\n  }\n});\n\n// Emits\nconst emit = defineEmits(['question-sent']);\n\n// Store\nconst chatStore = useChatStore();\n\n// Refs\nconst questionText = ref('');\nconst inputRef = ref(null);\nconst useSimpleLanguage = ref(chatStore.useSimpleLanguage);\nconst useStreaming = ref(chatStore.useStreaming);\n\n// Methods\nconst sendQuestion = async () => {\n  if (!questionText.value.trim() || props.disabled || props.isLoading) {\n    return;\n  }\n  \n  // Set the question in the store\n  chatStore.setQuestion(questionText.value);\n  \n  // Send question to the server\n  await chatStore.sendQuestion();\n  \n  // Emit event to parent\n  emit('question-sent', questionText.value);\n  \n  // Clear input\n  questionText.value = '';\n  \n  // Focus on input again\n  setTimeout(() => {\n    if (inputRef.value) {\n      inputRef.value.focus();\n    }\n  }, 100);\n};\n\n// Update settings in the store\nconst updateSimpleLanguageSetting = () => {\n  chatStore.setSimpleLanguage(useSimpleLanguage.value);\n};\n\nconst updateStreamingSetting = () => {\n  chatStore.setStreaming(useStreaming.value);\n};\n\n// Load settings when component mounts\nonMounted(() => {\n  chatStore.loadSettings();\n  useSimpleLanguage.value = chatStore.useSimpleLanguage;\n  useStreaming.value = chatStore.useStreaming;\n});\n\n// Watch for changes in the store\nwatch(() => chatStore.useSimpleLanguage, (newVal) => {\n  useSimpleLanguage.value = newVal;\n});\n\nwatch(() => chatStore.useStreaming, (newVal) => {\n  useStreaming.value = newVal;\n});\n</script>\n\n<style scoped>\n.chat-input {\n  border-top: 1px solid #e2e8f0;\n  padding: 1rem;\n  background-color: #fff;\n  border-bottom-left-radius: 0.5rem;\n  border-bottom-right-radius: 0.5rem;\n}\n\n.chat-form {\n  display: flex;\n  gap: 0.75rem;\n}\n\n.input-field {\n  flex: 1;\n  padding: 0.75rem 1rem;\n  border: 1px solid #e2e8f0;\n  border-radius: 0.375rem;\n  font-size: 0.95rem;\n  outline: none;\n  transition: all 0.2s;\n}\n\n.input-field:focus {\n  border-color: #3b82f6;\n  box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.2);\n}\n\n.input-field:disabled {\n  background-color: #f8fafc;\n  cursor: not-allowed;\n}\n\n.send-button {\n  background-color: #3b82f6;\n  color: white;\n  border: none;\n  padding: 0.75rem 1.25rem;\n  border-radius: 0.375rem;\n  font-weight: 500;\n  cursor: pointer;\n  transition: all 0.2s;\n  min-width: 100px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.send-button:hover:not(:disabled) {\n  background-color: #2563eb;\n}\n\n.send-button:disabled {\n  background-color: #cbd5e1;\n  cursor: not-allowed;\n}\n\n.settings-row {\n  display: flex;\n  margin-top: 0.75rem;\n  gap: 2rem;\n  padding-top: 0.5rem;\n  border-top: 1px dashed #e2e8f0;\n}\n\n.toggle-option {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  font-size: 0.85rem;\n  color: #64748b;\n}\n\n.toggle-option input[type=\"checkbox\"] {\n  accent-color: #3b82f6;\n}\n</style>","<template>\n  <div v-if=\"show\" class=\"source-dialog-overlay\" @click=\"closeOnBackdrop ? $emit('close') : null\">\n    <div class=\"source-dialog\" @click.stop>\n      <div class=\"dialog-header\">\n        <h3>{{ title }}</h3>\n        <button class=\"close-button\" @click=\"$emit('close')\">\n          <i class=\"fas fa-times\"></i>\n        </button>\n      </div>\n      \n      <div class=\"dialog-content\">\n        <div v-if=\"loading\" class=\"loading-state\">\n          <div class=\"loader\"></div>\n          <p>Lade Informationen...</p>\n        </div>\n        \n        <template v-else>\n          <!-- Source details view -->\n          <template v-if=\"source\">\n            <div class=\"source-details\">\n              <h4 class=\"source-title\">{{ source.title }}</h4>\n              \n              <div class=\"source-metadata\">\n                <div class=\"metadata-item\">\n                  <span class=\"metadata-label\">Quelle:</span>\n                  <span class=\"metadata-value\">{{ source.document }}</span>\n                </div>\n                \n                <div class=\"metadata-item\">\n                  <span class=\"metadata-label\">Relevanz:</span>\n                  <span class=\"metadata-value\">{{ formatRelevance(source.relevance) }}</span>\n                </div>\n                \n                <div class=\"metadata-item\">\n                  <span class=\"metadata-label\">Zuletzt aktualisiert:</span>\n                  <span class=\"metadata-value\">{{ formatDate(source.updated) }}</span>\n                </div>\n              </div>\n              \n              <div class=\"source-content\">\n                <div class=\"content-label\">Inhalt:</div>\n                <div class=\"content-text\" v-html=\"formatContent(source.content)\"></div>\n              </div>\n            </div>\n          </template>\n          \n          <!-- Sources list view -->\n          <template v-else-if=\"sources && sources.length > 0\">\n            <ul class=\"sources-list\">\n              <li \n                v-for=\"(src, index) in sources\" \n                :key=\"index\"\n                class=\"source-item\"\n                @click=\"$emit('select-source', src)\"\n              >\n                <div class=\"source-item-title\">\n                  <span class=\"source-number\">[{{ index + 1 }}]</span>\n                  <span class=\"source-name\">{{ src.title || src.document }}</span>\n                </div>\n                <div class=\"source-item-preview\">\n                  {{ truncate(src.content, 120) }}\n                </div>\n                <div class=\"source-item-metadata\">\n                  <span class=\"relevance-badge\" :style=\"getRelevanceStyle(src.relevance)\">\n                    {{ formatRelevance(src.relevance) }}\n                  </span>\n                </div>\n              </li>\n            </ul>\n          </template>\n          \n          <!-- Explanation view -->\n          <template v-else-if=\"explanation\">\n            <div class=\"explanation-content\">\n              <h4 class=\"explanation-title\">Erklärung der Antwort</h4>\n              \n              <div class=\"explanation-text\" v-html=\"formatContent(explanation.explanation)\"></div>\n              \n              <div v-if=\"explanation.sources && explanation.sources.length > 0\" class=\"explanation-sources\">\n                <h4 class=\"explanation-subtitle\">Verwendete Quellen</h4>\n                <ul class=\"explanation-sources-list\">\n                  <li \n                    v-for=\"(src, index) in explanation.sources\" \n                    :key=\"index\"\n                    class=\"explanation-source-item\"\n                    @click=\"$emit('select-source', src)\"\n                  >\n                    <span class=\"source-number\">[{{ index + 1 }}]</span>\n                    <span class=\"source-name\">{{ src.title || src.document }}</span>\n                  </li>\n                </ul>\n              </div>\n            </div>\n          </template>\n          \n          <!-- Empty state -->\n          <div v-else class=\"empty-state\">\n            <p>Keine Informationen verfügbar</p>\n          </div>\n        </template>\n      </div>\n      \n      <div class=\"dialog-footer\">\n        <button class=\"back-button\" v-if=\"source || explanation\" @click=\"$emit('back')\">\n          <i class=\"fas fa-arrow-left\"></i>\n          Zurück zur Übersicht\n        </button>\n        <button class=\"close-button-text\" @click=\"$emit('close')\">\n          Schließen\n        </button>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { computed } from 'vue';\nimport { marked } from 'marked';\n\n// Props\nconst props = defineProps({\n  show: {\n    type: Boolean,\n    default: false\n  },\n  title: {\n    type: String,\n    default: 'Quelleninformationen'\n  },\n  sources: {\n    type: Array,\n    default: () => []\n  },\n  source: {\n    type: Object,\n    default: null\n  },\n  explanation: {\n    type: Object,\n    default: null\n  },\n  loading: {\n    type: Boolean,\n    default: false\n  },\n  closeOnBackdrop: {\n    type: Boolean,\n    default: true\n  }\n});\n\n// Emits\nconst emit = defineEmits(['close', 'back', 'select-source']);\n\n// Format relevance score (0-100)\nconst formatRelevance = (score) => {\n  if (score === undefined || score === null) return 'Unbekannt';\n  \n  const relevance = Math.round(score * 100);\n  \n  if (relevance >= 90) return 'Sehr hoch';\n  if (relevance >= 75) return 'Hoch';\n  if (relevance >= 60) return 'Mittel';\n  if (relevance >= 40) return 'Niedrig';\n  return 'Sehr niedrig';\n};\n\n// Get color style based on relevance\nconst getRelevanceStyle = (score) => {\n  if (score === undefined || score === null) return {};\n  \n  const relevance = Math.round(score * 100);\n  \n  if (relevance >= 90) return { backgroundColor: '#dcfce7', color: '#166534' };\n  if (relevance >= 75) return { backgroundColor: '#d1fae5', color: '#065f46' };\n  if (relevance >= 60) return { backgroundColor: '#ecfdf5', color: '#047857' };\n  if (relevance >= 40) return { backgroundColor: '#f0fdfa', color: '#0f766e' };\n  return { backgroundColor: '#eff6ff', color: '#1d4ed8' };\n};\n\n// Format date string\nconst formatDate = (dateString) => {\n  if (!dateString) return 'Unbekannt';\n  \n  try {\n    const date = new Date(dateString);\n    return date.toLocaleString('de-DE', {\n      day: '2-digit',\n      month: '2-digit',\n      year: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  } catch (e) {\n    return dateString;\n  }\n};\n\n// Format content with markdown\nconst formatContent = (text) => {\n  if (!text) return '';\n  \n  return marked.parse(text, {\n    gfm: true,\n    breaks: true,\n    sanitize: true\n  });\n};\n\n// Truncate text with ellipsis\nconst truncate = (text, length) => {\n  if (!text) return '';\n  if (text.length <= length) return text;\n  \n  return text.substring(0, length) + '...';\n};\n</script>\n\n<style scoped>\n.source-dialog-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: rgba(0, 0, 0, 0.5);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  z-index: 1000;\n}\n\n.source-dialog {\n  background-color: white;\n  border-radius: 0.5rem;\n  width: 90%;\n  max-width: 700px;\n  max-height: 80vh;\n  display: flex;\n  flex-direction: column;\n  box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);\n}\n\n.dialog-header {\n  padding: 1rem 1.5rem;\n  border-bottom: 1px solid #e2e8f0;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.dialog-header h3 {\n  margin: 0;\n  color: #1e293b;\n  font-size: 1.25rem;\n  font-weight: 600;\n}\n\n.close-button {\n  background: transparent;\n  border: none;\n  color: #64748b;\n  cursor: pointer;\n  font-size: 1rem;\n  padding: 0.25rem;\n  border-radius: 0.25rem;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.close-button:hover {\n  background-color: #f1f5f9;\n  color: #334155;\n}\n\n.dialog-content {\n  padding: 1.5rem;\n  overflow-y: auto;\n  flex: 1;\n}\n\n.dialog-footer {\n  padding: 1rem 1.5rem;\n  border-top: 1px solid #e2e8f0;\n  display: flex;\n  justify-content: flex-end;\n  gap: 0.75rem;\n}\n\n/* Source details styles */\n.source-details {\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n}\n\n.source-title {\n  margin: 0 0 0.5rem 0;\n  color: #1e293b;\n  font-size: 1.125rem;\n  font-weight: 600;\n}\n\n.source-metadata {\n  display: flex;\n  flex-direction: column;\n  gap: 0.5rem;\n  background-color: #f8fafc;\n  padding: 0.75rem;\n  border-radius: 0.375rem;\n}\n\n.metadata-item {\n  display: flex;\n  font-size: 0.875rem;\n}\n\n.metadata-label {\n  font-weight: 500;\n  color: #475569;\n  width: 160px;\n  flex-shrink: 0;\n}\n\n.metadata-value {\n  color: #1e293b;\n}\n\n.source-content {\n  display: flex;\n  flex-direction: column;\n  gap: 0.5rem;\n}\n\n.content-label {\n  font-weight: 500;\n  color: #475569;\n  font-size: 0.875rem;\n}\n\n.content-text {\n  padding: 0.75rem;\n  border: 1px solid #e2e8f0;\n  border-radius: 0.375rem;\n  background-color: #f8fafc;\n  font-size: 0.95rem;\n  line-height: 1.5;\n  max-height: 300px;\n  overflow-y: auto;\n}\n\n/* Sources list styles */\n.sources-list {\n  list-style-type: none;\n  padding: 0;\n  margin: 0;\n  display: flex;\n  flex-direction: column;\n  gap: 0.75rem;\n}\n\n.source-item {\n  background-color: #f8fafc;\n  border: 1px solid #e2e8f0;\n  border-radius: 0.375rem;\n  padding: 0.75rem;\n  cursor: pointer;\n  transition: all 0.2s;\n}\n\n.source-item:hover {\n  background-color: #f1f5f9;\n  border-color: #cbd5e1;\n}\n\n.source-item-title {\n  font-weight: 500;\n  color: #1e293b;\n  margin-bottom: 0.25rem;\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n}\n\n.source-number {\n  background-color: #e0f2fe;\n  color: #0369a1;\n  padding: 0.1rem 0.4rem;\n  border-radius: 0.25rem;\n  font-size: 0.75rem;\n  font-weight: 600;\n}\n\n.source-item-preview {\n  font-size: 0.875rem;\n  color: #475569;\n  margin-bottom: 0.5rem;\n}\n\n.source-item-metadata {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  justify-content: flex-end;\n}\n\n.relevance-badge {\n  font-size: 0.75rem;\n  padding: 0.125rem 0.5rem;\n  border-radius: 1rem;\n  background-color: #dbeafe;\n  color: #2563eb;\n  font-weight: 500;\n}\n\n/* Explanation styles */\n.explanation-content {\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n}\n\n.explanation-title, .explanation-subtitle {\n  margin: 0 0 0.5rem 0;\n  color: #1e293b;\n  font-weight: 600;\n}\n\n.explanation-text {\n  font-size: 0.95rem;\n  line-height: 1.5;\n  color: #334155;\n  background-color: #f8fafc;\n  padding: 0.75rem;\n  border-radius: 0.375rem;\n  border: 1px solid #e2e8f0;\n}\n\n.explanation-sources-list {\n  list-style-type: none;\n  padding: 0;\n  margin: 0;\n  display: flex;\n  flex-direction: column;\n  gap: 0.5rem;\n}\n\n.explanation-source-item {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  padding: 0.5rem;\n  background-color: #f8fafc;\n  border-radius: 0.375rem;\n  cursor: pointer;\n  transition: background-color 0.2s;\n}\n\n.explanation-source-item:hover {\n  background-color: #f1f5f9;\n}\n\n/* Loading and empty states */\n.loading-state, .empty-state {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  padding: 2rem;\n  color: #94a3b8;\n  text-align: center;\n}\n\n.loader {\n  border: 3px solid #f3f3f3;\n  border-top: 3px solid #3498db;\n  border-radius: 50%;\n  width: 24px;\n  height: 24px;\n  animation: spin 1s linear infinite;\n  margin-bottom: 1rem;\n}\n\n@keyframes spin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}\n\n/* Footer buttons */\n.back-button, .close-button-text {\n  padding: 0.5rem 1rem;\n  border-radius: 0.375rem;\n  cursor: pointer;\n  font-size: 0.875rem;\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n}\n\n.back-button {\n  background-color: #eff6ff;\n  color: #2563eb;\n  border: none;\n}\n\n.back-button:hover {\n  background-color: #dbeafe;\n}\n\n.close-button-text {\n  background-color: #f1f5f9;\n  color: #475569;\n  border: none;\n}\n\n.close-button-text:hover {\n  background-color: #e2e8f0;\n  color: #334155;\n}\n</style>","<template>\n  <div class=\"chat-view legacy-chat-view\">\n    <div class=\"chat-container legacy-chat-container\">\n      <!-- Sessions sidebar -->\n      <aside class=\"sessions-sidebar nscale-sidebar legacy-sidebar\">\n        <SessionList \n          :current-session-id=\"currentSessionId\"\n          @session-selected=\"handleSessionSelected\"\n          @session-created=\"handleSessionCreated\"\n          @session-deleted=\"handleSessionDeleted\"\n        />\n      </aside>\n      \n      <!-- Main chat area -->\n      <main class=\"chat-main legacy-chat-main\">\n        <div v-if=\"!currentSessionId\" class=\"no-session legacy-no-session\">\n          <!-- MOTD Banner für Startseite (wenn aktiviert) -->\n          <div \n            v-if=\"motd && motd.enabled && motd.display.showOnStartup && !motdDismissed\" \n            class=\"motd-banner motd-banner-startup\"\n            :style=\"{\n              backgroundColor: motd.style.backgroundColor,\n              borderColor: motd.style.borderColor,\n              color: motd.style.textColor,\n              border: '1px solid ' + motd.style.borderColor\n            }\"\n          >\n            <div class=\"motd-inner\">\n              <div v-if=\"motd.style.iconClass\" class=\"motd-icon\">\n                <i :class=\"['fas', `fa-${motd.style.iconClass}`]\"></i>\n              </div>\n              <div v-html=\"formatMotdContent(motd.content)\" class=\"motd-content\"></div>\n              <button \n                v-if=\"motd.display.dismissible\" \n                @click=\"dismissMotd\" \n                class=\"dismiss-btn\"\n                :style=\"{ color: motd.style.textColor }\"\n                title=\"Nachricht ausblenden\"\n              >\n                <i class=\"fas fa-times\"></i>\n              </button>\n            </div>\n          </div>\n          \n          <div class=\"empty-state\">\n            <i class=\"fas fa-comment-dots text-5xl text-gray-300 mb-4\"></i>\n            <h3 class=\"text-lg font-medium mb-2\">Keine Unterhaltung ausgewählt</h3>\n            <p class=\"text-sm text-gray-500 mb-4\">Wählen Sie eine Unterhaltung aus der Seitenleiste oder starten Sie eine neue.</p>\n            <button @click=\"createNewSession\" class=\"new-session-btn\">\n              <i class=\"fas fa-plus mr-2\"></i>\n              Neue Unterhaltung starten\n            </button>\n          </div>\n        </div>\n        \n        <div v-else class=\"chat-content\">\n          <!-- MOTD Banner (if enabled) -->\n          <div \n            v-if=\"motd && motd.enabled && motd.display.showInChat && !motdDismissed\" \n            class=\"motd-banner\"\n            :style=\"{\n              backgroundColor: motd.style.backgroundColor,\n              borderColor: motd.style.borderColor,\n              color: motd.style.textColor,\n              border: '1px solid ' + motd.style.borderColor\n            }\"\n          >\n            <div class=\"motd-inner\">\n              <div v-if=\"motd.style.iconClass\" class=\"motd-icon\">\n                <i :class=\"['fas', `fa-${motd.style.iconClass}`]\"></i>\n              </div>\n              <div v-html=\"formatMotdContent(motd.content)\" class=\"motd-content\"></div>\n              <button \n                v-if=\"motd.display.dismissible\" \n                @click=\"dismissMotd\" \n                class=\"dismiss-btn\"\n                :style=\"{ color: motd.style.textColor }\"\n                title=\"Nachricht ausblenden\"\n              >\n                <i class=\"fas fa-times\"></i>\n              </button>\n            </div>\n          </div>\n          \n          <!-- Messages list with scroll container -->\n          <div class=\"messages-container\" ref=\"messagesContainer\">\n            <MessageList \n              :messages=\"currentMessages\" \n              :session-id=\"currentSessionId\"\n              :loading=\"loading\"\n              :is-streaming=\"isStreaming\"\n              @show-sources=\"handleShowSources\"\n              @show-explanation=\"handleShowExplanation\"\n            />\n          </div>\n          \n          <!-- Chat input area -->\n          <div class=\"input-container\">\n            <ChatInput \n              :disabled=\"!currentSessionId || isProcessing\"\n              :is-loading=\"isProcessing\"\n              @question-sent=\"handleQuestionSent\"\n            />\n          </div>\n        </div>\n      </main>\n    </div>\n    \n    <!-- Source Dialog -->\n    <SourceDialog\n      :show=\"showSourceDialog\"\n      :title=\"sourceDialogTitle\"\n      :sources=\"sourcesList\"\n      :source=\"selectedSource\"\n      :explanation=\"currentExplanation\"\n      :loading=\"sourceDialogLoading\"\n      @close=\"closeSourceDialog\"\n      @back=\"backToSourcesList\"\n      @select-source=\"selectSource\"\n    />\n    \n    <!-- Feedback Dialog -->\n    <div v-if=\"showFeedbackDialog\" class=\"feedback-dialog-overlay\" @click=\"closeFeedbackDialog\">\n      <div class=\"feedback-dialog\" @click.stop>\n        <div class=\"dialog-header\">\n          <h3>Feedback geben</h3>\n          <button class=\"close-button\" @click=\"closeFeedbackDialog\">×</button>\n        </div>\n        \n        <div class=\"dialog-content\">\n          <p class=\"feedback-prompt\">Bitte teilen Sie uns mit, warum diese Antwort nicht hilfreich war:</p>\n          \n          <textarea \n            v-model=\"feedbackComment\" \n            class=\"feedback-textarea\"\n            placeholder=\"Ihr Feedback zur Antwort...\"\n            rows=\"4\"\n          ></textarea>\n        </div>\n        \n        <div class=\"dialog-footer\">\n          <button \n            @click=\"submitFeedbackWithComment\" \n            class=\"submit-button\"\n            :disabled=\"isProcessing\"\n          >\n            <span v-if=\"isProcessing\">\n              <i class=\"fas fa-spinner fa-spin mr-2\"></i>\n              Wird gesendet...\n            </span>\n            <span v-else>Feedback senden</span>\n          </button>\n          <button @click=\"closeFeedbackDialog\" class=\"cancel-button\">Abbrechen</button>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { ref, computed, watch, nextTick, onMounted, onBeforeMount } from 'vue';\nimport { useChatStore } from '@/stores/chatStore';\nimport { useSessionStore } from '@/stores/sessionStore';\nimport { useMotdStore } from '@/stores/motdStore';\nimport { marked } from 'marked';\nimport DOMPurify from 'dompurify';\n\n// Components\nimport SessionList from '@/components/chat/SessionList.vue';\nimport MessageList from '@/components/chat/MessageList.vue';\nimport ChatInput from '@/components/chat/ChatInput.vue';\nimport SourceDialog from '@/components/chat/SourceDialog.vue';\n\n// Stores\nconst chatStore = useChatStore();\nconst sessionStore = useSessionStore();\nconst motdStore = useMotdStore();\n\n// Refs\nconst messagesContainer = ref(null);\nconst feedbackComment = ref('');\n\n// Computed properties\nconst currentSessionId = computed(() => sessionStore.currentSessionId);\nconst currentSession = computed(() => sessionStore.currentSession);\nconst currentMessages = computed(() => currentSession.value?.messages || []);\nconst isProcessing = computed(() => chatStore.isProcessing);\nconst isStreaming = computed(() => chatStore.streaming);\nconst loading = computed(() => sessionStore.loading || chatStore.loading);\nconst showFeedbackDialog = computed(() => chatStore.showFeedbackDialog);\nconst currentFeedback = computed(() => chatStore.currentFeedback);\n\n// Source Dialog state\nconst showSourceDialog = ref(false);\nconst sourceDialogTitle = ref('Quelleninformationen');\nconst sourcesList = ref([]);\nconst selectedSource = ref(null);\nconst currentExplanation = ref(null);\nconst sourceDialogLoading = ref(false);\n\n// MOTD state\nconst motd = computed(() => motdStore.motd);\nconst motdDismissed = computed(() => motdStore.dismissed);\n\n// Methods\nconst handleSessionSelected = (sessionId) => {\n  scrollToBottom();\n};\n\nconst handleSessionCreated = (sessionId) => {\n  scrollToBottom();\n};\n\nconst handleSessionDeleted = (sessionId) => {\n  // Handle when current session is deleted\n  if (sessionId === currentSessionId.value) {\n    // If there are other sessions, the store will automatically select the first one\n    // We just need to make sure the UI updates\n    nextTick(() => {\n      scrollToBottom();\n    });\n  }\n};\n\nconst createNewSession = async () => {\n  const sessionId = await sessionStore.createSession();\n  if (sessionId) {\n    scrollToBottom();\n  }\n};\n\nconst handleQuestionSent = (question) => {\n  // Auto-scroll to bottom after sending a question\n  nextTick(() => {\n    scrollToBottom();\n  });\n};\n\nconst scrollToBottom = () => {\n  nextTick(() => {\n    if (messagesContainer.value) {\n      messagesContainer.value.scrollTop = messagesContainer.value.scrollHeight;\n    }\n  });\n};\n\n// Source Dialog methods\nconst handleShowSources = (message) => {\n  sourceDialogLoading.value = true;\n  sourceDialogTitle.value = 'Quellenreferenzen';\n  showSourceDialog.value = true;\n  selectedSource.value = null;\n  currentExplanation.value = null;\n  \n  // Extract sources from the message\n  if (message.sources && message.sources.length > 0) {\n    sourcesList.value = message.sources;\n  } else {\n    sourcesList.value = [];\n  }\n  \n  sourceDialogLoading.value = false;\n};\n\nconst handleShowExplanation = async (message) => {\n  if (!message || !message.id) return;\n  \n  sourceDialogLoading.value = true;\n  sourceDialogTitle.value = 'Antwort-Erklärung';\n  showSourceDialog.value = true;\n  selectedSource.value = null;\n  sourcesList.value = [];\n  \n  try {\n    await chatStore.loadExplanation(message.id);\n    currentExplanation.value = chatStore.currentExplanation;\n  } catch (error) {\n    console.error('Fehler beim Laden der Erklärung:', error);\n    currentExplanation.value = null;\n  } finally {\n    sourceDialogLoading.value = false;\n  }\n};\n\nconst selectSource = (source) => {\n  selectedSource.value = source;\n  sourcesList.value = [];\n  sourceDialogTitle.value = 'Quellendetails';\n};\n\nconst backToSourcesList = () => {\n  selectedSource.value = null;\n  currentExplanation.value = null;\n  sourceDialogTitle.value = 'Quellenreferenzen';\n};\n\nconst closeSourceDialog = () => {\n  showSourceDialog.value = false;\n  selectedSource.value = null;\n  sourcesList.value = [];\n  currentExplanation.value = null;\n};\n\n// Feedback dialog methods\nconst submitFeedbackWithComment = async () => {\n  if (!currentFeedback.value.messageId || !feedbackComment.value.trim()) return;\n  \n  await chatStore.sendFeedback(\n    currentFeedback.value.messageId,\n    currentSessionId.value,\n    false,\n    feedbackComment.value\n  );\n  \n  feedbackComment.value = '';\n  closeFeedbackDialog();\n};\n\nconst closeFeedbackDialog = () => {\n  chatStore.showFeedbackDialog = false;\n  feedbackComment.value = '';\n};\n\n// MOTD methods\nconst dismissMotd = () => {\n  motdStore.setDismissed(true);\n};\n\nconst formatMotdContent = (content) => {\n  if (!content) return '';\n  try {\n    // Markdown in HTML konvertieren\n    const rawHtml = marked.parse(content);\n    \n    // HTML bereinigen (XSS-Schutz)\n    return DOMPurify.sanitize(rawHtml);\n  } catch (error) {\n    console.error('Fehler beim Rendern des Markdown-Inhalts:', error);\n    return `<p>Fehler beim Rendern des Inhalts</p>`;\n  }\n};\n\n// Stream updates watcher for auto-scroll\nwatch(() => chatStore.currentAnswer, () => {\n  // Only auto-scroll if we're streaming an answer\n  if (chatStore.streaming) {\n    scrollToBottom();\n  }\n});\n\n// When messages update, auto-scroll to bottom\nwatch(() => currentMessages.value.length, () => {\n  scrollToBottom();\n});\n\n// Lifecycle hooks\nonMounted(async () => {\n  // Load user settings from localStorage\n  chatStore.loadSettings();\n  \n  // Fetch sessions if not already loaded\n  if (sessionStore.sessions.length === 0) {\n    await sessionStore.fetchSessions();\n  }\n  \n  // Start polling for session updates\n  sessionStore.startSessionPolling();\n  \n  // Load MOTD if available\n  await motdStore.loadMotd();\n  \n  // Initialize scroll position\n  scrollToBottom();\n});\n</script>\n\n<style scoped>\n.chat-view {\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n}\n\n.chat-container {\n  display: flex;\n  height: 100%;\n  background-color: #f8fafc;\n}\n\n.sessions-sidebar {\n  width: 280px;\n  background-color: white;\n  border-right: 1px solid #e2e8f0;\n  flex-shrink: 0;\n  overflow-y: auto;\n}\n\n.chat-main {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  background-color: white;\n  border-radius: 0.5rem;\n  overflow: hidden;\n}\n\n.chat-content {\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n}\n\n.no-session {\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  background-color: #f8fafc;\n}\n\n.motd-banner-startup {\n  margin: 2rem 2rem 0 2rem;\n  max-width: 900px;\n  align-self: center;\n}\n\n.empty-state {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  padding: 2rem;\n  text-align: center;\n}\n\n.new-session-btn {\n  background-color: #3b82f6;\n  color: white;\n  border: none;\n  padding: 0.6rem 1.2rem;\n  border-radius: 0.375rem;\n  font-weight: 500;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n}\n\n.new-session-btn:hover {\n  background-color: #2563eb;\n}\n\n.messages-container {\n  flex: 1;\n  overflow-y: auto;\n  background-color: #f8fafc;\n}\n\n.input-container {\n  margin-top: auto;\n}\n\n.motd-banner {\n  position: relative;\n  padding: 1rem;\n  margin: 1rem;\n  border-radius: 0.5rem;\n  background-color: #eff6ff;\n  border: 1px solid #3b82f6;\n  color: #1e3a8a;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);\n}\n\n.motd-inner {\n  display: flex;\n  align-items: flex-start;\n}\n\n.motd-icon {\n  flex-shrink: 0;\n  margin-right: 0.75rem;\n  font-size: 1.25rem;\n  height: 1.5rem;\n  display: flex;\n  align-items: flex-start;\n}\n\n.motd-content {\n  flex-grow: 1;\n  font-size: 0.95rem;\n  padding-right: 1.5rem;\n}\n\n.motd-content :deep(p) {\n  margin-top: 0;\n  margin-bottom: 0.75rem;\n}\n\n.motd-content :deep(p:last-child) {\n  margin-bottom: 0;\n}\n\n.motd-content :deep(ul), .motd-content :deep(ol) {\n  margin-top: 0.5rem;\n  margin-bottom: 0.75rem;\n  padding-left: 1.5rem;\n}\n\n.motd-content :deep(a) {\n  color: inherit;\n  text-decoration: underline;\n}\n\n.dismiss-btn {\n  position: absolute;\n  top: 0.5rem;\n  right: 0.5rem;\n  background: transparent;\n  border: none;\n  cursor: pointer;\n  width: 24px;\n  height: 24px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: 4px;\n  padding: 0;\n  font-size: 0.9rem;\n  opacity: 0.7;\n}\n\n.dismiss-btn:hover {\n  background-color: rgba(0, 0, 0, 0.05);\n  opacity: 1;\n}\n\n/* Feedback dialog styles */\n.feedback-dialog-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: rgba(0, 0, 0, 0.5);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  z-index: 1000;\n}\n\n.feedback-dialog {\n  background-color: white;\n  border-radius: 0.5rem;\n  width: 90%;\n  max-width: 500px;\n  box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);\n}\n\n.dialog-header {\n  padding: 1rem 1.5rem;\n  border-bottom: 1px solid #e2e8f0;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.dialog-header h3 {\n  margin: 0;\n  color: #1e293b;\n  font-size: 1.25rem;\n  font-weight: 600;\n}\n\n.close-button {\n  background: transparent;\n  border: none;\n  color: #64748b;\n  cursor: pointer;\n  font-size: 1.5rem;\n  line-height: 1;\n}\n\n.dialog-content {\n  padding: 1.5rem;\n}\n\n.feedback-prompt {\n  margin-top: 0;\n  margin-bottom: 1rem;\n  color: #475569;\n}\n\n.feedback-textarea {\n  width: 100%;\n  padding: 0.75rem;\n  border: 1px solid #cbd5e1;\n  border-radius: 0.375rem;\n  resize: vertical;\n  font-family: inherit;\n  font-size: 0.95rem;\n}\n\n.feedback-textarea:focus {\n  outline: none;\n  border-color: #3b82f6;\n  box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.2);\n}\n\n.dialog-footer {\n  padding: 1rem 1.5rem;\n  border-top: 1px solid #e2e8f0;\n  display: flex;\n  justify-content: flex-end;\n  gap: 0.75rem;\n}\n\n.submit-button, .cancel-button {\n  padding: 0.5rem 1rem;\n  border-radius: 0.375rem;\n  cursor: pointer;\n  font-size: 0.875rem;\n}\n\n.submit-button {\n  background-color: #3b82f6;\n  color: white;\n  border: none;\n}\n\n.submit-button:hover:not(:disabled) {\n  background-color: #2563eb;\n}\n\n.submit-button:disabled {\n  background-color: #93c5fd;\n  cursor: not-allowed;\n}\n\n.cancel-button {\n  background-color: #f1f5f9;\n  color: #475569;\n  border: none;\n}\n\n.cancel-button:hover {\n  background-color: #e2e8f0;\n  color: #334155;\n}\n\n/* Responsive adjustments */\n@media (max-width: 768px) {\n  .sessions-sidebar {\n    width: 240px;\n  }\n}\n\n@media (max-width: 640px) {\n  .chat-container {\n    flex-direction: column;\n  }\n  \n  .sessions-sidebar {\n    width: 100%;\n    height: auto;\n    max-height: 30vh;\n    border-right: none;\n    border-bottom: 1px solid #e2e8f0;\n  }\n}\n</style>"],"names":["useSessionStore","defineStore","state","s","a","b","response","axios","error","_a","_c","_b","title","newSession","sessionId","session","newTitle","sessionIndex","intervalMs","useChatStore","currentSession","lastMessage","m","question","finalQuestion","sessionStore","tempUserMessage","answer","message_id","sources","assistantMessage","errorMessage","params","signal","token","eventSource","fullAnswer","messageId","event","data","source","isPositive","comment","value","simpleLanguage","streaming","e","props","__props","emit","__emit","showDeleteModal","ref","sessionToDelete","sessions","computed","sortedSessions","loading","selectSession","createNewSession","confirmDeleteSession","deleteSession","onMounted","watch","newSessions","chatStore","submitFeedback","showFeedbackDialog","hasSourceReferences","text","formatMessage","marked","code","lang","formatMessageWithSources","formattedText","questionText","inputRef","useSimpleLanguage","useStreaming","sendQuestion","updateSimpleLanguageSetting","updateStreamingSetting","newVal","formatRelevance","score","relevance","getRelevanceStyle","formatDate","dateString","formatContent","truncate","length","motdStore","useMotdStore","messagesContainer","feedbackComment","currentSessionId","currentMessages","isProcessing","isStreaming","currentFeedback","showSourceDialog","sourceDialogTitle","sourcesList","selectedSource","currentExplanation","sourceDialogLoading","motd","motdDismissed","handleSessionSelected","scrollToBottom","handleSessionCreated","handleSessionDeleted","nextTick","handleQuestionSent","handleShowSources","message","handleShowExplanation","selectSource","backToSourcesList","closeSourceDialog","submitFeedbackWithComment","closeFeedbackDialog","dismissMotd","formatMotdContent","content","rawHtml","DOMPurify"],"mappings":"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"}