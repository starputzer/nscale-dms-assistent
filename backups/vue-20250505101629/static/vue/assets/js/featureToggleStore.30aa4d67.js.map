{"version":3,"file":"featureToggleStore.30aa4d67.js","sources":["../../../src/stores/featureToggleStore.js"],"sourcesContent":["// stores/featureToggleStore.js\nimport { defineStore } from 'pinia';\n\n/**\n * Store zur Verwaltung der Feature-Toggles\n * Ermöglicht den Wechsel zwischen altem und neuem UI sowie das Aktivieren/Deaktivieren bestimmter Features\n * Nach der vollständigen Vue-Migration bleiben alle Kernfunktionen dauerhaft aktiviert\n */\nexport const useFeatureToggleStore = defineStore('featureToggle', {\n  state: () => {\n    // Prüfe, ob die Vue-Migration vollständig abgeschlossen ist\n    const vueMigrationComplete = localStorage.getItem('vue_migration_complete') === 'true';\n    \n    // Starte mit aktiviertem Vue.js, wenn die Migration abgeschlossen ist\n    const useNewUI = vueMigrationComplete ? true : \n      localStorage.getItem('useNewUI') === 'true';\n    \n    // Wenn Migration abgeschlossen, garantiere, dass alle Vue-Komponenten aktiviert sind\n    const guaranteeVueFeatures = (features) => {\n      if (vueMigrationComplete) {\n        return {\n          ...features,\n          vueDocConverter: true,\n          vueChat: true,\n          vueAdmin: true,\n          vueSettings: true\n        };\n      }\n      return features;\n    };\n    \n    // Lese Feature-Status, aber garantiere Vue-Features bei abgeschlossener Migration\n    return {\n      // Vue.js ist jetzt immer aktiviert, wenn die Migration abgeschlossen ist\n      useNewUI: useNewUI,\n      \n      // Feature-Flags mit Migration-Schutz\n      features: guaranteeVueFeatures({\n        // Dokumentenkonverter in Vue.js\n        vueDocConverter: vueMigrationComplete ? true :\n          localStorage.getItem('feature_vueDocConverter') === 'true',\n        \n        // Chat-Komponente in Vue.js\n        vueChat: vueMigrationComplete ? true :\n          localStorage.getItem('feature_vueChat') === 'true',\n        \n        // Admin-Panel in Vue.js\n        vueAdmin: vueMigrationComplete ? true :\n          localStorage.getItem('feature_vueAdmin') === 'true',\n        \n        // Einstellungskomponente in Vue.js\n        vueSettings: vueMigrationComplete ? true :\n          localStorage.getItem('feature_vueSettings') === 'true',\n        \n        // Neue Features können hier hinzugefügt werden - diese sind optional\n        darkMode: localStorage.getItem('feature_darkMode') === 'true' || false,\n        advancedSearch: localStorage.getItem('feature_advancedSearch') === 'true' || false,\n        experimentalUI: localStorage.getItem('feature_experimentalUI') === 'true' || false,\n      }),\n      \n      // Entwicklungsmodus aktivieren (zeigt z.B. den Toggle-Schalter an)\n      devMode: localStorage.getItem('devMode') === 'true' || false,\n      \n      // Migration-Status\n      migrationComplete: vueMigrationComplete\n    };\n  },\n  \n  getters: {\n    /**\n     * Prüft, ob ein bestimmtes Feature aktiviert ist\n     * @param {string} featureName - Name des Features\n     * @returns {boolean} - true, wenn Feature aktiviert ist\n     */\n    isFeatureEnabled: (state) => (featureName) => {\n      // Die Hauptkomponenten sind immer aktiviert, wenn Migration abgeschlossen\n      if (state.migrationComplete && \n          ['vueDocConverter', 'vueChat', 'vueAdmin', 'vueSettings'].includes(featureName)) {\n        return true;\n      }\n      \n      // Für andere optionale Features prüfe den Feature-Toggle\n      return state.features[featureName] || false;\n    },\n    \n    /**\n     * Liste aller aktivierten Features\n     */\n    activeFeatures: (state) => {\n      return Object.entries(state.features)\n        .filter(([_, value]) => value)\n        .map(([key]) => key);\n    }\n  },\n  \n  actions: {\n    /**\n     * Initialisiert den Store und sichert die Vue-Feature-Flags\n     * Wird automatisch beim Start aufgerufen\n     */\n    init() {\n      // Garantiere, dass alle Vue-Features bei abgeschlossener Migration aktiviert sind\n      if (this.migrationComplete) {\n        this.useNewUI = true;\n        this.features.vueDocConverter = true;\n        this.features.vueChat = true;\n        this.features.vueAdmin = true;\n        this.features.vueSettings = true;\n        \n        // Stelle sicher, dass der LocalStorage konsistent ist\n        localStorage.setItem('useNewUI', 'true');\n        localStorage.setItem('feature_useNewUI', 'true');\n        localStorage.setItem('feature_vueDocConverter', 'true');\n        localStorage.setItem('feature_vueChat', 'true');\n        localStorage.setItem('feature_vueAdmin', 'true');\n        localStorage.setItem('feature_vueSettings', 'true');\n        \n        // Entferne alte, potenziell konfliktverursachende Flags\n        localStorage.removeItem('useOldUI');\n        localStorage.removeItem('disableVue');\n        localStorage.removeItem('forceClassicDocConverter');\n        \n        if (import.meta.env.DEV) {\n          console.log('[FeatureToggleStore] Vue-Migration abgeschlossen, alle Kernfunktionen aktiviert');\n        }\n      }\n      \n      // Starte Laden von CSS-Dateien für Admin-Bereich\n      this.loadAdminCSS();\n    },\n    \n    /**\n     * Lade CSS-Dateien für Admin-Bereich\n     */\n    loadAdminCSS() {\n      const cssFiles = [\n        'admin.css',\n        'admin-styles.css',\n        'vue-fix.css'\n      ];\n      \n      const basePaths = [\n        '/css/',\n        '/frontend/css/',\n        '/static/css/',\n        '/nscale-vue/src/assets/css/'\n      ];\n      \n      cssFiles.forEach(cssFile => {\n        // Prüfe, ob CSS bereits geladen wurde\n        if (document.querySelector(`link[href$=\"/${cssFile}\"]`)) {\n          if (import.meta.env.DEV) {\n            console.log(`[FeatureToggleStore] CSS ${cssFile} bereits geladen`);\n          }\n          return;\n        }\n        \n        // Versuche Laden mit verschiedenen Pfaden\n        let loaded = false;\n        basePaths.forEach(basePath => {\n          if (loaded) return;\n          \n          const fullPath = `${basePath}${cssFile}`;\n          try {\n            const link = document.createElement('link');\n            link.rel = 'stylesheet';\n            link.href = fullPath;\n            link.onload = () => {\n              loaded = true;\n              if (import.meta.env.DEV) {\n                console.log(`[FeatureToggleStore] CSS geladen: ${fullPath}`);\n              }\n            };\n            document.head.appendChild(link);\n          } catch (e) {\n            console.error(`[FeatureToggleStore] Fehler beim Laden von CSS ${fullPath}:`, e);\n          }\n        });\n      });\n    },\n    \n    /**\n     * Aktiviert oder deaktiviert ein optionales Feature\n     * Kernfunktionen wie vueDocConverter können nicht mehr deaktiviert werden\n     * @param {string} featureName - Name des Features\n     * @param {boolean} value - Neuer Wert (true = aktiviert, false = deaktiviert)\n     */\n    toggleFeature(featureName, value) {\n      // Verhindere das Deaktivieren von Kernfunktionen bei abgeschlossener Migration\n      if (this.migrationComplete && \n          ['vueDocConverter', 'vueChat', 'vueAdmin', 'vueSettings'].includes(featureName)) {\n        console.warn(`${featureName} ist eine Kernfunktion und kann nicht deaktiviert werden.`);\n        return;\n      }\n      \n      // Nur optionale Features können umgeschaltet werden\n      if (this.features.hasOwnProperty(featureName)) {\n        this.features[featureName] = value;\n        localStorage.setItem(`feature_${featureName}`, value.toString());\n      }\n    },\n    \n    /**\n     * Entwicklermodus umschalten\n     * @param {boolean} value - Neuer Wert (true = aktiviert, false = deaktiviert)\n     */\n    toggleDevMode(value) {\n      this.devMode = value;\n      localStorage.setItem('devMode', value.toString());\n    },\n    \n    /**\n     * Alle optionalen Feature-Toggles aktivieren\n     */\n    enableAllOptionalFeatures() {\n      // Nur optionale Features ein/ausschalten\n      const optionalFeatures = Object.keys(this.features).filter(\n        key => !['vueDocConverter', 'vueChat', 'vueAdmin', 'vueSettings'].includes(key)\n      );\n      \n      optionalFeatures.forEach(key => {\n        this.features[key] = true;\n        localStorage.setItem(`feature_${key}`, 'true');\n      });\n    },\n    \n    /**\n     * Alle optionalen Feature-Toggles deaktivieren\n     */\n    disableAllOptionalFeatures() {\n      // Nur optionale Features ein/ausschalten\n      const optionalFeatures = Object.keys(this.features).filter(\n        key => !['vueDocConverter', 'vueChat', 'vueAdmin', 'vueSettings'].includes(key)\n      );\n      \n      optionalFeatures.forEach(key => {\n        this.features[key] = false;\n        localStorage.setItem(`feature_${key}`, 'false');\n      });\n    },\n    \n    /**\n     * Alle gespeicherten Feature-Einstellungen zurücksetzen\n     * @param {boolean} avoidReload - Wenn true, wird kein Seiten-Reload ausgeführt\n     */\n    resetAllSettings(avoidReload = false) {\n      // Prüfe den Migrations-Status\n      const migrationComplete = this.migrationComplete;\n      \n      if (migrationComplete) {\n        console.log('[FeatureToggleStore] Migration abgeschlossen - Kernfunktionen werden beim Reset beibehalten');\n      }\n      \n      // Entferne allgemeine Einstellungen\n      localStorage.removeItem('featureSettings');\n      \n      // Entferne alle Feature-Toggle-Einstellungen aus dem LocalStorage\n      // außer Kernfunktionen bei abgeschlossener Migration\n      Object.keys(this.features).forEach(key => {\n        if (migrationComplete && ['vueDocConverter', 'vueChat', 'vueAdmin', 'vueSettings'].includes(key)) {\n          // Kernfunktionen in Memory und Storage beibehalten\n          this.features[key] = true;\n          localStorage.setItem(`feature_${key}`, 'true');\n        } else {\n          localStorage.removeItem(`feature_${key}`);\n          // Setze Memory-Wert auf Default zurück\n          this.features[key] = false;\n        }\n      });\n      \n      // Stelle sicher, dass useNewUI bei abgeschlossener Migration aktiviert bleibt\n      if (migrationComplete) {\n        this.useNewUI = true;\n        localStorage.setItem('useNewUI', 'true');\n        localStorage.setItem('feature_useNewUI', 'true');\n        localStorage.setItem('vue_migration_complete', 'true');\n      } else {\n        this.useNewUI = false;\n        localStorage.removeItem('useNewUI');\n        localStorage.removeItem('feature_useNewUI');\n      }\n      \n      // Entferne potenziell konfliktverursachende Einstellungen\n      localStorage.removeItem('useOldUI');\n      localStorage.removeItem('disableVue');\n      localStorage.removeItem('forceClassicDocConverter');\n      \n      // Lade die Seite neu, um die Änderungen anzuwenden (außer wenn avoidReload=true\n      // oder wenn die Migration abgeschlossen ist - dann sind Änderungen minimal)\n      if (!avoidReload && !migrationComplete) {\n        console.log('[FeatureToggleStore] Einstellungen zurückgesetzt, Seite wird neu geladen');\n        window.location.reload();\n      }\n    },\n    \n    /**\n     * Konfiguration setzen (für Bulk-Update)\n     * @param {Object} config - Konfigurationsobjekt mit Features\n     * @param {boolean} avoidReload - Wenn true, wird kein Seiten-Reload ausgeführt\n     */\n    setConfig(config, avoidReload = false) {\n      const requiresReload = [];\n      \n      // useNewUI separat behandeln\n      if (config.hasOwnProperty('useNewUI') && \n          !this.migrationComplete && \n          config.useNewUI !== this.useNewUI) {\n        this.useNewUI = config.useNewUI;\n        localStorage.setItem('useNewUI', config.useNewUI.toString());\n        requiresReload.push('useNewUI');\n      }\n      \n      // Features setzen\n      if (config.features) {\n        Object.entries(config.features).forEach(([key, value]) => {\n          // Überspringe Kernfunktionen bei abgeschlossener Migration\n          if (this.migrationComplete && \n              ['vueDocConverter', 'vueChat', 'vueAdmin', 'vueSettings'].includes(key)) {\n            if (!value) {\n              console.warn(`[FeatureToggleStore] ${key} ist eine Kernfunktion und kann nicht deaktiviert werden.`);\n            }\n            return;\n          }\n          \n          // Prüfe, ob sich der Wert ändert\n          if (this.features.hasOwnProperty(key) && this.features[key] !== value) {\n            this.features[key] = value;\n            localStorage.setItem(`feature_${key}`, value.toString());\n            requiresReload.push(key);\n          }\n        });\n      }\n      \n      // DevMode setzen\n      if (config.hasOwnProperty('devMode') && config.devMode !== this.devMode) {\n        this.devMode = config.devMode;\n        localStorage.setItem('devMode', config.devMode.toString());\n      }\n      \n      // Neuladen vermeiden, wenn explizit angegeben oder keine Änderungen, die Neuladen erfordern\n      const shouldReload = !avoidReload && requiresReload.length > 0;\n      \n      if (shouldReload) {\n        console.log(`[FeatureToggleStore] Konfiguration aktualisiert (${requiresReload.join(', ')}), Seite wird neu geladen`);\n        window.location.reload();\n      } else if (requiresReload.length > 0) {\n        console.log(`[FeatureToggleStore] Konfiguration aktualisiert (${requiresReload.join(', ')}), kein Reload durchgeführt`);\n      }\n    }\n  }\n});\n\n// Die Store-Initialisierung erfolgt nur im mounted-Hook der App-Komponente\n// Fehlerhaften direkten Zugriff entfernen, da Pinia während des Imports nicht bereit ist"],"names":["useFeatureToggleStore","defineStore","vueMigrationComplete","features","state","featureName","_","value","key","cssFiles","basePaths","cssFile","loaded","basePath","fullPath","link","e","avoidReload","migrationComplete","config","requiresReload"],"mappings":"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"}