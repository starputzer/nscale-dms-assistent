<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>nscale DMS Assistent</title>
    
    <!-- Basis CSS für initiales Rendering (minimiert) -->
    <link rel="stylesheet" href="/assets/index.css">
    
    <!-- Login-Fix CSS für zentriertes Login-Formular -->
    <link rel="stylesheet" href="/css/login-fix.css">
    
    <!-- Favicon -->
    <link rel="icon" href="/assets/images/senmvku-logo.png" type="image/png">
    
    <!-- Preload kritische Assets -->
    <link rel="preload" href="/assets/images/senmvku-logo.png" as="image">
</head>
<body>
    <!-- App Mount Point -->
    <div id="app"><!-- Vue-App wird hier gemountet --></div>
    
    <!-- Initiales Lade-Feedback -->
    <div id="app-loading" class="app-loader">
        <div class="app-loader-content">
            <img src="/assets/images/senmvku-logo.png" alt="nscale Logo" class="app-loader-logo">
            <div class="app-loader-spinner"></div>
            <p>Anwendung wird geladen...</p>
        </div>
    </div>
    
    <!-- Kritische Inline-Skripte für initiale Konfiguration -->
    <script>
        // Grundlegende Konfiguration und Feature-Detection
        window.APP_CONFIG = {
            apiBaseUrl: '/api',
            buildVersion: '1.0.0',
            buildTimestamp: '20250511',
            environment: 'development'
        };
        
        // Theme-Präferenz aus LocalStorage oder Systemeinstellung laden
        (function() {
            const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
            const savedTheme = localStorage.getItem('theme');
            const theme = savedTheme || (prefersDark ? 'dark' : 'light');
            document.documentElement.classList.add(`theme-${theme}`);
            window.APP_CONFIG.initialTheme = theme;
        })();
        
        // UI Diagnostics Helper
        window.debugUI = {
            exportReport: function() {
                if (window.chatDiagnostics) {
                    window.chatDiagnostics.exportReport();
                } else {
                    console.log('UI Diagnostics not available yet');
                }
            },
            stores: function() {
                if (window.chatDiagnostics) {
                    console.log('Stores:', {
                        sessions: window.chatDiagnostics.sessionsStore,
                        auth: window.chatDiagnostics.authStore,
                        ui: window.chatDiagnostics.uiStore
                    });
                } else {
                    console.log('Stores not available yet');
                }
            },
            checkAuth: function() {
                if (window.authDebug) {
                    window.authDebug.checkAuthStatus();
                } else {
                    console.log('Auth debug not available');
                }
            }
        };
        
        // Globaler Fehler-Handler mit erweitertem Logging
        window.addEventListener('error', function(event) {
            console.error('Globaler Fehler abgefangen:', {
                message: event.message,
                filename: event.filename,
                lineno: event.lineno,
                colno: event.colno,
                error: event.error
            });
            
            // Spezielle Behandlung für bekannte Fehler
            if (event.message.includes('messagesResponse is not defined')) {
                console.error('Known issue: messagesResponse is not defined - this has been fixed in sessions.ts');
                event.preventDefault();
                return;
            }
            
            const errorElement = document.createElement('div');
            errorElement.className = 'critical-error';
            errorElement.innerHTML = `
                <div class="critical-error-content">
                    <h2>Anwendungsfehler</h2>
                    <p>Es ist ein unerwarteter Fehler aufgetreten. Bitte laden Sie die Seite neu.</p>
                    <button onclick="window.location.reload()">Neu laden</button>
                    <details style="margin-top: 1rem;">
                        <summary>Fehlerdetails</summary>
                        <pre style="text-align: left; font-size: 0.8rem; overflow-x: auto;">${event.message}\n${event.filename}:${event.lineno}:${event.colno}</pre>
                    </details>
                </div>
            `;
            
            const appLoader = document.getElementById('app-loading');
            if (appLoader) appLoader.style.display = 'none';
            
            document.body.appendChild(errorElement);
        });
        
        window.addEventListener('unhandledrejection', function(event) {
            console.error('Unhandled Promise Rejection:', event.reason);
        });

        // Quellenreferenzen Legacy-Fallback-Funktionen
        // Verbessertes System mit zentraler Fehlerbehandlung und weiteren Fallback-Mechanismen
        
        // Zentrale Speicherung des Zustands
        window.__sourceReferencesState = {
            visibleSourceReferences: {},
            openSourceDetails: {},
            messageSourceReferences: {},
            isLoadingReferences: {},
            sourcePopupState: {
                isVisible: false,
                position: { top: 0, left: 0 },
                content: { title: '', text: '', sourceId: '' }
            }
        };
        
        // Zentrale Fehlerverwaltung für alle Source-Reference-Funktionen
        function handleSourceReferenceError(functionName, error, fallbackValue) {
            console.error(`[SOURCE-REFERENCES] Fehler in ${functionName}:`, error);
            console.trace();
            return fallbackValue;
        }
        
        // VERBESSERTE IMPLEMENTIERUNG: Zuverlässige Prüfung auf sichtbare Quellenreferenzen
        window.isSourceReferencesVisible = function(message) {
            try {
                if (!message) return false;
                const messageId = typeof message === 'string' ? message : message.id;
                if (!messageId) return false;
                
                return !!window.__sourceReferencesState.visibleSourceReferences[messageId];
            } catch (error) {
                return handleSourceReferenceError('isSourceReferencesVisible', error, false);
            }
        };
        
        // VERBESSERTE IMPLEMENTIERUNG: Robuste Toggle-Funktion mit vollständiger Fehlerbehandlung
        window.toggleSourceReferences = function(message) {
            try {
                if (!message) return;
                const messageId = typeof message === 'string' ? message : message.id;
                if (!messageId) return;
                
                // Zustand umschalten
                window.__sourceReferencesState.visibleSourceReferences[messageId] = 
                    !window.__sourceReferencesState.visibleSourceReferences[messageId];
                
                // Event auslösen für andere Komponenten
                const event = new CustomEvent('sourceReferencesToggled', { 
                    detail: { 
                        messageId: messageId, 
                        visible: window.__sourceReferencesState.visibleSourceReferences[messageId] 
                    } 
                });
                window.dispatchEvent(event);
                
                return window.__sourceReferencesState.visibleSourceReferences[messageId];
            } catch (error) {
                return handleSourceReferenceError('toggleSourceReferences', error, false);
            }
        };
        
        // VERBESSERTE IMPLEMENTIERUNG: Zuverlässiges Abrufen von Quellenreferenzen
        window.getSourceReferences = function(message) {
            try {
                if (!message) return [];
                
                const messageId = typeof message === 'string' ? message : message.id;
                if (!messageId) return [];
                
                // Quellen aus verschiedenen möglichen Quellen abrufen
                const fromState = window.__sourceReferencesState.messageSourceReferences[messageId]?.sources || [];
                const fromMessage = message.sources || message.metadata?.sourceReferences || [];
                
                return fromState.length > 0 ? fromState : fromMessage;
            } catch (error) {
                return handleSourceReferenceError('getSourceReferences', error, []);
            }
        };
        
        // VERBESSERTE IMPLEMENTIERUNG: Lade-Status-Überprüfung
        window.isLoadingSourceReferences = function(message) {
            try {
                if (!message) return false;
                
                const messageId = typeof message === 'string' ? message : message.id;
                if (!messageId) return false;
                
                return !!window.__sourceReferencesState.isLoadingReferences[messageId];
            } catch (error) {
                return handleSourceReferenceError('isLoadingSourceReferences', error, false);
            }
        };
        
        // VERBESSERTE IMPLEMENTIERUNG: Prüfung auf geöffnete Quellendetails
        window.isSourceDetailOpen = function(message, sourceIndex) {
            try {
                if (!message) return false;
                
                const messageId = typeof message === 'string' ? message : message.id;
                if (!messageId) return false;
                
                const key = `${messageId}-${sourceIndex}`;
                return !!window.__sourceReferencesState.openSourceDetails[key];
            } catch (error) {
                return handleSourceReferenceError('isSourceDetailOpen', error, false);
            }
        };
        
        // VERBESSERTE IMPLEMENTIERUNG: Umschalten von Quellendetails
        window.toggleSourceDetail = function(message, sourceIndex) {
            try {
                if (!message) return;
                
                const messageId = typeof message === 'string' ? message : message.id;
                if (!messageId) return;
                
                const key = `${messageId}-${sourceIndex}`;
                window.__sourceReferencesState.openSourceDetails[key] = 
                    !window.__sourceReferencesState.openSourceDetails[key];
                
                // Event auslösen
                const event = new CustomEvent('sourceDetailToggled', { 
                    detail: { 
                        messageId: messageId, 
                        sourceIndex: sourceIndex,
                        isOpen: window.__sourceReferencesState.openSourceDetails[key]
                    } 
                });
                window.dispatchEvent(event);
            } catch (error) {
                handleSourceReferenceError('toggleSourceDetail', error);
            }
        };
        
        // Weitere Hilfsfunktionen für die Nachrichtenformatierung
        window.formatMessage = function(text) {
            try {
                return text?.replace(/\n/g, '<br>') || '';
            } catch (error) {
                return handleSourceReferenceError('formatMessage', error, text || '');
            }
        };
        
        window.formatMessageWithSources = function(text) {
            try {
                if (!text) return '';
                
                // Einfache Quellenannotationen mit formatieren
                let formattedText = text.replace(/\n/g, '<br>');
                
                // Quellenreferenzen im Format [[src:123]] finden und formatieren
                formattedText = formattedText.replace(
                    /\[\[src:(\w+)\]\]/g, 
                    '<span class="source-reference" data-source-id="$1">[Quelle $1]</span>'
                );
                
                return formattedText;
            } catch (error) {
                return handleSourceReferenceError('formatMessageWithSources', error, text || '');
            }
        };
        
        window.formatMotdContent = function(content) {
            try {
                return content?.replace(/\n/g, '<br>') || '';
            } catch (error) {
                return handleSourceReferenceError('formatMotdContent', error, content || '');
            }
        };
        
        // Hilfsfunktion um zu prüfen, ob eine Nachricht Quellenreferenzen enthält
        window.hasSourceReferences = function(content) {
            try {
                if (!content) return false;
                
                return (
                    /\(Quelle-\d+\)/.test(content) ||
                    /Dokument \d+/.test(content) ||
                    /Quelle(n)?:/.test(content) ||
                    /Abschnitt/.test(content) ||
                    /aus nscale/.test(content) ||
                    content.includes("[[src:") ||
                    /\[\[src:\w+\]\]/i.test(content)
                );
            } catch (error) {
                return handleSourceReferenceError('hasSourceReferences', error, false);
            }
        };
        
        // Debug-Hilfsfunktion zur Überprüfung des Zustands der Quellenreferenzen
        window.debugSourceReferences = function() {
            console.log('[SOURCE-REFERENCES DEBUG] Aktueller Zustand:', {
                visibleSourceReferences: window.__sourceReferencesState.visibleSourceReferences,
                openSourceDetails: window.__sourceReferencesState.openSourceDetails,
                messageSourceReferences: window.__sourceReferencesState.messageSourceReferences,
                isLoadingReferences: window.__sourceReferencesState.isLoadingReferences
            });
            
            const functions = [
                'isSourceReferencesVisible',
                'toggleSourceReferences',
                'getSourceReferences',
                'isLoadingSourceReferences',
                'isSourceDetailOpen',
                'toggleSourceDetail'
            ];
            
            console.log('[SOURCE-REFERENCES DEBUG] Verfügbare Funktionen:', 
                functions.reduce((acc, fn) => {
                    acc[fn] = typeof window[fn] === 'function';
                    return acc;
                }, {})
            );
            
            return 'SOURCE-REFERENCES DEBUG-INFO in der Konsole angezeigt';
        };
    </script>
    
    <!-- Haupt-App-Bundle - dynamisch via Vite erzeugt -->
    <script type="module" src="/src/main.ts"></script>
    
    <!-- Debug Console Info -->
    <script>
        console.log('%c🔍 Debug Console Commands Available:', 'color: #00a550; font-weight: bold;');
        console.log('%c  window.debugUI.exportReport() - Export UI diagnostics report', 'color: #666;');
        console.log('%c  window.debugUI.stores() - View current store states', 'color: #666;');
        console.log('%c  window.debugUI.checkAuth() - Check authentication status', 'color: #666;');
        console.log('%c  window.authDebug.* - Various auth debugging functions', 'color: #666;');
        console.log('%c  window.debugSourceReferences() - Debug source references state', 'color: #666;');
    </script>
</body>
</html>