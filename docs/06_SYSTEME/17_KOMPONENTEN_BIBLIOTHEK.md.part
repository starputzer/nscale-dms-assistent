### 6.4 Kalender, Tags und Baumansicht

```vue
<template>
  <div class="demo-container">
    <div class="demo-section">
      <h3>Tag-Komponenten</h3>
      <div class="tag-examples">
        <Tag>Standard Tag</Tag>
        <Tag variant="primary">Prim√§r</Tag>
        <Tag variant="success" closable @close="handleClose('Success')">Erfolg</Tag>
        <Tag variant="info" rounded>Information</Tag>
        <Tag variant="warning" size="large">Warnung</Tag>
        <Tag variant="error" size="small">Fehler</Tag>
        <Tag color="#8e44ad" textColor="white">Benutzerdefiniert</Tag>
        <Tag clickable @click="handleTagClick">Klickbar</Tag>
        <Tag disabled>Deaktiviert</Tag>
      </div>
      
      <div class="demo-subsection">
        <h4>Dokument-Tags</h4>
        <div class="document-tags">
          <Tag 
            v-for="(doc, index) in documents" 
            :key="index"
            :variant="getDocumentTypeVariant(doc.type)"
            closable
            @close="() => removeDocument(index)"
          >
            {{ doc.name }}
          </Tag>
        </div>
      </div>
    </div>
    
    <div class="demo-section">
      <h3>Kalender</h3>
      <Calendar 
        v-model="selectedDate"
        :events="calendarEvents"
        @select="handleDateSelect"
      />
    </div>
    
    <div class="demo-section">
      <h3>Hierarchische Baumstruktur</h3>
      <Tree
        :items="treeData"
        label-prop="name"
        :selectable="true"
        :checkable="true"
        :defaultExpandAll="true"
        @select="handleNodeSelect"
      >
        <!-- Angepasste Icons -->
        <template #icon="{ item, leaf }">
          <span v-if="leaf" class="tree-file-icon">üìÑ</span>
          <span v-else class="tree-folder-icon">üìÅ</span>
        </template>
        
        <!-- Extra-Informationen -->
        <template #extra="{ item }">
          <Tag 
            v-if="item.type" 
            :variant="getFileTypeVariant(item.type)"
            size="small"
          >
            {{ item.type }}
          </Tag>
        </template>
      </Tree>
    </div>
  </div>
</template>

<script setup>
import { ref } from 'vue';
import { Tag, Calendar, Tree } from '@nscale/components';

// Tag-Beispiele
const documents = ref([
  { name: 'Projektplan.pdf', type: 'pdf' },
  { name: 'Pr√§sentation.pptx', type: 'pptx' },
  { name: 'Datenanalyse.xlsx', type: 'xlsx' },
  { name: 'Konzeptpapier.docx', type: 'docx' },
  { name: 'Technische_Spezifikation.md', type: 'md' }
]);

function getDocumentTypeVariant(type) {
  const variants = {
    'pdf': 'error',
    'pptx': 'warning',
    'xlsx': 'success',
    'docx': 'primary',
    'md': 'info'
  };
  return variants[type] || 'default';
}

function handleClose(tagName) {
  console.log(`Tag geschlossen: ${tagName}`);
}

function handleTagClick() {
  console.log('Klickbarer Tag wurde angeklickt');
}

function removeDocument(index) {
  documents.value.splice(index, 1);
}

// Kalender-Beispiele
const selectedDate = ref(new Date());
const calendarEvents = ref([
  {
    date: new Date(2025, 4, 15),
    content: 'Projektmeeting',
    color: '#4299e1'
  },
  {
    date: new Date(2025, 4, 18),
    content: 'Deployment',
    color: '#48bb78'
  },
  {
    date: new Date(2025, 4, 22),
    content: 'Kundenpr√§sentation',
    color: '#ed8936'
  },
  {
    date: new Date(2025, 4, 10),
    content: 'Code Review',
    color: '#9f7aea'
  }
]);

function handleDateSelect(date) {
  console.log(`Datum ausgew√§hlt: ${date.toLocaleDateString()}`);
}

// Baum-Beispiele
const treeData = ref([
  {
    name: 'Dokumente',
    children: [
      {
        name: 'Projektmanagement',
        children: [
          { name: 'Projektplan.pdf', type: 'pdf' },
          { name: 'Ressourcenplanung.xlsx', type: 'xlsx' },
          { name: 'Risikoanalyse.docx', type: 'docx' }
        ]
      },
      {
        name: 'Technische Dokumente',
        children: [
          { name: 'Architektur.md', type: 'md' },
          { name: 'API-Dokumentation.md', type: 'md' },
          { name: 'Datenbankschema.png', type: 'png' }
        ]
      }
    ]
  },
  {
    name: 'Bilder',
    children: [
      { name: 'Screenshot_1.png', type: 'png' },
      { name: 'Diagramm.svg', type: 'svg' },
      { name: 'Logo.jpg', type: 'jpg' }
    ]
  }
]);

function getFileTypeVariant(type) {
  const variants = {
    'pdf': 'error',
    'xlsx': 'success',
    'docx': 'primary',
    'md': 'info',
    'png': 'warning',
    'svg': 'warning',
    'jpg': 'warning'
  };
  return variants[type] || 'default';
}

function handleNodeSelect(node, selected) {
  console.log(`Node ${selected ? 'selected' : 'deselected'}: ${node.name}`);
}
</script>

<style scoped>
.demo-container {
  display: flex;
  flex-direction: column;
  gap: var(--nscale-space-6);
}

.demo-section {
  padding: var(--nscale-space-4);
  border: 1px solid var(--nscale-gray-200);
  border-radius: var(--nscale-border-radius-md);
  background-color: var(--nscale-white);
}

.demo-section h3 {
  margin-top: 0;
  margin-bottom: var(--nscale-space-4);
  font-size: var(--nscale-font-size-xl);
  color: var(--nscale-gray-800);
}

.demo-subsection {
  margin-top: var(--nscale-space-4);
}

.demo-subsection h4 {
  margin-top: 0;
  margin-bottom: var(--nscale-space-2);
  font-size: var(--nscale-font-size-lg);
  color: var(--nscale-gray-700);
}

.tag-examples {
  display: flex;
  flex-wrap: wrap;
  gap: var(--nscale-space-2);
  margin-bottom: var(--nscale-space-4);
}

.document-tags {
  display: flex;
  flex-wrap: wrap;
  gap: var(--nscale-space-2);
  padding: var(--nscale-space-3);
  background-color: var(--nscale-gray-50);
  border-radius: var(--nscale-border-radius-md);
}

.tree-file-icon,
.tree-folder-icon {
  font-size: 1.2em;
}
</style>
```