import { defineConfig } from "vite";
import vue from "@vitejs/plugin-vue";
import { fileURLToPath, URL } from "url";
import { resolve, join, dirname } from "path";
import fs from "fs";
import compression from "vite-plugin-compression";
import { visualizer } from "rollup-plugin-visualizer";
import { ViteImageOptimizer } from "vite-plugin-image-optimizer";

// Bestimme das Basisverzeichnis des Projekts
const projectRoot = resolve(__dirname);
const srcDir = resolve(projectRoot, "src");
const publicDir = resolve(projectRoot, "public");
const distDir = resolve(projectRoot, "api/frontend");
const isProduction = process.env.NODE_ENV === "production";

// Logging für den Entwicklungsprozess
console.log("Vite-Konfiguration wird geladen");
console.log(`Projekt-Verzeichnis: ${projectRoot}`);
console.log(`Src-Verzeichnis: ${srcDir}`);
console.log(`Public-Verzeichnis: ${publicDir}`);
console.log(`Dist-Verzeichnis: ${distDir}`);

/**
 * CSS-Handling-Plugin für Vite
 * Behandelt CSS-Dateien korrekt, ohne sie als Module zu laden
 */
function cssHandlingPlugin() {
  return {
    name: "css-handling",
    transform(code, id) {
      // Wenn es sich um einen CSS-Import in einer JS-Datei handelt
      if (
        id.endsWith(".js") &&
        code.includes("import") &&
        code.includes(".css")
      ) {
        // Entferne CSS-Imports aus JS-Dateien
        const newCode = code.replace(
          /import ['"].*\.css['"];?/g,
          "// CSS-Import wurde entfernt",
        );
        return {
          code: newCode,
          map: null,
        };
      }
      return null;
    },
  };
}

/**
 * Plugin zur Behebung von NPM-Modulen Problemen
 * Stellt virtuelle Module für nicht-installierte NPM-Pakete bereit
 */
function npmModulesPlugin() {
  return {
    name: "npm-modules-fix",
    resolveId(id) {
      // Behandelt uuid und andere problematische Module
      if (id === "uuid") {
        // Virtuelles Modul für uuid
        return "\0virtual:uuid";
      }
      return null;
    },
    load(id) {
      // Stellt virtuellen Code für uuid-Modul bereit
      if (id === "\0virtual:uuid") {
        return `
          import { v4 } from '@/utils/uuidUtil';
          export { v4 };
          export default { v4 };
        `;
      }
      return null;
    },
  };
}

/**
 * Handler für Symlinks in der Anwendung
 * Löst Symlinks auf und verfolgt sie bis zum tatsächlichen Pfad
 */
function resolveSymlinks(path) {
  try {
    // Prüfe, ob der Pfad existiert
    if (!fs.existsSync(path)) {
      return path;
    }

    // Prüfe, ob es ein Symlink ist
    const stats = fs.lstatSync(path);
    if (!stats.isSymbolicLink()) {
      return path;
    }

    // Löse den Symlink auf
    const target = fs.readlinkSync(path);
    const resolvedPath = resolve(dirname(path), target);

    console.log(`Symlink aufgelöst: ${path} -> ${resolvedPath}`);

    // Rekursiv auflösen (falls der Symlink auf einen anderen Symlink zeigt)
    return resolveSymlinks(resolvedPath);
  } catch (err) {
    console.error(`Fehler beim Auflösen des Symlinks ${path}:`, err);
    return path;
  }
}

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [
    vue(),
    cssHandlingPlugin(), // Plugin für korrektes CSS-Handling
    npmModulesPlugin(), // Plugin für NPM-Module Probleme
    // Sicheres Image-Optimierungs-Plugin für Produktion
    isProduction && ViteImageOptimizer({
      png: {
        quality: 80,
        compressionLevel: 8,
      },
      jpeg: {
        quality: 80,
        progressive: true,
      },
      jpg: {
        quality: 80,
        progressive: true,
      },
      webp: {
        lossless: false,
        quality: 80,
      },
      svg: {
        multipass: true,
        plugins: [
          {
            name: 'preset-default',
            params: {
              overrides: {
                cleanupNumericValues: false,
                removeViewBox: false,
              },
            },
          },
        ],
      },
      cache: true,
      logStats: true,
    }),
    // Kompression für bessere Produktionsperformance
    isProduction && compression({
      algorithm: 'gzip',
      ext: '.gz',
      threshold: 10240, // Mindestgröße für Kompression (10KB)
      deleteOriginFile: false,
    }),
    // Bündel-Visualisierung für Analysen
    process.env.ANALYZE && visualizer({
      filename: './stats.html',
      open: true,
      gzipSize: true,
      brotliSize: true,
    }),
  ].filter(Boolean), // Entferne alle falsy-Werte aus der Plugin-Liste

  // Konfiguration für die öffentlichen Verzeichnisse
  publicDir: "public",
  root: ".",

  // Optimiere die Abhängigkeitsauflösung
  optimizeDeps: {
    include: ['vue', 'vue-router', 'pinia', '@vueuse/core'],
    exclude: [],
    esbuildOptions: {
      define: {
        global: "globalThis",
      },
      target: 'es2020',
      supported: { 
        'top-level-await': true 
      },
    },
  },

  // CSS-spezifische Konfiguration
  css: {
    // Deaktiviere CSS-Module für globale Styles
    modules: false,
    // Nur Sourcemaps im Entwicklungsmodus
    devSourcemap: !isProduction,
    // Simplified PostCSS configuration without dynamic requires
    postcss: {
      plugins: []
    },
  },

  // Verbesserte Alias-Konfiguration
  resolve: {
    alias: {
      "@": fileURLToPath(new URL("./src", import.meta.url)),
      "~": fileURLToPath(new URL("./", import.meta.url)),
      "@assets": resolve(srcDir, "assets"),
      "@components": resolve(srcDir, "components"),
      "@composables": resolve(srcDir, "composables"),
      "@views": resolve(srcDir, "views"),
      "@stores": resolve(srcDir, "stores"),
      "@utils": resolve(srcDir, "utils"),
      "@services": resolve(srcDir, "services"),
      "@bridge": resolve(srcDir, "bridge"),
      // Vue-Module
      vue: resolve(projectRoot, "node_modules/vue/dist/vue.esm-bundler.js"),
      "@vue/runtime-dom": resolve(
        projectRoot,
        "node_modules/@vue/runtime-dom/dist/runtime-dom.esm-bundler.js",
      ),
      "@vue/shared": resolve(
        projectRoot,
        "node_modules/@vue/shared/dist/shared.esm-bundler.js",
      ),
      "@vue/reactivity": resolve(
        projectRoot,
        "node_modules/@vue/reactivity/dist/reactivity.esm-bundler.js",
      ),
    },
    extensions: [".js", ".ts", ".vue", ".json"],
  },

  // Server-Konfiguration für die Entwicklung
  server: {
    port: 3000,
    strictPort: true,
    cors: true,
    hmr: true, // Hot Module Replacement aktivieren
    // Konfiguriere Vite, um Ressourcen aus dem Projektverzeichnis zu servieren
    fs: {
      strict: false,
      allow: [projectRoot],
    },
    // Verbesserte Proxy-Konfiguration für API-Anfragen
    proxy: {
      "/api": {
        target: "http://localhost:8080", // API-Server auf Port 8080
        changeOrigin: true,
        secure: false,
        ws: true,
        rewrite: (path) => path,
        configure: (proxy, _options) => {
          proxy.on("error", (err, _req, _res) => {
            console.log("Proxy-Fehler:", err);
          });
          proxy.on("proxyReq", (proxyReq, req, _res) => {
            console.log("Proxy-Anfrage:", req.method, req.url);
          });
        },
      },
    },
  },

  // Build-Optionen
  build: {
    outDir: distDir,
    assetsDir: "assets",
    emptyOutDir: true,
    sourcemap: !isProduction, // Sourcemaps nur im Entwicklungsmodus
    
    // Optimierung für Produktion
    minify: isProduction ? 'terser' : false,
    terserOptions: isProduction ? {
      compress: {
        drop_console: true,
        drop_debugger: true,
        pure_funcs: ["console.log", "console.debug", "console.info"],
      }
    } : undefined,

    // Verbesserte Aufteilung der Chunks
    rollupOptions: {
      input: {
        main: resolve(projectRoot, "public/index.html")
      },
      output: {
        entryFileNames: isProduction ? "js/[name].[hash].js" : "js/[name].js",
        chunkFileNames: isProduction 
          ? "js/chunks/[name]-[hash].js" 
          : "js/chunks/[name].js",
        assetFileNames: (assetInfo) => {
          const extType = assetInfo.name?.split(".").pop();
          if (extType && /png|jpe?g|svg|gif|tiff|bmp|ico/i.test(extType)) {
            return "assets/images/[name].[hash][extname]";
          }
          if (extType && /css/i.test(extType)) {
            return "assets/styles/[name].[hash][extname]";
          }
          if (extType && /woff2?|ttf|eot/i.test(extType)) {
            return "assets/fonts/[name].[hash][extname]";
          }
          return "assets/[name].[hash][extname]";
        },
        manualChunks: (id) => {
          // Vendor-Bibliotheken
          if (id.includes('node_modules')) {
            if (id.includes('vue')) return 'vendor-vue';
            if (id.includes('pinia')) return 'vendor-pinia';
            if (id.includes('router')) return 'vendor-router';
            if (id.includes('axios')) return 'vendor-axios';
            if (id.includes('chart')) return 'vendor-chart';
            if (id.includes('marked')) return 'vendor-marked';
            if (id.includes('vueuse')) return 'vendor-vueuse';
            return 'vendor';
          }

          // App-Komponenten
          if (id.includes('/components/')) {
            if (id.includes('/admin/')) return 'components-admin';
            if (id.includes('/chat/')) return 'components-chat';
            if (id.includes('/ui/')) return 'components-ui';
            if (id.includes('/shared/')) return 'components-shared';
            return 'components';
          }

          // Stores
          if (id.includes('/stores/')) {
            if (id.includes('/admin/')) return 'stores-admin';
            if (id.includes('/sessions')) return 'stores-sessions';
            return 'stores';
          }

          // Services
          if (id.includes('/services/')) {
            if (id.includes('/api/')) return 'services-api';
            return 'services';
          }

          // Bridge-System
          if (id.includes('/bridge/')) {
            return 'bridge';
          }
          
          return undefined; // Standardverhalten für nicht zugeordnete Module
        },
      },
    },

    // Verbesserte Caching-Strategie
    assetsInlineLimit: 10240, // 10kb
    cssCodeSplit: true,
    target: 'es2019',
    modulePreload: true,
  },
});