import { vi, beforeAll, afterEach, afterAll } from 'vitest';
import { config } from '@vue/test-utils';

// Global mocks and stubs
config.global.mocks = {
  $t: (key: string, values?: Record<string, any>) => {
    if (values) {
      return Object.entries(values).reduce(
        (acc, [key, value]) => acc.replace(`{${key}}`, String(value)),
        key
      );
    }
    return key;
  },
};

// Mock window methods and browser APIs
beforeAll(() => {
  // Mock IntersectionObserver
  global.IntersectionObserver = vi.fn(() => ({
    observe: vi.fn(),
    unobserve: vi.fn(),
    disconnect: vi.fn(),
    root: null,
    rootMargin: '',
    thresholds: []
  }));
  
  // Mock ResizeObserver
  global.ResizeObserver = vi.fn(() => ({
    observe: vi.fn(),
    unobserve: vi.fn(),
    disconnect: vi.fn()
  }));
  
  // Mock matchMedia
  global.matchMedia = vi.fn().mockImplementation(query => ({
    matches: false,
    media: query,
    onchange: null,
    addListener: vi.fn(),
    removeListener: vi.fn(),
    addEventListener: vi.fn(),
    removeEventListener: vi.fn(),
    dispatchEvent: vi.fn()
  }));
  
  // Mock window.Blob
  class MockBlob {
    size: number;
    type: string;
    
    constructor(parts: any[], options?: BlobPropertyBag) {
      this.size = parts.reduce((acc, part) => acc + (typeof part === 'string' ? part.length : part.size || 0), 0);
      this.type = options?.type || '';
    }
  }
  global.Blob = MockBlob as any;
  
  // Mock URL.createObjectURL and URL.revokeObjectURL
  global.URL.createObjectURL = vi.fn().mockImplementation(() => 'mock-object-url');
  global.URL.revokeObjectURL = vi.fn();
  
  // Mock window.fetch
  global.fetch = vi.fn();
  
  // Mock FormData (needed for FileUpload)
  global.FormData = class {
    private data: Record<string, any> = {};
    
    append(key: string, value: any) {
      this.data[key] = value;
    }
    
    get(key: string) {
      return this.data[key];
    }
    
    has(key: string) {
      return key in this.data;
    }
    
    delete(key: string) {
      delete this.data[key];
    }
  };
  
  // Mock setInterval and clearInterval
  global.setInterval = vi.fn();
  global.clearInterval = vi.fn();
  
  // Mock document.execCommand for copy operations
  document.execCommand = vi.fn();
  
  // Mock console methods to avoid noise during tests
  // Only warn and error since they might indicate issues
  console.info = vi.fn();
  console.debug = vi.fn();
  console.log = vi.fn();
});

// Clean up after each test
afterEach(() => {
  vi.clearAllMocks();
  document.body.innerHTML = '';
});

// Clean up after all tests
afterAll(() => {
  // Additional cleanup if needed
  console.info = console.info.bind(console);
  console.debug = console.debug.bind(console);
  console.log = console.log.bind(console);
});

// Utility function to create a file for testing
export function createTestFile(name = 'test.pdf', type = 'application/pdf', size = 1024, content = 'test content') {
  return new File([content], name, { type });
}

// Utility function to create mock components
export function createMockComponent(name, template = `<div data-testid="${name}"></div>`) {
  return {
    name,
    template,
    inheritAttrs: false,
    mounted() {
      this.$emit('mounted');
    },
    unmounted() {
      this.$emit('unmounted');
    }
  };
}

// Add your own utility functions below